package movimentacao;

import ClassesFirebird.InfoCertificadoBean;
import ClassesFirebird.Tabusu;
import ClassesMDFe.Assina;
import ClassesMDFe.InfoCertificado;
import ClassesMDFe.MDFeConsultaSitMDFe;
import ClassesMDFe.MDFeConsultaStatusServico;
import ClassesMDFe.MDFeRecepcao;
import ClassesMDFe.MDFeRetRecepcao;
import ClassesMDFe.Valida;
import static ClassesMDFe.Valida.ValidaDocXML;
import ConexaoDB.Conectar;
import static ConexaoDB.Conectar.result;
import Utilitarios.LimitaField;
import Utilitarios.Utilitarios;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableEntryException;
import java.security.cert.CertificateException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Formatter;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.xml.parsers.ParserConfigurationException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

import org.xml.sax.SAXParseException;
import pesquisa.TelaBuscaCondutor;
import pesquisa.TelaBuscaEmbarcacao;
import pesquisa.TelaBuscaFilial;
import pesquisa.TelaBuscaFornecedorVale;
import pesquisa.TelaBuscaReboque;
import pesquisa.TelaBuscaResponsavelPagamento;
import pesquisa.TelaBuscaTerminalCarregamento;
import pesquisa.TelaBuscaTerminalDescarregamento;
import pesquisa.TelaBuscaUnidadeCargaVazia;
import pesquisa.TelaBuscaVeiculo;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;
import pesquisa.TelaBuscaBalsa;
import pesquisa.TelaBuscaContratante;
import pesquisa.TelaBuscaPorto;
import pesquisa.TelaBuscaSeguradora;
//import pesquisa.TelaBuscaSeguradora;
import pesquisa.TelaBuscaUnidadeTransVazia;

public class TelaMovimentacao extends javax.swing.JFrame {
    public static String TagStartXml = null;    
    public static String TagEndXml   = null;
    public static String ValorXml    = null;
    public Integer codmax, selecionada;
    String sql, ordnar, situacao, tag_acao;
    DefaultTableCellRenderer direita   = new DefaultTableCellRenderer();
    DefaultTableCellRenderer centro    = new DefaultTableCellRenderer();
    DefaultTableCellRenderer esquerda  = new DefaultTableCellRenderer();
    static TelaMovimentacao instancia  = new TelaMovimentacao();    
    Valida validaxml                   = new Valida();
    Utilitarios util                   = new Utilitarios();
    Tabusu tabusu                      = new Tabusu();
    InfoCertificado infocert           = new InfoCertificado(); 
    InfoCertificadoBean InfoCertBean   = new InfoCertificadoBean();
    
    public static String cUF,verAplic,cStat,xMotivo,infRec,nRec,dhRecbto,tMed, nRecRef, tpAmb, nProtEvt;

    public TelaMovimentacao() {
        initComponents();
        DefinirFormulario();
        SairEsc();
        //CARREGA OS COMBOBOX DE UF E MUNICIPIO
        CarregaComboBoxDados();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPnlPrincipal = new javax.swing.JPanel();
        jPnlBusca = new javax.swing.JPanel();
        jPnlNorte = new javax.swing.JPanel();
        jPnlEmitente = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jFldCodFilial = new javax.swing.JTextField();
        jBtBuscaFilial = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLblFilial = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLblFilialCNPJ = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLblFilialIE = new javax.swing.JLabel();
        jPnlFiltro = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jFldBuscaPeriodoEmissaoInicial = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jFldBuscaPeriodoEmissaoFinal = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jFldBuscaSerie = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jFldBuscaNumeroInicial = new javax.swing.JTextField();
        jCmbBxBuscaTpEmissao = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jCmbBxBuscaSituacao = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jCmbBxBuscaModalidade = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        jCmbBxBuscaUfCarregamento = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        jCmbBxBuscaUfDescarregamento = new javax.swing.JComboBox<>();
        jLabel23 = new javax.swing.JLabel();
        jCmbBxBuscaUfPercurso = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        jFldBuscaChaveAcessoNFe = new javax.swing.JTextField();
        jFldBuscaChaveAcessoCTe = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jBtPesquisar = new javax.swing.JButton();
        jBtNovaPesquisa = new javax.swing.JButton();
        jChckBxSelecionarTudo = new javax.swing.JCheckBox();
        jPnlCentro = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePrincipal = new javax.swing.JTable();
        jPnlSul = new javax.swing.JPanel();
        jBtBuscaNovoMDFe = new javax.swing.JButton();
        jBtBuscaDetalhar = new javax.swing.JButton();
        jBtGeraXML = new javax.swing.JButton();
        jBtAssinarXML = new javax.swing.JButton();
        jBtValidaXML = new javax.swing.JButton();
        Transmitir = new javax.swing.JButton();
        jBtBuscaChaveDeAcesso = new javax.swing.JButton();
        jBtBuscaExcluir = new javax.swing.JButton();
        jBtIncCondutor = new javax.swing.JButton();
        jBtEncerrar = new javax.swing.JButton();
        jBtCancelaMDFe = new javax.swing.JButton();
        jBtBuscaImprimirDamdfe = new javax.swing.JButton();
        jBtConsultarProtocolo = new javax.swing.JButton();
        jBtConsultarStatusServico = new javax.swing.JButton();
        jBtBuscaSair = new javax.swing.JButton();
        jBtConsultarNaoEnc = new javax.swing.JButton();
        jPnlEdit = new javax.swing.JPanel();
        jPnlEditNorte = new javax.swing.JPanel();
        jPnlDadosSituacao = new javax.swing.JPanel();
        jLblStatusMDFe = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLblChaveDeAcesso = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLblNumeroMDFe = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLblVersaoXML = new javax.swing.JLabel();
        jBtMostrarChave = new javax.swing.JButton();
        jPnlDadosEmitente = new javax.swing.JPanel();
        jLblRazaoSocialEmitente = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLblCNPJEmitente = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLblInscEstEmitente = new javax.swing.JLabel();
        jPnlEditCentro = new javax.swing.JPanel();
        jTabEdit = new javax.swing.JTabbedPane();
        TabDados = new javax.swing.JPanel();
        jPnlDadosMDFe = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jFldDdModelo = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jCmbBxDdMDFeUf = new javax.swing.JComboBox<>();
        jLabel33 = new javax.swing.JLabel();
        jCmbBxDdTpEmitente = new javax.swing.JComboBox<>();
        jLabel27 = new javax.swing.JLabel();
        jFldDdSerie = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jFldDdNumero = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jFldDdDataHoraEmissao = new javax.swing.JFormattedTextField();
        jLabel26 = new javax.swing.JLabel();
        jCmbBxDdModalidade = new javax.swing.JComboBox<>();
        jLabel34 = new javax.swing.JLabel();
        jCmbBxDdFormaEmissao = new javax.swing.JComboBox<>();
        jLabel30 = new javax.swing.JLabel();
        jFldDdDataHoraInicioViagem = new javax.swing.JFormattedTextField();
        jChckBxDdInformarCodNumerico = new javax.swing.JCheckBox();
        jLblCodNumerico = new javax.swing.JLabel();
        jFldDdCodNumerico = new javax.swing.JTextField();
        jLblDV = new javax.swing.JLabel();
        jFldDdDV = new javax.swing.JTextField();
        jCmbBxDdTpTransportador = new javax.swing.JComboBox<>();
        jLabel53 = new javax.swing.JLabel();
        jPnlDdLocalCarregamento = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        jCmbBxDdUfLocalCarreg = new javax.swing.JComboBox<>();
        jLabel38 = new javax.swing.JLabel();
        jCmbBxDdMunicipioLocalCarreg = new javax.swing.JComboBox<>();
        jPnlDdMunicipioLocalCarreg = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableDdMunicipioLocalCarreg = new javax.swing.JTable();
        jBtDdExcluirMunicipioLocalCarreg = new javax.swing.JButton();
        jBtDdIncluirMunicipioLocalCarreg = new javax.swing.JButton();
        jPnlDdUfDePercurso = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        jCmbBxDdUfPercurso = new javax.swing.JComboBox<>();
        jPnlDdIncluirUfPercurso = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableDdUfPercurso = new javax.swing.JTable();
        jBtDdIncluirUfPercurso = new javax.swing.JButton();
        jBtDdExcluirUfPercurso = new javax.swing.JButton();
        jPnlDdLocalDescarregamento = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        jCmbBxDdUfLocalDescarreg = new javax.swing.JComboBox<>();
        jPnlErroMensagem = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTblErroMsg = new javax.swing.JTable();
        jBtFecharPanelErro = new javax.swing.JButton();
        TabEmitente = new javax.swing.JPanel();
        jPnlEmtIdentidicaçãoEmitente = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        jFldEmtCNPJ = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jFldEmtInscEstadual = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jFldEmtRazaoSocial = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        jFldEmtNomeFantasia = new javax.swing.JTextField();
        jLabel55 = new javax.swing.JLabel();
        jFldEmtRNTRC = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jFldEmtComplemento = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        jFldEmtBairro = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        jFldEmtNumero = new javax.swing.JTextField();
        jFldEmtLogradouro = new javax.swing.JTextField();
        jFldEmtCep = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jFldEmtTelefone = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jFldEmtEmail = new javax.swing.JTextField();
        jFldtPais = new javax.swing.JTextField();
        jFldEmtMunicipio = new javax.swing.JTextField();
        jFldEmtUf = new javax.swing.JTextField();
        jFldEmtCodMun = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        jLabel124 = new javax.swing.JLabel();
        jFldEmtCamCertificado = new javax.swing.JTextField();
        jFldEmtSenhaCertificado = new javax.swing.JTextField();
        jLabel126 = new javax.swing.JLabel();
        TabRodoviario = new javax.swing.JPanel();
        jTabEditRodoviarios = new javax.swing.JTabbedPane();
        TabAgReguladora = new javax.swing.JPanel();
        jPnlInfCiot = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableRdvCIOT = new javax.swing.JTable();
        jLabel131 = new javax.swing.JLabel();
        jBtIncluirCIOT = new javax.swing.JButton();
        jBtExcluirCIOT = new javax.swing.JButton();
        jPnlRespCiot = new javax.swing.JPanel();
        jRadioCpfCiot = new javax.swing.JRadioButton();
        jRadioCnpjCiot = new javax.swing.JRadioButton();
        jFldRdvResponsavelCiot = new javax.swing.JTextField();
        jFldRdvCiot = new javax.swing.JTextField();
        jPnlContratante = new javax.swing.JPanel();
        jFldRdvCodContratante = new javax.swing.JTextField();
        jBtBuscaContratante = new javax.swing.JButton();
        jFldRdvNomeContratante = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel132 = new javax.swing.JLabel();
        jFldRdvCpfContratante = new javax.swing.JTextField();
        jLabel133 = new javax.swing.JLabel();
        jFldRdvCnpjContratante = new javax.swing.JTextField();
        jLabel134 = new javax.swing.JLabel();
        jScrollPane21 = new javax.swing.JScrollPane();
        jTableRdvContratante = new javax.swing.JTable();
        jBtIncluirContratante = new javax.swing.JButton();
        jBtExcluirContratante = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jFldRdvRntrc = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        jFldRdvCodAgendamentoPorto = new javax.swing.JTextField();
        TabVeiculoTracao = new javax.swing.JPanel();
        jPnlRdvVeiculoTracao = new javax.swing.JPanel();
        jLabel60 = new javax.swing.JLabel();
        jFldRdvCodVeic = new javax.swing.JTextField();
        jBtBuscaVeiculo = new javax.swing.JButton();
        jLabel56 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jLblRdvTpCarroceria = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jLblRdvPlaca = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLblRdvTaraKG = new javax.swing.JLabel();
        jLabel105 = new javax.swing.JLabel();
        jLblRdvRenavam = new javax.swing.JLabel();
        jLblRdvTpRodado = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLblRdvCapacidadeM3 = new javax.swing.JLabel();
        jLblRdvCapacidadeKG = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jLblRdvUFVeic = new javax.swing.JLabel();
        jLabel106 = new javax.swing.JLabel();
        jPnlRdvProprietário = new javax.swing.JPanel();
        jLabel65 = new javax.swing.JLabel();
        jFldRdvCodProp = new javax.swing.JTextField();
        jLabel64 = new javax.swing.JLabel();
        jLblRdvPropietario = new javax.swing.JLabel();
        jLblRdvCpfProprietario = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        jLblRdvCnpjProprietario = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        jLblRdvTpProprietario = new javax.swing.JLabel();
        jLabel115 = new javax.swing.JLabel();
        jLblRdvRntrcProprietario = new javax.swing.JLabel();
        jLblRdvUfProprietario = new javax.swing.JLabel();
        jLabel116 = new javax.swing.JLabel();
        jLblRdvInscEstProprietario = new javax.swing.JLabel();
        jLabel117 = new javax.swing.JLabel();
        jChckBxDdInformarEmitente = new javax.swing.JCheckBox();
        jPnlRdvCondutores = new javax.swing.JPanel();
        jLabel68 = new javax.swing.JLabel();
        jFldRdvCodCondutor = new javax.swing.JTextField();
        jBtBuscaCondutor = new javax.swing.JButton();
        jLabel107 = new javax.swing.JLabel();
        jLblRdvCondutor = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableRdvCondutores = new javax.swing.JTable();
        jBtIncluirCondutor = new javax.swing.JButton();
        jBtExcluirCondutor = new javax.swing.JButton();
        jLblRdvCpfCondutor = new javax.swing.JLabel();
        jLabel118 = new javax.swing.JLabel();
        TabReboque = new javax.swing.JPanel();
        jPnlRdvInfoVeic = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTableRdvInfoReboque = new javax.swing.JTable();
        jBtIncluirReboque = new javax.swing.JButton();
        jBtExcluirReboque = new javax.swing.JButton();
        jPnlReboque = new javax.swing.JPanel();
        jLabel100 = new javax.swing.JLabel();
        jFldRdvCodReboque = new javax.swing.JTextField();
        jBtBuscaReboque = new javax.swing.JButton();
        jLabel98 = new javax.swing.JLabel();
        jLblRdvPlacaReboque = new javax.swing.JLabel();
        jLabel101 = new javax.swing.JLabel();
        jLblRdvTpCarroceriaReboque = new javax.swing.JLabel();
        jLabel122 = new javax.swing.JLabel();
        jLblRdvRenavamReboque = new javax.swing.JLabel();
        jLabel103 = new javax.swing.JLabel();
        jLblRdvRntrcReboque = new javax.swing.JLabel();
        jLabel127 = new javax.swing.JLabel();
        jLblRdvUfReboque = new javax.swing.JLabel();
        jLblRdvCapacidadeKGReboque = new javax.swing.JLabel();
        jLabel128 = new javax.swing.JLabel();
        jLabel129 = new javax.swing.JLabel();
        jLblRdvCapacidadeM3Reboque = new javax.swing.JLabel();
        jLblRdvTipoRodadoReboque = new javax.swing.JLabel();
        jLabel130 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jChckBxRdvInformarEmitenteReboque = new javax.swing.JCheckBox();
        jLabel99 = new javax.swing.JLabel();
        jFldRdvCodPropReboque = new javax.swing.JTextField();
        jLabel102 = new javax.swing.JLabel();
        jLblRdvPropietarioReboque = new javax.swing.JLabel();
        jLabel104 = new javax.swing.JLabel();
        jLblRdvTpProprietarioReboque = new javax.swing.JLabel();
        jLabel114 = new javax.swing.JLabel();
        jLblRdvCpfProprietarioReboque = new javax.swing.JLabel();
        jLabel121 = new javax.swing.JLabel();
        jLblRdvCnpjProprietarioReboque = new javax.swing.JLabel();
        jLabel123 = new javax.swing.JLabel();
        jLblRdvRntrcProprietarioReboque = new javax.swing.JLabel();
        jLabel125 = new javax.swing.JLabel();
        jLblRdvInscEstProprietarioReboque = new javax.swing.JLabel();
        TabValePedagio = new javax.swing.JPanel();
        jPnlRdvInfoValePedagio = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableRdvInfoValePedagio = new javax.swing.JTable();
        jBtIncluirPedagio = new javax.swing.JButton();
        jBtExcluirPedagio = new javax.swing.JButton();
        jLabel108 = new javax.swing.JLabel();
        jFldRdvCodFornecedorVale = new javax.swing.JTextField();
        jBtBuscaFornecedorVale = new javax.swing.JButton();
        jLabel109 = new javax.swing.JLabel();
        jLblRdvFornecedorVale = new javax.swing.JLabel();
        jLabel110 = new javax.swing.JLabel();
        jFldRdvCodRespPag = new javax.swing.JTextField();
        jBtBuscaRespPagamento = new javax.swing.JButton();
        jLabel111 = new javax.swing.JLabel();
        jLblRdvResponsavelPagamento = new javax.swing.JLabel();
        jFldRdvNrComprovante = new javax.swing.JTextField();
        jLabel112 = new javax.swing.JLabel();
        jLblRdvCnpjFornecedor = new javax.swing.JLabel();
        jLabel119 = new javax.swing.JLabel();
        jLabel120 = new javax.swing.JLabel();
        jLblRdvResponsavelCnpj = new javax.swing.JLabel();
        jFldRdvValorPedagio = new javax.swing.JTextField();
        jLabel135 = new javax.swing.JLabel();
        jLabel136 = new javax.swing.JLabel();
        jLblRdvResponsavelCpf = new javax.swing.JLabel();
        TabLacresRodo = new javax.swing.JPanel();
        jPnlLacresRodo = new javax.swing.JPanel();
        jLabel137 = new javax.swing.JLabel();
        jFldRdvNrLacre = new javax.swing.JTextField();
        jScrollPane22 = new javax.swing.JScrollPane();
        jTableRdvLacres = new javax.swing.JTable();
        jBtIncluirLacresRod = new javax.swing.JButton();
        jBtExcluirLacresRod = new javax.swing.JButton();
        TabAquaviario = new javax.swing.JPanel();
        jTabEditInfoAquaviario = new javax.swing.JTabbedPane();
        TabInfoAquaviario = new javax.swing.JPanel();
        jPnlAquaviario = new javax.swing.JPanel();
        jLabel72 = new javax.swing.JLabel();
        jLblAquaTpEmb = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        jFldAquaNrViagem = new javax.swing.JTextField();
        jLblAquaNomeEmbarcacao = new javax.swing.JLabel();
        jLabel113 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        jBtBuscaEmbarca = new javax.swing.JButton();
        jFldAquaIdEmb = new javax.swing.JTextField();
        jLabel79 = new javax.swing.JLabel();
        jFldAquaCodPrtEmbarque = new javax.swing.JTextField();
        jLabel77 = new javax.swing.JLabel();
        jFldAquaCodPrtDestino = new javax.swing.JTextField();
        jTabEditInfoCargaAquaviario = new javax.swing.JTabbedPane();
        TabTerminalCarregamento = new javax.swing.JPanel();
        jLabel76 = new javax.swing.JLabel();
        jFldAquaCodTermCarreg = new javax.swing.JTextField();
        jBtBuscaTerminalCarreg = new javax.swing.JButton();
        jLabel80 = new javax.swing.JLabel();
        jLblTerminalCarreg = new javax.swing.JLabel();
        jPnlAquaInfoTermCarreg = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTableAquaInfoTermCarreg = new javax.swing.JTable();
        jBtIncluirInfoTermCarreg = new javax.swing.JButton();
        jBtExcluirInfoTermCarreg = new javax.swing.JButton();
        TabTerminalDescarregamento = new javax.swing.JPanel();
        jLabel78 = new javax.swing.JLabel();
        jFldAquaCodTermDescarreg = new javax.swing.JTextField();
        jBtBuscaTerminalDescarreg = new javax.swing.JButton();
        jLabel81 = new javax.swing.JLabel();
        jLblNomeTerminalDescarregamento = new javax.swing.JLabel();
        jPnlAquaInfoTermDescarreg = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTableAquaInfoTermDescarreg = new javax.swing.JTable();
        jBtIncluirInfoTermDescarreg = new javax.swing.JButton();
        jBtExcluirInfoTermDescarreg = new javax.swing.JButton();
        TabEmbarcacaoComboio = new javax.swing.JPanel();
        jLabel82 = new javax.swing.JLabel();
        jFldAquaCodEmbComboio = new javax.swing.JTextField();
        jPnlAquaInfoEmbComboio = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTableAquaInfoEmbComboio = new javax.swing.JTable();
        jBtIncluirInfoEmbComboio = new javax.swing.JButton();
        jBtExcluirInfoEmbComboio = new javax.swing.JButton();
        jLabel142 = new javax.swing.JLabel();
        jFldAquaCodBalsa = new javax.swing.JTextField();
        jBtBuscaBalsa = new javax.swing.JButton();
        jLblAquaNomeBalsa = new javax.swing.JLabel();
        jLabel143 = new javax.swing.JLabel();
        TabUnidadeCargaVazia = new javax.swing.JPanel();
        jLabel84 = new javax.swing.JLabel();
        jFldAquaIdentUnCarga = new javax.swing.JTextField();
        jBtBuscaUnCarga = new javax.swing.JButton();
        jLabel83 = new javax.swing.JLabel();
        jLblAquaTpUnCarga = new javax.swing.JLabel();
        jPnlAquaInfoUnCargaVazia = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTableAquanInfUnVazia = new javax.swing.JTable();
        jBtIncluirInfoUnCargaVazia = new javax.swing.JButton();
        jBtExcluirInfoUnCargaVazia = new javax.swing.JButton();
        TabUnidTranspVazia = new javax.swing.JPanel();
        jLabel140 = new javax.swing.JLabel();
        jFldAquaIdUnidTranspVazia = new javax.swing.JTextField();
        jBtBuscaUnidTranspVazia = new javax.swing.JButton();
        jLblAquaTpUnidTranspVazia = new javax.swing.JLabel();
        jLabel141 = new javax.swing.JLabel();
        jPnlAquaInfoUnCargaVazia1 = new javax.swing.JPanel();
        jScrollPane23 = new javax.swing.JScrollPane();
        jTableAquanInfUnidTranspVazia = new javax.swing.JTable();
        jBtIncluirInfoUnidTranspVazia = new javax.swing.JButton();
        jBtExcluirInfoUnCargaVazia1 = new javax.swing.JButton();
        jLblAquaIRIN = new javax.swing.JLabel();
        jLabel138 = new javax.swing.JLabel();
        jBtBuscaPrtEmbarque = new javax.swing.JButton();
        jLblAquaNomePrtEmbarque = new javax.swing.JLabel();
        jLabel139 = new javax.swing.JLabel();
        jBtBuscaPrtDestino = new javax.swing.JButton();
        jLblAquaNomePrtDestino = new javax.swing.JLabel();
        jLabel144 = new javax.swing.JLabel();
        jLabel145 = new javax.swing.JLabel();
        jFldAquaCodPrtTrans = new javax.swing.JTextField();
        jBtBuscaPrtDestino2 = new javax.swing.JButton();
        jLblAquaNomePrtTrans = new javax.swing.JLabel();
        jLabel146 = new javax.swing.JLabel();
        jFldAquaCodInterno = new javax.swing.JTextField();
        jCmbBxTpNavegacao = new javax.swing.JComboBox<>();
        jLabel69 = new javax.swing.JLabel();
        TabInformacoesDocumento = new javax.swing.JPanel();
        jPnlDocUfMun = new javax.swing.JPanel();
        jCmbBxDocMunDocumento = new javax.swing.JComboBox<>();
        jLabel86 = new javax.swing.JLabel();
        jCmbBxDocUfMunDocumento = new javax.swing.JComboBox<>();
        jLabel85 = new javax.swing.JLabel();
        jLabel87 = new javax.swing.JLabel();
        jTabEditInformacoesDocumento = new javax.swing.JTabbedPane();
        TabMunicipiosDescarreg = new javax.swing.JPanel();
        jPnlUfMunDescarreg = new javax.swing.JPanel();
        jLabel88 = new javax.swing.JLabel();
        jCmbBxDocUfMunDescarreg = new javax.swing.JComboBox<>();
        jLabel89 = new javax.swing.JLabel();
        jCmbBxDocMunDescarreg = new javax.swing.JComboBox<>();
        jLblAviso = new javax.swing.JLabel();
        jBtDocIncuirMunDescarreg = new javax.swing.JButton();
        jBtDocExcluirMunDescarreg = new javax.swing.JButton();
        jPnlDocMunDescarreg = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTableDocMunDescarreg = new javax.swing.JTable();
        TabCTe = new javax.swing.JPanel();
        jPnlDocCte = new javax.swing.JPanel();
        jPnlDocQtdCte = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTableDocCte = new javax.swing.JTable();
        jBtDocIncluirCte = new javax.swing.JButton();
        jBtDocExcluirCte = new javax.swing.JButton();
        jBtDocEditarCte = new javax.swing.JButton();
        TabNFe = new javax.swing.JPanel();
        jPnlDocNFe = new javax.swing.JPanel();
        jPnlDocQtdNFe = new javax.swing.JPanel();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTableDocNFe = new javax.swing.JTable();
        jBtDocIncluirNfe = new javax.swing.JButton();
        jBtDocExcluirNfe = new javax.swing.JButton();
        jBtDocEditarNfe = new javax.swing.JButton();
        TabMDFeReferenciado = new javax.swing.JPanel();
        jPnlDocMDFe = new javax.swing.JPanel();
        jPnlDocQtdMDFe = new javax.swing.JPanel();
        jScrollPane16 = new javax.swing.JScrollPane();
        jTableDocMDFe = new javax.swing.JTable();
        jBtDocIncluirMDFe = new javax.swing.JButton();
        jBtDocExcluirMDFe = new javax.swing.JButton();
        jBtDocEditarMDFe = new javax.swing.JButton();
        TabTotalizadores = new javax.swing.JPanel();
        jPnlTotaisFornecimento = new javax.swing.JPanel();
        jLabel90 = new javax.swing.JLabel();
        jLabel91 = new javax.swing.JLabel();
        jLabel92 = new javax.swing.JLabel();
        jLabel93 = new javax.swing.JLabel();
        jLabel94 = new javax.swing.JLabel();
        jFldTotQtdCte = new javax.swing.JTextField();
        jFldTotQtdNFe = new javax.swing.JTextField();
        jFldTotVlTotalMercadoria = new javax.swing.JTextField();
        jCmbBxTotCodUnMedidaPeso = new javax.swing.JComboBox<>();
        jFldTotQtdPesoBrutoTotal = new javax.swing.JTextField();
        jLabel148 = new javax.swing.JLabel();
        jFldTotQtdMDFe = new javax.swing.JTextField();
        jPnlTotLacres = new javax.swing.JPanel();
        jLabel96 = new javax.swing.JLabel();
        jFldTotNrLacres = new javax.swing.JTextField();
        jScrollPane18 = new javax.swing.JScrollPane();
        jTableTotNrLacre = new javax.swing.JTable();
        jBtIncluirLacre = new javax.swing.JButton();
        jBtExcluirLacre = new javax.swing.JButton();
        jPnlDownload = new javax.swing.JPanel();
        jRadioCnpj = new javax.swing.JRadioButton();
        jRadioCpf = new javax.swing.JRadioButton();
        jFldTotDocumentoAutorizado = new javax.swing.JTextField();
        jScrollPane17 = new javax.swing.JScrollPane();
        jTableTotAutorizados = new javax.swing.JTable();
        jBtIncluirAutorizado = new javax.swing.JButton();
        jBtExcluirAutorizado = new javax.swing.JButton();
        TabInfoAdicionais = new javax.swing.JPanel();
        jLabel95 = new javax.swing.JLabel();
        jScrollPane19 = new javax.swing.JScrollPane();
        jTxtAreaInfoAdicionaisFisco = new javax.swing.JTextArea();
        jLabel97 = new javax.swing.JLabel();
        jScrollPane20 = new javax.swing.JScrollPane();
        jTxtAreaInfoAdicionaisContribuinte = new javax.swing.JTextArea();
        TabSeguroCarga = new javax.swing.JPanel();
        jPnlRdvInfoSeguro = new javax.swing.JPanel();
        jScrollPane24 = new javax.swing.JScrollPane();
        jTableSeguro = new javax.swing.JTable();
        jLabel147 = new javax.swing.JLabel();
        jFldCodRespSeguro = new javax.swing.JTextField();
        jBtBuscaRespSeguro = new javax.swing.JButton();
        jLblNomeRespSeg = new javax.swing.JLabel();
        jLabel149 = new javax.swing.JLabel();
        jFldCodSeguradora = new javax.swing.JTextField();
        jBtBuscaSeguradora = new javax.swing.JButton();
        jLabel150 = new javax.swing.JLabel();
        jLblNomeSeguradora = new javax.swing.JLabel();
        jFldNrApolice = new javax.swing.JTextField();
        jLabel151 = new javax.swing.JLabel();
        jLabel152 = new javax.swing.JLabel();
        jLabel153 = new javax.swing.JLabel();
        jLblCnpjSeguradora = new javax.swing.JLabel();
        jChckBxDdInformarResponsavelSeguro = new javax.swing.JCheckBox();
        jLabel156 = new javax.swing.JLabel();
        jLblRespSegCpf = new javax.swing.JLabel();
        jLblRespSegCnpj = new javax.swing.JLabel();
        jLabel157 = new javax.swing.JLabel();
        jBtDadosAverbacao = new javax.swing.JButton();
        jBtExcluirSeguro = new javax.swing.JButton();
        jBtIncluirSeguro = new javax.swing.JButton();
        jPnlEditSul = new javax.swing.JPanel();
        jBtEditSalvar = new javax.swing.JButton();
        jBtEditFechar = new javax.swing.JButton();
        jBtEditar = new javax.swing.JButton();
        jBtEditTransmitir = new javax.swing.JButton();
        jBtEditCancelarMDFe = new javax.swing.JButton();
        jBtEditEncerraMDFe = new javax.swing.JButton();
        jBtEditExportar = new javax.swing.JButton();
        jBtEditConsultarProtocolo = new javax.swing.JButton();
        jBtEditImprimirDAMDFE = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        jPnlPrincipal.setLayout(new java.awt.CardLayout());

        jPnlBusca.setLayout(new java.awt.BorderLayout());

        jPnlEmitente.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Emitente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel22.setText("Código");

        jFldCodFilial.setDocument(new LimitaField(10, 2)
        );
        jFldCodFilial.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jFldCodFilial.setText("1");
        jFldCodFilial.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jFldCodFilialAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jFldCodFilial.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldCodFilialFocusLost(evt);
            }
        });
        jFldCodFilial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldCodFilialActionPerformed(evt);
            }
        });
        jFldCodFilial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldCodFilialKeyPressed(evt);
            }
        });

        jBtBuscaFilial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaFilial.setText("F11");
        jBtBuscaFilial.setFocusable(false);
        jBtBuscaFilial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaFilialActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel8.setText("Filial");

        jLblFilial.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblFilial.setForeground(new java.awt.Color(0, 0, 204));
        jLblFilial.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel9.setText("CNPJ");

        jLblFilialCNPJ.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblFilialCNPJ.setForeground(new java.awt.Color(0, 0, 204));
        jLblFilialCNPJ.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel10.setText("IE");

        jLblFilialIE.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblFilialIE.setForeground(new java.awt.Color(0, 0, 204));
        jLblFilialIE.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout jPnlEmitenteLayout = new javax.swing.GroupLayout(jPnlEmitente);
        jPnlEmitente.setLayout(jPnlEmitenteLayout);
        jPnlEmitenteLayout.setHorizontalGroup(
            jPnlEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlEmitenteLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPnlEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFldCodFilial, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jBtBuscaFilial)
                .addGap(6, 6, 6)
                .addGroup(jPnlEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLblFilial, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPnlEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLblFilialCNPJ, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPnlEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLblFilialIE, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPnlEmitenteLayout.setVerticalGroup(
            jPnlEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlEmitenteLayout.createSequentialGroup()
                .addGroup(jPnlEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlEmitenteLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPnlEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFldCodFilial, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtBuscaFilial, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblFilial, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblFilialCNPJ, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblFilialIE, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        jPnlFiltro.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Filtro", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel16.setText("Período de Emissão:");

        jFldBuscaPeriodoEmissaoInicial.setDocument(new LimitaField(10, 2)
        );
        jFldBuscaPeriodoEmissaoInicial.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jFldBuscaPeriodoEmissaoInicialAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jFldBuscaPeriodoEmissaoInicial.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldBuscaPeriodoEmissaoInicialFocusLost(evt);
            }
        });
        jFldBuscaPeriodoEmissaoInicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldBuscaPeriodoEmissaoInicialActionPerformed(evt);
            }
        });
        jFldBuscaPeriodoEmissaoInicial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldBuscaPeriodoEmissaoInicialKeyPressed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel15.setText("a");

        jFldBuscaPeriodoEmissaoFinal.setDocument(new LimitaField(10, 2)
        );
        jFldBuscaPeriodoEmissaoFinal.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jFldBuscaPeriodoEmissaoFinalAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jFldBuscaPeriodoEmissaoFinal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldBuscaPeriodoEmissaoFinalFocusLost(evt);
            }
        });
        jFldBuscaPeriodoEmissaoFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldBuscaPeriodoEmissaoFinalActionPerformed(evt);
            }
        });
        jFldBuscaPeriodoEmissaoFinal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldBuscaPeriodoEmissaoFinalKeyPressed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel14.setText("Série:");

        jFldBuscaSerie.setDocument(new LimitaField(10, 2)
        );
        jFldBuscaSerie.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jFldBuscaSerieAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jFldBuscaSerie.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldBuscaSerieFocusLost(evt);
            }
        });
        jFldBuscaSerie.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldBuscaSerieKeyPressed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel11.setText("Número:");

        jFldBuscaNumeroInicial.setDocument(new LimitaField(10, 2)
        );
        jFldBuscaNumeroInicial.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jFldBuscaNumeroInicialAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jFldBuscaNumeroInicial.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldBuscaNumeroInicialFocusLost(evt);
            }
        });
        jFldBuscaNumeroInicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldBuscaNumeroInicialActionPerformed(evt);
            }
        });
        jFldBuscaNumeroInicial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldBuscaNumeroInicialKeyPressed(evt);
            }
        });

        jCmbBxBuscaTpEmissao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas", "Normal", "Contigência" }));
        jCmbBxBuscaTpEmissao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCmbBxBuscaTpEmissaoItemStateChanged(evt);
            }
        });
        jCmbBxBuscaTpEmissao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbBxBuscaTpEmissaoActionPerformed(evt);
            }
        });
        jCmbBxBuscaTpEmissao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxBuscaTpEmissaoKeyPressed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel17.setText("Tipo de Emissão:");

        jCmbBxBuscaSituacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas", "Validado", "Em Digitação", "Rejeitado", "Em Processamento SEFAZ", "Cancelado", "Encerrado", "Autorizado", "Assinado", "Salvo", "Pendente de Transmissão" }));
        jCmbBxBuscaSituacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbBxBuscaSituacaoActionPerformed(evt);
            }
        });
        jCmbBxBuscaSituacao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxBuscaSituacaoKeyPressed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel13.setText("Situação do MDF-e:");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel19.setText("Modalidade:");

        jCmbBxBuscaModalidade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas", "Rodoviário", "Aquaviário" }));
        jCmbBxBuscaModalidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxBuscaModalidadeKeyPressed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel20.setText("UF Carregamento:");

        jCmbBxBuscaUfCarregamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas" }));
        jCmbBxBuscaUfCarregamento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxBuscaUfCarregamentoKeyPressed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel21.setText("UF Descarregamento:");

        jCmbBxBuscaUfDescarregamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas" }));
        jCmbBxBuscaUfDescarregamento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxBuscaUfDescarregamentoKeyPressed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel23.setText("UF Percurso:");

        jCmbBxBuscaUfPercurso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas" }));
        jCmbBxBuscaUfPercurso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxBuscaUfPercursoKeyPressed(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel25.setText("Chave de Acesso NFe:");

        jFldBuscaChaveAcessoNFe.setDocument(new LimitaField(10, 2)
        );
        jFldBuscaChaveAcessoNFe.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jFldBuscaChaveAcessoNFeAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jFldBuscaChaveAcessoNFe.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldBuscaChaveAcessoNFeFocusLost(evt);
            }
        });
        jFldBuscaChaveAcessoNFe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldBuscaChaveAcessoNFeKeyPressed(evt);
            }
        });

        jFldBuscaChaveAcessoCTe.setDocument(new LimitaField(10, 2)
        );
        jFldBuscaChaveAcessoCTe.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jFldBuscaChaveAcessoCTeAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jFldBuscaChaveAcessoCTe.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldBuscaChaveAcessoCTeFocusLost(evt);
            }
        });
        jFldBuscaChaveAcessoCTe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldBuscaChaveAcessoCTeKeyPressed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel24.setText("Chave de Acesso CTe:");

        jBtPesquisar.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtPesquisar.setText("Pesquisar");
        jBtPesquisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBtPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtPesquisarActionPerformed(evt);
            }
        });

        jBtNovaPesquisa.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtNovaPesquisa.setText("Limpar");
        jBtNovaPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtNovaPesquisaActionPerformed(evt);
            }
        });

        jChckBxSelecionarTudo.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jChckBxSelecionarTudo.setText("Selecionar Tudo");
        jChckBxSelecionarTudo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jChckBxSelecionarTudoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPnlFiltroLayout = new javax.swing.GroupLayout(jPnlFiltro);
        jPnlFiltro.setLayout(jPnlFiltroLayout);
        jPnlFiltroLayout.setHorizontalGroup(
            jPnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlFiltroLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlFiltroLayout.createSequentialGroup()
                        .addGroup(jPnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPnlFiltroLayout.createSequentialGroup()
                                .addGap(110, 110, 110)
                                .addComponent(jFldBuscaPeriodoEmissaoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jFldBuscaPeriodoEmissaoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jFldBuscaSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jFldBuscaNumeroInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jFldBuscaChaveAcessoCTe, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlFiltroLayout.createSequentialGroup()
                        .addComponent(jBtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jBtNovaPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jChckBxSelecionarTudo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlFiltroLayout.createSequentialGroup()
                        .addGroup(jPnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPnlFiltroLayout.createSequentialGroup()
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jCmbBxBuscaModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addGroup(jPnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPnlFiltroLayout.createSequentialGroup()
                                        .addGap(100, 100, 100)
                                        .addComponent(jCmbBxBuscaUfCarregamento, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jCmbBxBuscaUfPercurso, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPnlFiltroLayout.createSequentialGroup()
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jCmbBxBuscaSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jCmbBxBuscaTpEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(60, 60, 60)
                                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)
                        .addGroup(jPnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFldBuscaChaveAcessoNFe, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPnlFiltroLayout.createSequentialGroup()
                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jCmbBxBuscaUfDescarregamento, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))))
        );
        jPnlFiltroLayout.setVerticalGroup(
            jPnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlFiltroLayout.createSequentialGroup()
                .addGroup(jPnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlFiltroLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldBuscaPeriodoEmissaoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldBuscaPeriodoEmissaoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldBuscaSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldBuscaNumeroInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldBuscaChaveAcessoCTe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(15, 15, 15)
                .addGroup(jPnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCmbBxBuscaSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCmbBxBuscaTpEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFldBuscaChaveAcessoNFe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCmbBxBuscaModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCmbBxBuscaUfCarregamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCmbBxBuscaUfPercurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCmbBxBuscaUfDescarregamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPnlFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtNovaPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jChckBxSelecionarTudo, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPnlNorteLayout = new javax.swing.GroupLayout(jPnlNorte);
        jPnlNorte.setLayout(jPnlNorteLayout);
        jPnlNorteLayout.setHorizontalGroup(
            jPnlNorteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlEmitente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPnlFiltro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPnlNorteLayout.setVerticalGroup(
            jPnlNorteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlNorteLayout.createSequentialGroup()
                .addComponent(jPnlEmitente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPnlFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPnlBusca.add(jPnlNorte, java.awt.BorderLayout.NORTH);

        jTablePrincipal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Série", "Número", "Data de Emissão", "UF's Carregamento",  "UF's Percurso", "UF Descarregamento", "Tipo de Emitente", "Modalidade", "Forma Emissão", "Situação","Chave MDFe", "Nr. Protocolo", "Código", "Usuário", "Data", "Evento"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {

                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class ,java.lang.Object.class , java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,java.lang.Object.class,java.lang.Object.class,java.lang.Object.class,java.lang.Object.class,java.lang.Object.class,java.lang.Object.class

            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

        });
        jTablePrincipal.getTableHeader().setReorderingAllowed(false);
        jTablePrincipal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablePrincipalMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTablePrincipalMouseReleased(evt);
            }
        });
        jTablePrincipal.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTablePrincipalPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTablePrincipal);

        javax.swing.GroupLayout jPnlCentroLayout = new javax.swing.GroupLayout(jPnlCentro);
        jPnlCentro.setLayout(jPnlCentroLayout);
        jPnlCentroLayout.setHorizontalGroup(
            jPnlCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1163, Short.MAX_VALUE)
            .addGroup(jPnlCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1163, Short.MAX_VALUE))
        );
        jPnlCentroLayout.setVerticalGroup(
            jPnlCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
            .addGroup(jPnlCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE))
        );

        jPnlBusca.add(jPnlCentro, java.awt.BorderLayout.CENTER);

        jPnlSul.setPreferredSize(new java.awt.Dimension(824, 90));

        jBtBuscaNovoMDFe.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtBuscaNovoMDFe.setText("Novo MDF-e");
        jBtBuscaNovoMDFe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaNovoMDFeActionPerformed(evt);
            }
        });

        jBtBuscaDetalhar.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtBuscaDetalhar.setText("Detalhar");
        jBtBuscaDetalhar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaDetalharActionPerformed(evt);
            }
        });

        jBtGeraXML.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtGeraXML.setText("Gerar XML");
        jBtGeraXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtGeraXMLActionPerformed(evt);
            }
        });

        jBtAssinarXML.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtAssinarXML.setText("Assinar XML");
        jBtAssinarXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtAssinarXMLActionPerformed(evt);
            }
        });

        jBtValidaXML.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtValidaXML.setText("Validar XML");
        jBtValidaXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtValidaXMLActionPerformed(evt);
            }
        });

        Transmitir.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        Transmitir.setText("Transmitir");
        Transmitir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransmitirActionPerformed(evt);
            }
        });

        jBtBuscaChaveDeAcesso.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtBuscaChaveDeAcesso.setText("Chave de Acesso");
        jBtBuscaChaveDeAcesso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaChaveDeAcessoActionPerformed(evt);
            }
        });

        jBtBuscaExcluir.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtBuscaExcluir.setText("Excluir");
        jBtBuscaExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaExcluirActionPerformed(evt);
            }
        });

        jBtIncCondutor.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtIncCondutor.setText("Incluir Condutor");
        jBtIncCondutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIncCondutorActionPerformed(evt);
            }
        });

        jBtEncerrar.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtEncerrar.setText("Encerrar MDFe");
        jBtEncerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtEncerrarActionPerformed(evt);
            }
        });

        jBtCancelaMDFe.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtCancelaMDFe.setText("Cancelar MDFe");
        jBtCancelaMDFe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtCancelaMDFeActionPerformed(evt);
            }
        });

        jBtBuscaImprimirDamdfe.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtBuscaImprimirDamdfe.setText("Imprimir DAMDFE");
        jBtBuscaImprimirDamdfe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaImprimirDamdfeActionPerformed(evt);
            }
        });

        jBtConsultarProtocolo.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtConsultarProtocolo.setText("Consultar Protocolo");
        jBtConsultarProtocolo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtConsultarProtocoloActionPerformed(evt);
            }
        });

        jBtConsultarStatusServico.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtConsultarStatusServico.setText("Consultar Status Serviço");
        jBtConsultarStatusServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtConsultarStatusServicoActionPerformed(evt);
            }
        });

        jBtBuscaSair.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtBuscaSair.setText("Sair");
        jBtBuscaSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaSairActionPerformed(evt);
            }
        });

        jBtConsultarNaoEnc.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtConsultarNaoEnc.setText("Consultar Não Encerrados");
        jBtConsultarNaoEnc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtConsultarNaoEncActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlSulLayout = new javax.swing.GroupLayout(jPnlSul);
        jPnlSul.setLayout(jPnlSulLayout);
        jPnlSulLayout.setHorizontalGroup(
            jPnlSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPnlSulLayout.createSequentialGroup()
                .addContainerGap(91, Short.MAX_VALUE)
                .addGroup(jPnlSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPnlSulLayout.createSequentialGroup()
                        .addComponent(jBtConsultarProtocolo, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtCancelaMDFe, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlSulLayout.createSequentialGroup()
                        .addComponent(jBtBuscaNovoMDFe)
                        .addGap(7, 7, 7)
                        .addComponent(jBtBuscaDetalhar)
                        .addGap(4, 4, 4)
                        .addComponent(jBtGeraXML)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPnlSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlSulLayout.createSequentialGroup()
                        .addComponent(jBtEncerrar)
                        .addGap(4, 4, 4)
                        .addComponent(jBtIncCondutor, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jBtBuscaImprimirDamdfe, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jBtBuscaChaveDeAcesso)
                        .addGap(4, 4, 4)
                        .addComponent(jBtBuscaExcluir)
                        .addGap(4, 4, 4)
                        .addComponent(jBtBuscaSair, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlSulLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jBtAssinarXML, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBtValidaXML)
                        .addGap(7, 7, 7)
                        .addComponent(Transmitir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtConsultarStatusServico, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtConsultarNaoEnc)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPnlSulLayout.setVerticalGroup(
            jPnlSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlSulLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtBuscaNovoMDFe, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtBuscaDetalhar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtGeraXML, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBtValidaXML, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBtAssinarXML, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBtConsultarStatusServico, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBtConsultarNaoEnc, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Transmitir, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPnlSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtConsultarProtocolo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtCancelaMDFe, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtEncerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtIncCondutor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtBuscaImprimirDamdfe, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtBuscaChaveDeAcesso, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtBuscaExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtBuscaSair, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPnlBusca.add(jPnlSul, java.awt.BorderLayout.PAGE_END);

        jPnlPrincipal.add(jPnlBusca, "card2");

        jPnlEdit.setLayout(new java.awt.BorderLayout());

        jPnlDadosSituacao.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Filtro", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLblStatusMDFe.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblStatusMDFe.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLblStatusMDFe.setOpaque(true);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel18.setText("Status");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel6.setText("Chave de Acesso");

        jLblChaveDeAcesso.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblChaveDeAcesso.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLblChaveDeAcesso.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLblChaveDeAcesso.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLblChaveDeAcesso.setOpaque(true);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel7.setText("Número");

        jLblNumeroMDFe.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblNumeroMDFe.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLblNumeroMDFe.setOpaque(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel1.setText("Versão XML");

        jLblVersaoXML.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblVersaoXML.setText("3.00");
        jLblVersaoXML.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLblVersaoXML.setOpaque(true);

        jBtMostrarChave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/chave_icon.png"))); // NOI18N
        jBtMostrarChave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtMostrarChaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlDadosSituacaoLayout = new javax.swing.GroupLayout(jPnlDadosSituacao);
        jPnlDadosSituacao.setLayout(jPnlDadosSituacaoLayout);
        jPnlDadosSituacaoLayout.setHorizontalGroup(
            jPnlDadosSituacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDadosSituacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlDadosSituacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblStatusMDFe, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPnlDadosSituacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlDadosSituacaoLayout.createSequentialGroup()
                        .addComponent(jLblChaveDeAcesso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtMostrarChave, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPnlDadosSituacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLblNumeroMDFe, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPnlDadosSituacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblVersaoXML, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPnlDadosSituacaoLayout.setVerticalGroup(
            jPnlDadosSituacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDadosSituacaoLayout.createSequentialGroup()
                .addGroup(jPnlDadosSituacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnlDadosSituacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPnlDadosSituacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLblChaveDeAcesso, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblNumeroMDFe, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblVersaoXML, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtMostrarChave, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblStatusMDFe, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPnlDadosEmitente.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Emitente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLblRazaoSocialEmitente.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 204));
        jLabel2.setText("Razão Social:");

        jLblCNPJEmitente.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLblCNPJEmitente.setText("18.72.72560001/6-0");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 204));
        jLabel3.setText("CNPJ:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 204));
        jLabel4.setText("IE:");

        jLblInscEstEmitente.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLblInscEstEmitente.setText("18.72.72560001/6-0");

        javax.swing.GroupLayout jPnlDadosEmitenteLayout = new javax.swing.GroupLayout(jPnlDadosEmitente);
        jPnlDadosEmitente.setLayout(jPnlDadosEmitenteLayout);
        jPnlDadosEmitenteLayout.setHorizontalGroup(
            jPnlDadosEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDadosEmitenteLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLblRazaoSocialEmitente, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 349, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLblCNPJEmitente, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLblInscEstEmitente, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPnlDadosEmitenteLayout.setVerticalGroup(
            jPnlDadosEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDadosEmitenteLayout.createSequentialGroup()
                .addGroup(jPnlDadosEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlDadosEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLblInscEstEmitente, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLblCNPJEmitente, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLblRazaoSocialEmitente, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPnlEditNorteLayout = new javax.swing.GroupLayout(jPnlEditNorte);
        jPnlEditNorte.setLayout(jPnlEditNorteLayout);
        jPnlEditNorteLayout.setHorizontalGroup(
            jPnlEditNorteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlDadosSituacao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPnlDadosEmitente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPnlEditNorteLayout.setVerticalGroup(
            jPnlEditNorteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlEditNorteLayout.createSequentialGroup()
                .addComponent(jPnlDadosEmitente, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPnlDadosSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jPnlEdit.add(jPnlEditNorte, java.awt.BorderLayout.PAGE_START);

        jPnlEditCentro.setPreferredSize(new java.awt.Dimension(1163, 420));

        jTabEdit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabEditStateChanged(evt);
            }
        });

        jPnlDadosMDFe.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "MDF-e", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel31.setText("*Modelo");

        jFldDdModelo.setEditable(false);
        jFldDdModelo.setBackground(new java.awt.Color(255, 255, 204));
        jFldDdModelo.setText("58");
        jFldDdModelo.setFocusable(false);
        jFldDdModelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldDdModeloActionPerformed(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel32.setText("*UF");

        jCmbBxDdMDFeUf.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCmbBxDdMDFeUfItemStateChanged(evt);
            }
        });
        jCmbBxDdMDFeUf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jCmbBxDdMDFeUfFocusLost(evt);
            }
        });
        jCmbBxDdMDFeUf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxDdMDFeUfKeyPressed(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel33.setText("*Tipo de Emitente");

        jCmbBxDdTpEmitente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Prestador de serviço de transporte", "Não prestador de serviço de transporte" }));
        jCmbBxDdTpEmitente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCmbBxDdTpEmitenteItemStateChanged(evt);
            }
        });
        jCmbBxDdTpEmitente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxDdTpEmitenteKeyPressed(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel27.setText("*Série");

        jFldDdSerie.setDocument(new LimitaField(3, 2));
        jFldDdSerie.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldDdSerieFocusLost(evt);
            }
        });
        jFldDdSerie.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldDdSerieKeyPressed(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel28.setText("*Número");

        jFldDdNumero.setEditable(false);
        jFldDdNumero.setBackground(new java.awt.Color(255, 255, 255));
        jFldDdNumero.setDocument(new LimitaField(9, 2)
        );
        jFldDdNumero.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldDdNumeroFocusLost(evt);
            }
        });
        jFldDdNumero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldDdNumeroKeyPressed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel29.setText("Data e Hora de Emissão");

        jFldDdDataHoraEmissao.setEditable(false);
        jFldDdDataHoraEmissao.setBackground(new java.awt.Color(255, 255, 204));
        try {
            jFldDdDataHoraEmissao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/#### ##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFldDdDataHoraEmissao.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jFldDdDataHoraEmissao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldDdDataHoraEmissaoKeyPressed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel26.setText("*Modalidade");

        jCmbBxDdModalidade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Rodoviário", "Aquaviário" }));
        jCmbBxDdModalidade.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCmbBxDdModalidadeItemStateChanged(evt);
            }
        });
        jCmbBxDdModalidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxDdModalidadeKeyPressed(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel34.setText("*Forma de Emissão");

        jCmbBxDdFormaEmissao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Normal", "Contingência" }));
        jCmbBxDdFormaEmissao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxDdFormaEmissaoKeyPressed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel30.setText("Data e Hora do Início da Viagem");

        try {
            jFldDdDataHoraInicioViagem.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/#### ##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFldDdDataHoraInicioViagem.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jFldDdDataHoraInicioViagem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldDdDataHoraInicioViagemKeyPressed(evt);
            }
        });

        jChckBxDdInformarCodNumerico.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jChckBxDdInformarCodNumerico.setSelected(true);
        jChckBxDdInformarCodNumerico.setText("Informar Código Numérico");
        jChckBxDdInformarCodNumerico.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jChckBxDdInformarCodNumericoItemStateChanged(evt);
            }
        });
        jChckBxDdInformarCodNumerico.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jChckBxDdInformarCodNumericoKeyPressed(evt);
            }
        });

        jLblCodNumerico.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLblCodNumerico.setText("Código Numérico");

        jFldDdCodNumerico.setDocument(new LimitaField(8, 2)
        );
        jFldDdCodNumerico.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldDdCodNumericoFocusLost(evt);
            }
        });
        jFldDdCodNumerico.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldDdCodNumericoKeyPressed(evt);
            }
        });

        jLblDV.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLblDV.setText("DV");

        jFldDdDV.setEditable(false);
        jFldDdDV.setBackground(new java.awt.Color(255, 255, 204));
        jFldDdDV.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jFldDdDV.setFocusable(false);

        jCmbBxDdTpTransportador.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ETC", "TAC", "CTC" }));

        jLabel53.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel53.setText("Tipo de Transportador");
        jLabel53.setToolTipText("Transportador");

        javax.swing.GroupLayout jPnlDadosMDFeLayout = new javax.swing.GroupLayout(jPnlDadosMDFe);
        jPnlDadosMDFe.setLayout(jPnlDadosMDFeLayout);
        jPnlDadosMDFeLayout.setHorizontalGroup(
            jPnlDadosMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDadosMDFeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlDadosMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlDadosMDFeLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPnlDadosMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPnlDadosMDFeLayout.createSequentialGroup()
                                .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(130, 130, 130)
                                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPnlDadosMDFeLayout.createSequentialGroup()
                                .addComponent(jCmbBxDdMDFeUf, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jCmbBxDdTpEmitente, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jCmbBxDdModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jCmbBxDdFormaEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPnlDadosMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel53, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCmbBxDdTpTransportador, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPnlDadosMDFeLayout.createSequentialGroup()
                        .addGroup(jPnlDadosMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPnlDadosMDFeLayout.createSequentialGroup()
                                .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)
                                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(60, 60, 60)
                                .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPnlDadosMDFeLayout.createSequentialGroup()
                                .addComponent(jFldDdModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(jFldDdSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jFldDdNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jFldDdDataHoraEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPnlDadosMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldDdDataHoraInicioViagem, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPnlDadosMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPnlDadosMDFeLayout.createSequentialGroup()
                                .addGap(184, 184, 184)
                                .addComponent(jLblCodNumerico, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jLblDV, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPnlDadosMDFeLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jChckBxDdInformarCodNumerico, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addComponent(jFldDdCodNumerico, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addComponent(jFldDdDV, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(190, Short.MAX_VALUE))
        );
        jPnlDadosMDFeLayout.setVerticalGroup(
            jPnlDadosMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDadosMDFeLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPnlDadosMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addComponent(jLabel27)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29)
                    .addComponent(jLabel30)
                    .addComponent(jLblCodNumerico)
                    .addComponent(jLblDV))
                .addGroup(jPnlDadosMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFldDdModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFldDdDataHoraEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFldDdDataHoraInicioViagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jChckBxDdInformarCodNumerico)
                    .addComponent(jFldDdCodNumerico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFldDdDV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlDadosMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jFldDdSerie, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jFldDdNumero, javax.swing.GroupLayout.Alignment.LEADING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPnlDadosMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPnlDadosMDFeLayout.createSequentialGroup()
                        .addGroup(jPnlDadosMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel32)
                            .addComponent(jLabel33)
                            .addComponent(jLabel26)
                            .addComponent(jLabel34))
                        .addGap(1, 1, 1)
                        .addGroup(jPnlDadosMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCmbBxDdMDFeUf, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCmbBxDdTpEmitente, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCmbBxDdModalidade, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCmbBxDdFormaEmissao, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPnlDadosMDFeLayout.createSequentialGroup()
                        .addComponent(jLabel53)
                        .addGap(1, 1, 1)
                        .addComponent(jCmbBxDdTpTransportador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        jPnlDdLocalCarregamento.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Local de Carregamento", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel37.setText("*UF");

        jCmbBxDdUfLocalCarreg.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCmbBxDdUfLocalCarregItemStateChanged(evt);
            }
        });
        jCmbBxDdUfLocalCarreg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jCmbBxDdUfLocalCarregFocusLost(evt);
            }
        });
        jCmbBxDdUfLocalCarreg.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jCmbBxDdUfLocalCarregPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jCmbBxDdUfLocalCarreg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxDdUfLocalCarregKeyPressed(evt);
            }
        });

        jLabel38.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel38.setText("*Município");

        jCmbBxDdMunicipioLocalCarreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbBxDdMunicipioLocalCarregActionPerformed(evt);
            }
        });
        jCmbBxDdMunicipioLocalCarreg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxDdMunicipioLocalCarregKeyPressed(evt);
            }
        });

        jPnlDdMunicipioLocalCarreg.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Município (50 no Máximo)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jTableDdMunicipioLocalCarreg.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Município", "UF"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableDdMunicipioLocalCarreg.getTableHeader().setResizingAllowed(false);
        jTableDdMunicipioLocalCarreg.getTableHeader().setReorderingAllowed(false);
        jTableDdMunicipioLocalCarreg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableDdMunicipioLocalCarregMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableDdMunicipioLocalCarregMouseReleased(evt);
            }
        });
        jTableDdMunicipioLocalCarreg.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableDdMunicipioLocalCarregPropertyChange(evt);
            }
        });
        jScrollPane3.setViewportView(jTableDdMunicipioLocalCarreg);

        jBtDdExcluirMunicipioLocalCarreg.setText("Excluir");
        jBtDdExcluirMunicipioLocalCarreg.setEnabled(false);
        jBtDdExcluirMunicipioLocalCarreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtDdExcluirMunicipioLocalCarregActionPerformed(evt);
            }
        });

        jBtDdIncluirMunicipioLocalCarreg.setText("Incluir");
        jBtDdIncluirMunicipioLocalCarreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtDdIncluirMunicipioLocalCarregActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlDdMunicipioLocalCarregLayout = new javax.swing.GroupLayout(jPnlDdMunicipioLocalCarreg);
        jPnlDdMunicipioLocalCarreg.setLayout(jPnlDdMunicipioLocalCarregLayout);
        jPnlDdMunicipioLocalCarregLayout.setHorizontalGroup(
            jPnlDdMunicipioLocalCarregLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDdMunicipioLocalCarregLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPnlDdMunicipioLocalCarregLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPnlDdMunicipioLocalCarregLayout.createSequentialGroup()
                        .addComponent(jBtDdIncluirMunicipioLocalCarreg)
                        .addGap(11, 11, 11)
                        .addComponent(jBtDdExcluirMunicipioLocalCarreg)
                        .addContainerGap())))
        );
        jPnlDdMunicipioLocalCarregLayout.setVerticalGroup(
            jPnlDdMunicipioLocalCarregLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDdMunicipioLocalCarregLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addGroup(jPnlDdMunicipioLocalCarregLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtDdIncluirMunicipioLocalCarreg)
                    .addComponent(jBtDdExcluirMunicipioLocalCarreg)))
        );

        javax.swing.GroupLayout jPnlDdLocalCarregamentoLayout = new javax.swing.GroupLayout(jPnlDdLocalCarregamento);
        jPnlDdLocalCarregamento.setLayout(jPnlDdLocalCarregamentoLayout);
        jPnlDdLocalCarregamentoLayout.setHorizontalGroup(
            jPnlDdLocalCarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlDdMunicipioLocalCarreg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPnlDdLocalCarregamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlDdLocalCarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlDdLocalCarregamentoLayout.createSequentialGroup()
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlDdLocalCarregamentoLayout.createSequentialGroup()
                        .addComponent(jCmbBxDdUfLocalCarreg, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jCmbBxDdMunicipioLocalCarreg, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(137, Short.MAX_VALUE))
        );
        jPnlDdLocalCarregamentoLayout.setVerticalGroup(
            jPnlDdLocalCarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDdLocalCarregamentoLayout.createSequentialGroup()
                .addGroup(jPnlDdLocalCarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel37)
                    .addComponent(jLabel38))
                .addGap(2, 2, 2)
                .addGroup(jPnlDdLocalCarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCmbBxDdUfLocalCarreg, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCmbBxDdMunicipioLocalCarreg, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jPnlDdMunicipioLocalCarreg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPnlDdUfDePercurso.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "UF's de Percurso", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel35.setText("*UF");

        jCmbBxDdUfPercurso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxDdUfPercursoKeyPressed(evt);
            }
        });

        jPnlDdIncluirUfPercurso.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "UF's (25 no Máximo)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jTableDdUfPercurso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "UF"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
            }

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

        });
        jTableDdUfPercurso.getTableHeader().setReorderingAllowed(false);
        jTableDdUfPercurso.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableDdUfPercursoMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTableDdUfPercurso);

        jBtDdIncluirUfPercurso.setText("Incluir");
        jBtDdIncluirUfPercurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtDdIncluirUfPercursoActionPerformed(evt);
            }
        });

        jBtDdExcluirUfPercurso.setText("Excluir");
        jBtDdExcluirUfPercurso.setEnabled(false);
        jBtDdExcluirUfPercurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtDdExcluirUfPercursoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlDdIncluirUfPercursoLayout = new javax.swing.GroupLayout(jPnlDdIncluirUfPercurso);
        jPnlDdIncluirUfPercurso.setLayout(jPnlDdIncluirUfPercursoLayout);
        jPnlDdIncluirUfPercursoLayout.setHorizontalGroup(
            jPnlDdIncluirUfPercursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDdIncluirUfPercursoLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPnlDdIncluirUfPercursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                    .addGroup(jPnlDdIncluirUfPercursoLayout.createSequentialGroup()
                        .addComponent(jBtDdIncluirUfPercurso)
                        .addGap(11, 11, 11)
                        .addComponent(jBtDdExcluirUfPercurso))))
        );
        jPnlDdIncluirUfPercursoLayout.setVerticalGroup(
            jPnlDdIncluirUfPercursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDdIncluirUfPercursoLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addGroup(jPnlDdIncluirUfPercursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtDdIncluirUfPercurso)
                    .addComponent(jBtDdExcluirUfPercurso)))
        );

        javax.swing.GroupLayout jPnlDdUfDePercursoLayout = new javax.swing.GroupLayout(jPnlDdUfDePercurso);
        jPnlDdUfDePercurso.setLayout(jPnlDdUfDePercursoLayout);
        jPnlDdUfDePercursoLayout.setHorizontalGroup(
            jPnlDdUfDePercursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDdUfDePercursoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlDdUfDePercursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCmbBxDdUfPercurso, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(268, Short.MAX_VALUE))
            .addGroup(jPnlDdUfDePercursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPnlDdIncluirUfPercurso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPnlDdUfDePercursoLayout.setVerticalGroup(
            jPnlDdUfDePercursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDdUfDePercursoLayout.createSequentialGroup()
                .addComponent(jLabel35)
                .addGap(2, 2, 2)
                .addComponent(jCmbBxDdUfPercurso, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPnlDdUfDePercursoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnlDdUfDePercursoLayout.createSequentialGroup()
                    .addGap(47, 47, 47)
                    .addComponent(jPnlDdIncluirUfPercurso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPnlDdLocalDescarregamento.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Local de Descarregamento", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel36.setText("*UF");

        jCmbBxDdUfLocalDescarreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbBxDdUfLocalDescarregActionPerformed(evt);
            }
        });
        jCmbBxDdUfLocalDescarreg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxDdUfLocalDescarregKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPnlDdLocalDescarregamentoLayout = new javax.swing.GroupLayout(jPnlDdLocalDescarregamento);
        jPnlDdLocalDescarregamento.setLayout(jPnlDdLocalDescarregamentoLayout);
        jPnlDdLocalDescarregamentoLayout.setHorizontalGroup(
            jPnlDdLocalDescarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDdLocalDescarregamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlDdLocalDescarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCmbBxDdUfLocalDescarreg, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        jPnlDdLocalDescarregamentoLayout.setVerticalGroup(
            jPnlDdLocalDescarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDdLocalDescarregamentoLayout.createSequentialGroup()
                .addComponent(jLabel36)
                .addGap(2, 2, 2)
                .addComponent(jCmbBxDdUfLocalDescarreg, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        jPnlErroMensagem.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Erros ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 0, 51))); // NOI18N
        jPnlErroMensagem.setForeground(new java.awt.Color(255, 51, 51));

        jTblErroMsg.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Tipo", "Aba do erro", "Nome do Campo", "Descrição do Erro"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;   //Disallow the editing of any cell
            };

        });
        jTblErroMsg.getTableHeader().setResizingAllowed(false);
        jTblErroMsg.getTableHeader().setReorderingAllowed(false);
        jTblErroMsg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTblErroMsgMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTblErroMsgMouseReleased(evt);
            }
        });
        jScrollPane5.setViewportView(jTblErroMsg);

        jBtFecharPanelErro.setText("Fechar");
        jBtFecharPanelErro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtFecharPanelErroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlErroMensagemLayout = new javax.swing.GroupLayout(jPnlErroMensagem);
        jPnlErroMensagem.setLayout(jPnlErroMensagemLayout);
        jPnlErroMensagemLayout.setHorizontalGroup(
            jPnlErroMensagemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5)
            .addGroup(jPnlErroMensagemLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBtFecharPanelErro)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPnlErroMensagemLayout.setVerticalGroup(
            jPnlErroMensagemLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlErroMensagemLayout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtFecharPanelErro))
        );

        javax.swing.GroupLayout TabDadosLayout = new javax.swing.GroupLayout(TabDados);
        TabDados.setLayout(TabDadosLayout);
        TabDadosLayout.setHorizontalGroup(
            TabDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlDadosMDFe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(TabDadosLayout.createSequentialGroup()
                .addComponent(jPnlDdLocalCarregamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPnlDdUfDePercurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPnlDdLocalDescarregamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(203, Short.MAX_VALUE))
            .addComponent(jPnlErroMensagem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        TabDadosLayout.setVerticalGroup(
            TabDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabDadosLayout.createSequentialGroup()
                .addComponent(jPnlDadosMDFe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TabDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPnlDdLocalCarregamento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(TabDadosLayout.createSequentialGroup()
                        .addGroup(TabDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPnlDdLocalDescarregamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPnlDdUfDePercurso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(52, 52, 52)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPnlErroMensagem, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );

        jTabEdit.addTab("Dados", TabDados);

        jPnlEmtIdentidicaçãoEmitente.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Identificação do Emitente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel39.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel39.setText("*CNPJ");

        jFldEmtCNPJ.setEditable(false);
        jFldEmtCNPJ.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtCNPJ.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldEmtCNPJ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldEmtCNPJActionPerformed(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel40.setText("*Inscrição Estadual");

        jFldEmtInscEstadual.setEditable(false);
        jFldEmtInscEstadual.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtInscEstadual.setDocument(new LimitaField(14, 2)
        );
        jFldEmtInscEstadual.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldEmtInscEstadual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldEmtInscEstadualActionPerformed(evt);
            }
        });
        jFldEmtInscEstadual.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldEmtInscEstadualKeyPressed(evt);
            }
        });

        jLabel41.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel41.setText("*Razão Social/Nome");

        jFldEmtRazaoSocial.setEditable(false);
        jFldEmtRazaoSocial.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtRazaoSocial.setDocument(new LimitaField(60, 0));
        jFldEmtRazaoSocial.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldEmtRazaoSocial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldEmtRazaoSocialActionPerformed(evt);
            }
        });
        jFldEmtRazaoSocial.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldEmtRazaoSocialKeyPressed(evt);
            }
        });

        jLabel42.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel42.setText("Nome Fantasia");

        jFldEmtNomeFantasia.setEditable(false);
        jFldEmtNomeFantasia.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtNomeFantasia.setDocument(new LimitaField(60, 0)
        );
        jFldEmtNomeFantasia.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldEmtNomeFantasia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldEmtNomeFantasiaActionPerformed(evt);
            }
        });
        jFldEmtNomeFantasia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldEmtNomeFantasiaKeyPressed(evt);
            }
        });

        jLabel55.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel55.setText("RNTRC");

        jFldEmtRNTRC.setEditable(false);
        jFldEmtRNTRC.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtRNTRC.setDocument(new LimitaField(12, 0));
        jFldEmtRNTRC.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldEmtRNTRC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldEmtRNTRCActionPerformed(evt);
            }
        });
        jFldEmtRNTRC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldEmtRNTRCKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPnlEmtIdentidicaçãoEmitenteLayout = new javax.swing.GroupLayout(jPnlEmtIdentidicaçãoEmitente);
        jPnlEmtIdentidicaçãoEmitente.setLayout(jPnlEmtIdentidicaçãoEmitenteLayout);
        jPnlEmtIdentidicaçãoEmitenteLayout.setHorizontalGroup(
            jPnlEmtIdentidicaçãoEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlEmtIdentidicaçãoEmitenteLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPnlEmtIdentidicaçãoEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlEmtIdentidicaçãoEmitenteLayout.createSequentialGroup()
                        .addGroup(jPnlEmtIdentidicaçãoEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldEmtCNPJ, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPnlEmtIdentidicaçãoEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldEmtInscEstadual, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPnlEmtIdentidicaçãoEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPnlEmtIdentidicaçãoEmitenteLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel55, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jFldEmtRNTRC, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)))
                    .addComponent(jFldEmtRazaoSocial)
                    .addComponent(jFldEmtNomeFantasia))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPnlEmtIdentidicaçãoEmitenteLayout.setVerticalGroup(
            jPnlEmtIdentidicaçãoEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlEmtIdentidicaçãoEmitenteLayout.createSequentialGroup()
                .addGroup(jPnlEmtIdentidicaçãoEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPnlEmtIdentidicaçãoEmitenteLayout.createSequentialGroup()
                        .addGroup(jPnlEmtIdentidicaçãoEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel39)
                            .addComponent(jLabel40))
                        .addGap(2, 2, 2)
                        .addGroup(jPnlEmtIdentidicaçãoEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFldEmtCNPJ, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldEmtInscEstadual, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPnlEmtIdentidicaçãoEmitenteLayout.createSequentialGroup()
                        .addComponent(jLabel55)
                        .addGap(2, 2, 2)
                        .addComponent(jFldEmtRNTRC, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addComponent(jLabel41)
                .addGap(2, 2, 2)
                .addComponent(jFldEmtRazaoSocial, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel42)
                .addGap(2, 2, 2)
                .addComponent(jFldEmtNomeFantasia, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Endereço do Emitente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel43.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel43.setText("*Logradouro");

        jLabel45.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel45.setText("*Complemento");

        jFldEmtComplemento.setEditable(false);
        jFldEmtComplemento.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtComplemento.setDocument(new LimitaField(60, 0));
        jFldEmtComplemento.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldEmtComplemento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldEmtComplementoKeyPressed(evt);
            }
        });

        jLabel46.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel46.setText("*Bairro");

        jFldEmtBairro.setEditable(false);
        jFldEmtBairro.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtBairro.setDocument(new LimitaField(60, 0));
        jFldEmtBairro.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldEmtBairro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldEmtBairroKeyPressed(evt);
            }
        });

        jLabel44.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel44.setText("*Número");

        jFldEmtNumero.setEditable(false);
        jFldEmtNumero.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtNumero.setDocument(new LimitaField(60, 0));
        jFldEmtNumero.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldEmtNumero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldEmtNumeroKeyPressed(evt);
            }
        });

        jFldEmtLogradouro.setEditable(false);
        jFldEmtLogradouro.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtLogradouro.setDocument(new LimitaField(60, 0)
        );
        jFldEmtLogradouro.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldEmtLogradouro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldEmtLogradouroKeyPressed(evt);
            }
        });

        jFldEmtCep.setEditable(false);
        jFldEmtCep.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtCep.setDocument(new LimitaField(9, 0));
        jFldEmtCep.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldEmtCep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldEmtCepKeyPressed(evt);
            }
        });

        jLabel47.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel47.setText("*CEP");

        jLabel51.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel51.setText("*Cód. Município");

        jFldEmtTelefone.setEditable(false);
        jFldEmtTelefone.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtTelefone.setDocument(new LimitaField(12, 0));
        jFldEmtTelefone.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldEmtTelefone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldEmtTelefoneKeyPressed(evt);
            }
        });

        jLabel50.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel50.setText("*Município");

        jLabel49.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel49.setText("*UF");

        jLabel48.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel48.setText("*País");

        jLabel52.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel52.setText("E-mail");

        jFldEmtEmail.setEditable(false);
        jFldEmtEmail.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtEmail.setDocument(new LimitaField(60, 1));
        jFldEmtEmail.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jFldtPais.setEditable(false);
        jFldtPais.setBackground(new java.awt.Color(255, 255, 204));
        jFldtPais.setDocument(new LimitaField(60, 0));
        jFldtPais.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldtPais.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldtPaisKeyPressed(evt);
            }
        });

        jFldEmtMunicipio.setEditable(false);
        jFldEmtMunicipio.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtMunicipio.setDocument(new LimitaField(60, 0));
        jFldEmtMunicipio.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldEmtMunicipio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldEmtMunicipioKeyPressed(evt);
            }
        });

        jFldEmtUf.setEditable(false);
        jFldEmtUf.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtUf.setDocument(new LimitaField(60, 0));
        jFldEmtUf.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldEmtUf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldEmtUfKeyPressed(evt);
            }
        });

        jFldEmtCodMun.setEditable(false);
        jFldEmtCodMun.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtCodMun.setDocument(new LimitaField(12, 0));
        jFldEmtCodMun.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldEmtCodMun.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldEmtCodMunKeyPressed(evt);
            }
        });

        jLabel59.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel59.setText("Telefone");

        jLabel124.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel124.setText("Caminho Certificado");

        jFldEmtCamCertificado.setEditable(false);
        jFldEmtCamCertificado.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtCamCertificado.setDocument(new LimitaField(60, 1));
        jFldEmtCamCertificado.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jFldEmtSenhaCertificado.setEditable(false);
        jFldEmtSenhaCertificado.setBackground(new java.awt.Color(255, 255, 204));
        jFldEmtSenhaCertificado.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldEmtSenhaCertificado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldEmtSenhaCertificadoKeyPressed(evt);
            }
        });

        jLabel126.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel126.setText("Senha");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(388, 388, 388)
                        .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(151, 151, 151)
                        .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jFldEmtLogradouro, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jFldEmtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jFldEmtCep, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(260, 260, 260)
                        .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jFldEmtComplemento, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jFldEmtBairro, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldtPais, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldEmtUf, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldEmtCodMun, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldEmtMunicipio, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFldEmtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel59, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(338, 338, 338)
                        .addComponent(jLabel124, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(199, 199, 199)
                        .addComponent(jLabel126, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jFldEmtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jFldEmtCamCertificado, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jFldEmtSenhaCertificado, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(136, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel43)
                    .addComponent(jLabel44)
                    .addComponent(jLabel46))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFldEmtLogradouro, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFldEmtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFldEmtCep, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel45)
                    .addComponent(jLabel47))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFldEmtComplemento, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFldEmtBairro, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel48)
                        .addGap(2, 2, 2)
                        .addComponent(jFldtPais, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel49)
                        .addGap(2, 2, 2)
                        .addComponent(jFldEmtUf, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel51, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jFldEmtCodMun, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel50)
                        .addGap(2, 2, 2)
                        .addComponent(jFldEmtMunicipio, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jFldEmtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel59, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel52)
                    .addComponent(jLabel124)
                    .addComponent(jLabel126))
                .addGap(1, 1, 1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFldEmtSenhaCertificado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFldEmtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldEmtCamCertificado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );

        javax.swing.GroupLayout TabEmitenteLayout = new javax.swing.GroupLayout(TabEmitente);
        TabEmitente.setLayout(TabEmitenteLayout);
        TabEmitenteLayout.setHorizontalGroup(
            TabEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlEmtIdentidicaçãoEmitente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        TabEmitenteLayout.setVerticalGroup(
            TabEmitenteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabEmitenteLayout.createSequentialGroup()
                .addComponent(jPnlEmtIdentidicaçãoEmitente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabEdit.addTab("Emitente", TabEmitente);

        jPnlInfCiot.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Informações do CIOT", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jTableRdvCIOT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "CIOT", "CPF/CNPJ"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableRdvCIOT.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableRdvCIOTPropertyChange(evt);
            }
        });
        jScrollPane4.setViewportView(jTableRdvCIOT);

        jLabel131.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel131.setText("CIOT");

        jBtIncluirCIOT.setText("Incluir");
        jBtIncluirCIOT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIncluirCIOTActionPerformed(evt);
            }
        });

        jBtExcluirCIOT.setText("Excluir");
        jBtExcluirCIOT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirCIOTActionPerformed(evt);
            }
        });

        jPnlRespCiot.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Responsável pela geração do CIOT", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        buttonGroup2.add(jRadioCpfCiot);
        jRadioCpfCiot.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jRadioCpfCiot.setSelected(true);
        jRadioCpfCiot.setText("CPF");
        jRadioCpfCiot.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jRadioCpfCiotKeyPressed(evt);
            }
        });

        buttonGroup2.add(jRadioCnpjCiot);
        jRadioCnpjCiot.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jRadioCnpjCiot.setText("CNPJ");
        jRadioCnpjCiot.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jRadioCnpjCiotKeyPressed(evt);
            }
        });

        jFldRdvResponsavelCiot.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldRdvResponsavelCiotFocusLost(evt);
            }
        });
        jFldRdvResponsavelCiot.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldRdvResponsavelCiotKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPnlRespCiotLayout = new javax.swing.GroupLayout(jPnlRespCiot);
        jPnlRespCiot.setLayout(jPnlRespCiotLayout);
        jPnlRespCiotLayout.setHorizontalGroup(
            jPnlRespCiotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlRespCiotLayout.createSequentialGroup()
                .addComponent(jRadioCpfCiot)
                .addGap(18, 18, 18)
                .addComponent(jRadioCnpjCiot)
                .addGap(18, 18, 18)
                .addComponent(jFldRdvResponsavelCiot)
                .addGap(23, 23, 23))
        );
        jPnlRespCiotLayout.setVerticalGroup(
            jPnlRespCiotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlRespCiotLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPnlRespCiotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioCpfCiot)
                    .addComponent(jRadioCnpjCiot)
                    .addComponent(jFldRdvResponsavelCiot, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jFldRdvCiot.setDocument(new LimitaField(12, 2));
        jFldRdvCiot.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldRdvCiotFocusLost(evt);
            }
        });
        jFldRdvCiot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldRdvCiotActionPerformed(evt);
            }
        });
        jFldRdvCiot.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldRdvCiotKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPnlInfCiotLayout = new javax.swing.GroupLayout(jPnlInfCiot);
        jPnlInfCiot.setLayout(jPnlInfCiotLayout);
        jPnlInfCiotLayout.setHorizontalGroup(
            jPnlInfCiotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlInfCiotLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlInfCiotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                    .addComponent(jPnlRespCiot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPnlInfCiotLayout.createSequentialGroup()
                        .addGroup(jPnlInfCiotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel131, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPnlInfCiotLayout.createSequentialGroup()
                                .addComponent(jBtIncluirCIOT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBtExcluirCIOT))
                            .addComponent(jFldRdvCiot, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPnlInfCiotLayout.setVerticalGroup(
            jPnlInfCiotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnlInfCiotLayout.createSequentialGroup()
                .addComponent(jLabel131, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jFldRdvCiot, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPnlRespCiot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPnlInfCiotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtExcluirCIOT, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtIncluirCIOT, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPnlContratante.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Contratantes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jFldRdvCodContratante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldRdvCodContratanteFocusLost(evt);
            }
        });
        jFldRdvCodContratante.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldRdvCodContratanteKeyPressed(evt);
            }
        });

        jBtBuscaContratante.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaContratante.setText("F11");
        jBtBuscaContratante.setFocusable(false);
        jBtBuscaContratante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaContratanteActionPerformed(evt);
            }
        });

        jFldRdvNomeContratante.setEditable(false);
        jFldRdvNomeContratante.setBackground(new java.awt.Color(255, 255, 204));
        jFldRdvNomeContratante.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jFldRdvNomeContratante.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jFldRdvNomeContratante.setFocusable(false);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel12.setText("Código");

        jLabel132.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel132.setText("Contratante");

        jFldRdvCpfContratante.setEditable(false);
        jFldRdvCpfContratante.setBackground(new java.awt.Color(255, 255, 204));
        jFldRdvCpfContratante.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jFldRdvCpfContratante.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jFldRdvCpfContratante.setFocusable(false);

        jLabel133.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel133.setText("CPF");

        jFldRdvCnpjContratante.setEditable(false);
        jFldRdvCnpjContratante.setBackground(new java.awt.Color(255, 255, 204));
        jFldRdvCnpjContratante.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jFldRdvCnpjContratante.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jFldRdvCnpjContratante.setFocusable(false);

        jLabel134.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel134.setText("CNPJ");

        jTableRdvContratante.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Código", "Contratante", "CPF", "CNPJ"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableRdvContratante.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableRdvContratantePropertyChange(evt);
            }
        });
        jScrollPane21.setViewportView(jTableRdvContratante);

        jBtIncluirContratante.setText("Incluir");
        jBtIncluirContratante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIncluirContratanteActionPerformed(evt);
            }
        });

        jBtExcluirContratante.setText("Excluir");
        jBtExcluirContratante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirContratanteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlContratanteLayout = new javax.swing.GroupLayout(jPnlContratante);
        jPnlContratante.setLayout(jPnlContratanteLayout);
        jPnlContratanteLayout.setHorizontalGroup(
            jPnlContratanteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlContratanteLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane21, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                .addGap(13, 13, 13))
            .addGroup(jPnlContratanteLayout.createSequentialGroup()
                .addGroup(jPnlContratanteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlContratanteLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel12)
                        .addGap(100, 100, 100)
                        .addComponent(jLabel132))
                    .addGroup(jPnlContratanteLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel133)
                        .addGap(243, 243, 243)
                        .addComponent(jLabel134))
                    .addGroup(jPnlContratanteLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jBtIncluirContratante)
                        .addGap(15, 15, 15)
                        .addComponent(jBtExcluirContratante)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPnlContratanteLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPnlContratanteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPnlContratanteLayout.createSequentialGroup()
                        .addComponent(jFldRdvCpfContratante, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jFldRdvCnpjContratante))
                    .addGroup(jPnlContratanteLayout.createSequentialGroup()
                        .addComponent(jFldRdvCodContratante, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jBtBuscaContratante, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jFldRdvNomeContratante)))
                .addGap(73, 73, 73))
        );
        jPnlContratanteLayout.setVerticalGroup(
            jPnlContratanteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlContratanteLayout.createSequentialGroup()
                .addGroup(jPnlContratanteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel132))
                .addGroup(jPnlContratanteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFldRdvCodContratante, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtBuscaContratante, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFldRdvNomeContratante, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPnlContratanteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel133)
                    .addComponent(jLabel134))
                .addGap(0, 0, 0)
                .addGroup(jPnlContratanteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFldRdvCpfContratante, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFldRdvCnpjContratante, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane21, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addGroup(jPnlContratanteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtIncluirContratante, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtExcluirContratante, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel5.setText("RNTRC");

        jFldRdvRntrc.setDocument(new LimitaField(8, 2));
        jFldRdvRntrc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldRdvRntrcActionPerformed(evt);
            }
        });
        jFldRdvRntrc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldRdvRntrcKeyPressed(evt);
            }
        });

        jLabel54.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel54.setText("Código de Agendamento do Porto");

        jFldRdvCodAgendamentoPorto.setDocument(new LimitaField(16, 2));
        jFldRdvCodAgendamentoPorto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldRdvCodAgendamentoPortoKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout TabAgReguladoraLayout = new javax.swing.GroupLayout(TabAgReguladora);
        TabAgReguladora.setLayout(TabAgReguladoraLayout);
        TabAgReguladoraLayout.setHorizontalGroup(
            TabAgReguladoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabAgReguladoraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TabAgReguladoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(TabAgReguladoraLayout.createSequentialGroup()
                        .addComponent(jPnlInfCiot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(TabAgReguladoraLayout.createSequentialGroup()
                        .addGroup(TabAgReguladoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFldRdvRntrc, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(TabAgReguladoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldRdvCodAgendamentoPorto, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70)))
                .addComponent(jPnlContratante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        TabAgReguladoraLayout.setVerticalGroup(
            TabAgReguladoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TabAgReguladoraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TabAgReguladoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPnlContratante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(TabAgReguladoraLayout.createSequentialGroup()
                        .addGroup(TabAgReguladoraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(TabAgReguladoraLayout.createSequentialGroup()
                                .addComponent(jLabel54)
                                .addGap(1, 1, 1)
                                .addComponent(jFldRdvCodAgendamentoPorto, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(TabAgReguladoraLayout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(jFldRdvRntrc, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPnlInfCiot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(55, 55, 55))
        );

        jTabEditRodoviarios.addTab("Agência Reguladora", TabAgReguladora);

        jPnlRdvVeiculoTracao.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Veículo de Tração", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel60.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel60.setText("*Código");

        jFldRdvCodVeic.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jFldRdvCodVeic.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jFldRdvCodVeicFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldRdvCodVeicFocusLost(evt);
            }
        });
        jFldRdvCodVeic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldRdvCodVeicActionPerformed(evt);
            }
        });
        jFldRdvCodVeic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldRdvCodVeicKeyPressed(evt);
            }
        });

        jBtBuscaVeiculo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaVeiculo.setText("F11");
        jBtBuscaVeiculo.setFocusable(false);
        jBtBuscaVeiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaVeiculoActionPerformed(evt);
            }
        });

        jLabel56.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel56.setText("Tipo de Carroceria");

        jLabel63.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel63.setText("Capacidade(M3)");

        jLblRdvTpCarroceria.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvTpCarroceria.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblRdvTpCarroceria.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvTpCarroceria.setOpaque(true);

        jLabel57.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel57.setText("Placa");

        jLblRdvPlaca.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvPlaca.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblRdvPlaca.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvPlaca.setOpaque(true);

        jLabel58.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel58.setText("Tara(KG)");

        jLblRdvTaraKG.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvTaraKG.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblRdvTaraKG.setText("0 KG");
        jLblRdvTaraKG.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvTaraKG.setOpaque(true);

        jLabel105.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel105.setText("RENAVAM");

        jLblRdvRenavam.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvRenavam.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblRdvRenavam.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvRenavam.setOpaque(true);

        jLblRdvTpRodado.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvTpRodado.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblRdvTpRodado.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvTpRodado.setOpaque(true);

        jLabel61.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel61.setText("Tipo Rodado");

        jLblRdvCapacidadeM3.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvCapacidadeM3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblRdvCapacidadeM3.setText("0 M3");
        jLblRdvCapacidadeM3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvCapacidadeM3.setOpaque(true);

        jLblRdvCapacidadeKG.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvCapacidadeKG.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblRdvCapacidadeKG.setText("0 KG");
        jLblRdvCapacidadeKG.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvCapacidadeKG.setOpaque(true);

        jLabel62.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel62.setText("Capacidade(KG)");

        jLblRdvUFVeic.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvUFVeic.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblRdvUFVeic.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvUFVeic.setOpaque(true);

        jLabel106.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel106.setText("UF");

        javax.swing.GroupLayout jPnlRdvVeiculoTracaoLayout = new javax.swing.GroupLayout(jPnlRdvVeiculoTracao);
        jPnlRdvVeiculoTracao.setLayout(jPnlRdvVeiculoTracaoLayout);
        jPnlRdvVeiculoTracaoLayout.setHorizontalGroup(
            jPnlRdvVeiculoTracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlRdvVeiculoTracaoLayout.createSequentialGroup()
                .addGroup(jPnlRdvVeiculoTracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel60, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFldRdvCodVeic, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(jBtBuscaVeiculo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPnlRdvVeiculoTracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel56, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblRdvTpCarroceria, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPnlRdvVeiculoTracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel57, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblRdvPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPnlRdvVeiculoTracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel58, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblRdvTaraKG, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPnlRdvVeiculoTracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel105, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblRdvRenavam, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPnlRdvVeiculoTracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel106, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblRdvUFVeic, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPnlRdvVeiculoTracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel62, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblRdvCapacidadeKG, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPnlRdvVeiculoTracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel63, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblRdvCapacidadeM3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPnlRdvVeiculoTracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel61, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblRdvTpRodado, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(100, Short.MAX_VALUE))
        );
        jPnlRdvVeiculoTracaoLayout.setVerticalGroup(
            jPnlRdvVeiculoTracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlRdvVeiculoTracaoLayout.createSequentialGroup()
                .addGroup(jPnlRdvVeiculoTracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel60, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlRdvVeiculoTracaoLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jFldRdvCodVeic, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlRdvVeiculoTracaoLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jBtBuscaVeiculo))
                    .addGroup(jPnlRdvVeiculoTracaoLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel56)
                        .addGap(1, 1, 1)
                        .addComponent(jLblRdvTpCarroceria, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlRdvVeiculoTracaoLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel57, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLblRdvPlaca, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlRdvVeiculoTracaoLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel58, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLblRdvTaraKG, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlRdvVeiculoTracaoLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel105, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLblRdvRenavam, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlRdvVeiculoTracaoLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel106, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLblRdvUFVeic, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlRdvVeiculoTracaoLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel62, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLblRdvCapacidadeKG, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlRdvVeiculoTracaoLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel63, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jLblRdvCapacidadeM3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlRdvVeiculoTracaoLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel61, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLblRdvTpRodado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPnlRdvProprietário.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Proprietário", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel65.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel65.setText("*Código");

        jFldRdvCodProp.setEditable(false);
        jFldRdvCodProp.setBackground(new java.awt.Color(255, 255, 204));
        jFldRdvCodProp.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jFldRdvCodProp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldRdvCodPropFocusLost(evt);
            }
        });
        jFldRdvCodProp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldRdvCodPropActionPerformed(evt);
            }
        });
        jFldRdvCodProp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldRdvCodPropKeyPressed(evt);
            }
        });

        jLabel64.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel64.setText("Nome do Proprietário");

        jLblRdvPropietario.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvPropietario.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvPropietario.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvPropietario.setOpaque(true);

        jLblRdvCpfProprietario.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvCpfProprietario.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvCpfProprietario.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvCpfProprietario.setOpaque(true);

        jLabel67.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel67.setText("CPF");

        jLabel66.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel66.setText("CNPJ");

        jLblRdvCnpjProprietario.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvCnpjProprietario.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvCnpjProprietario.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvCnpjProprietario.setOpaque(true);

        jLabel75.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel75.setText("Tipo de Proprietário");

        jLblRdvTpProprietario.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvTpProprietario.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvTpProprietario.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvTpProprietario.setOpaque(true);

        jLabel115.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel115.setText("RNTRC");

        jLblRdvRntrcProprietario.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvRntrcProprietario.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvRntrcProprietario.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvRntrcProprietario.setOpaque(true);

        jLblRdvUfProprietario.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvUfProprietario.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvUfProprietario.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvUfProprietario.setOpaque(true);

        jLabel116.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel116.setText("UF");

        jLblRdvInscEstProprietario.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvInscEstProprietario.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvInscEstProprietario.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvInscEstProprietario.setOpaque(true);

        jLabel117.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel117.setText("Inscrição Estadual");

        jChckBxDdInformarEmitente.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jChckBxDdInformarEmitente.setText("O proprietário Não é o emitente iniciado no Sistema");
        jChckBxDdInformarEmitente.setEnabled(false);
        jChckBxDdInformarEmitente.setOpaque(false);
        jChckBxDdInformarEmitente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jChckBxDdInformarEmitenteItemStateChanged(evt);
            }
        });
        jChckBxDdInformarEmitente.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jChckBxDdInformarEmitenteStateChanged(evt);
            }
        });
        jChckBxDdInformarEmitente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jChckBxDdInformarEmitenteActionPerformed(evt);
            }
        });
        jChckBxDdInformarEmitente.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jChckBxDdInformarEmitentePropertyChange(evt);
            }
        });
        jChckBxDdInformarEmitente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jChckBxDdInformarEmitenteKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPnlRdvProprietárioLayout = new javax.swing.GroupLayout(jPnlRdvProprietário);
        jPnlRdvProprietário.setLayout(jPnlRdvProprietárioLayout);
        jPnlRdvProprietárioLayout.setHorizontalGroup(
            jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlRdvProprietárioLayout.createSequentialGroup()
                .addGroup(jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPnlRdvProprietárioLayout.createSequentialGroup()
                        .addGroup(jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFldRdvCodProp, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel65, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPnlRdvProprietárioLayout.createSequentialGroup()
                                .addComponent(jLabel64, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLblRdvPropietario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPnlRdvProprietárioLayout.createSequentialGroup()
                        .addGroup(jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPnlRdvProprietárioLayout.createSequentialGroup()
                                .addGroup(jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLblRdvTpProprietario, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel75, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel67, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLblRdvCpfProprietario, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPnlRdvProprietárioLayout.createSequentialGroup()
                                .addGroup(jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel115, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLblRdvRntrcProprietario, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel116, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLblRdvUfProprietario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel117, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel66, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvCnpjProprietario, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                            .addComponent(jLblRdvInscEstProprietario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jChckBxDdInformarEmitente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPnlRdvProprietárioLayout.setVerticalGroup(
            jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnlRdvProprietárioLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jChckBxDdInformarEmitente)
                .addGap(18, 18, 18)
                .addGroup(jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel65, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlRdvProprietárioLayout.createSequentialGroup()
                        .addComponent(jLabel64)
                        .addGap(1, 1, 1)
                        .addGroup(jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblRdvPropietario, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldRdvCodProp, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnlRdvProprietárioLayout.createSequentialGroup()
                            .addComponent(jLabel67)
                            .addGap(0, 0, 0)
                            .addComponent(jLblRdvCpfProprietario, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPnlRdvProprietárioLayout.createSequentialGroup()
                            .addComponent(jLabel66)
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(jLblRdvCnpjProprietario, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPnlRdvProprietárioLayout.createSequentialGroup()
                        .addComponent(jLabel75)
                        .addGap(0, 0, 0)
                        .addComponent(jLblRdvTpProprietario, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlRdvProprietárioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPnlRdvProprietárioLayout.createSequentialGroup()
                            .addComponent(jLabel115)
                            .addGap(0, 0, 0)
                            .addComponent(jLblRdvRntrcProprietario, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPnlRdvProprietárioLayout.createSequentialGroup()
                            .addComponent(jLabel116)
                            .addGap(0, 0, 0)
                            .addComponent(jLblRdvUfProprietario, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPnlRdvProprietárioLayout.createSequentialGroup()
                        .addComponent(jLabel117)
                        .addGap(0, 0, 0)
                        .addComponent(jLblRdvInscEstProprietario, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22))
        );

        jPnlRdvCondutores.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "(*)Condutores", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel68.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel68.setText("Código");

        jFldRdvCodCondutor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldRdvCodCondutorFocusLost(evt);
            }
        });
        jFldRdvCodCondutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldRdvCodCondutorActionPerformed(evt);
            }
        });
        jFldRdvCodCondutor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldRdvCodCondutorKeyPressed(evt);
            }
        });

        jBtBuscaCondutor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaCondutor.setText("F11");
        jBtBuscaCondutor.setFocusable(false);
        jBtBuscaCondutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaCondutorActionPerformed(evt);
            }
        });

        jLabel107.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel107.setText("Condutor");

        jLblRdvCondutor.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvCondutor.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvCondutor.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvCondutor.setOpaque(true);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "(10 no Máximo)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jTableRdvCondutores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Código", "CPF", "Nome"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableRdvCondutores.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(jTableRdvCondutores);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jBtIncluirCondutor.setText("Incluir");
        jBtIncluirCondutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIncluirCondutorActionPerformed(evt);
            }
        });

        jBtExcluirCondutor.setText("Excluir");
        jBtExcluirCondutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirCondutorActionPerformed(evt);
            }
        });

        jLblRdvCpfCondutor.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvCpfCondutor.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvCpfCondutor.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvCpfCondutor.setOpaque(true);

        jLabel118.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel118.setText("CPF");

        javax.swing.GroupLayout jPnlRdvCondutoresLayout = new javax.swing.GroupLayout(jPnlRdvCondutores);
        jPnlRdvCondutores.setLayout(jPnlRdvCondutoresLayout);
        jPnlRdvCondutoresLayout.setHorizontalGroup(
            jPnlRdvCondutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlRdvCondutoresLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPnlRdvCondutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlRdvCondutoresLayout.createSequentialGroup()
                        .addGroup(jPnlRdvCondutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldRdvCodCondutor, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(jBtBuscaCondutor)
                        .addGap(11, 11, 11)
                        .addGroup(jPnlRdvCondutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel107, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvCondutor, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPnlRdvCondutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPnlRdvCondutoresLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel118, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLblRdvCpfCondutor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(6, 6, 6))
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPnlRdvCondutoresLayout.createSequentialGroup()
                        .addComponent(jBtIncluirCondutor)
                        .addGap(5, 5, 5)
                        .addComponent(jBtExcluirCondutor))))
        );
        jPnlRdvCondutoresLayout.setVerticalGroup(
            jPnlRdvCondutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlRdvCondutoresLayout.createSequentialGroup()
                .addGroup(jPnlRdvCondutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlRdvCondutoresLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jFldRdvCodCondutor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlRdvCondutoresLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jBtBuscaCondutor))
                    .addGroup(jPnlRdvCondutoresLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel107, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jLblRdvCondutor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel118, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlRdvCondutoresLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLblRdvCpfCondutor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6)
                .addGroup(jPnlRdvCondutoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtIncluirCondutor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtExcluirCondutor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout TabVeiculoTracaoLayout = new javax.swing.GroupLayout(TabVeiculoTracao);
        TabVeiculoTracao.setLayout(TabVeiculoTracaoLayout);
        TabVeiculoTracaoLayout.setHorizontalGroup(
            TabVeiculoTracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabVeiculoTracaoLayout.createSequentialGroup()
                .addGroup(TabVeiculoTracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TabVeiculoTracaoLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jPnlRdvProprietário, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPnlRdvCondutores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPnlRdvVeiculoTracao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        TabVeiculoTracaoLayout.setVerticalGroup(
            TabVeiculoTracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabVeiculoTracaoLayout.createSequentialGroup()
                .addComponent(jPnlRdvVeiculoTracao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TabVeiculoTracaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPnlRdvProprietário, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPnlRdvCondutores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(65, 65, 65))
        );

        jTabEditRodoviarios.addTab("Veículo de Tração", TabVeiculoTracao);

        jPnlRdvInfoVeic.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Informação dos Veículos (3 no Máximo)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jTableRdvInfoReboque.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Código", "Placa", "Renavam", "Tipo de Carroceria",
                "UF Licenciamento do Veículo", "Tara(Kg)", "Capacidade(Kg)",
                "Capacidade(M3)", "RNTRC", "Cód. Propietário", "Nome", "CPF/CNPJ",
                "Inscrição Estadual", "UF", "Tipo de Proprietário"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableRdvInfoReboque.getTableHeader().setReorderingAllowed(false);
        jTableRdvInfoReboque.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableRdvInfoReboqueMouseReleased(evt);
            }
        });
        jTableRdvInfoReboque.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableRdvInfoReboquePropertyChange(evt);
            }
        });
        jScrollPane7.setViewportView(jTableRdvInfoReboque);

        jBtIncluirReboque.setText("Incluir");
        jBtIncluirReboque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIncluirReboqueActionPerformed(evt);
            }
        });

        jBtExcluirReboque.setText("Excluir");
        jBtExcluirReboque.setEnabled(false);
        jBtExcluirReboque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirReboqueActionPerformed(evt);
            }
        });

        jPnlReboque.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Reboque", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel100.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel100.setText("Código");

        jFldRdvCodReboque.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldRdvCodReboqueFocusLost(evt);
            }
        });
        jFldRdvCodReboque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldRdvCodReboqueActionPerformed(evt);
            }
        });
        jFldRdvCodReboque.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldRdvCodReboqueKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jFldRdvCodReboqueKeyReleased(evt);
            }
        });

        jBtBuscaReboque.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaReboque.setText("F11");
        jBtBuscaReboque.setFocusable(false);
        jBtBuscaReboque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaReboqueActionPerformed(evt);
            }
        });

        jLabel98.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel98.setText("Placa");

        jLblRdvPlacaReboque.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvPlacaReboque.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvPlacaReboque.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvPlacaReboque.setOpaque(true);

        jLabel101.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel101.setText("Tipo de Carroceria");

        jLblRdvTpCarroceriaReboque.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvTpCarroceriaReboque.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvTpCarroceriaReboque.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvTpCarroceriaReboque.setOpaque(true);

        jLabel122.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel122.setText("RENAVAM");

        jLblRdvRenavamReboque.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvRenavamReboque.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvRenavamReboque.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvRenavamReboque.setOpaque(true);

        jLabel103.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel103.setText("RNTRC");

        jLblRdvRntrcReboque.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvRntrcReboque.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvRntrcReboque.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvRntrcReboque.setOpaque(true);

        jLabel127.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel127.setText("Capacidade (KG)");

        jLblRdvUfReboque.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvUfReboque.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvUfReboque.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvUfReboque.setOpaque(true);

        jLblRdvCapacidadeKGReboque.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvCapacidadeKGReboque.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvCapacidadeKGReboque.setText("0,00 KG");
        jLblRdvCapacidadeKGReboque.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvCapacidadeKGReboque.setOpaque(true);

        jLabel128.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel128.setText("UF");

        jLabel129.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel129.setText("Capacidade (M3)");

        jLblRdvCapacidadeM3Reboque.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvCapacidadeM3Reboque.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvCapacidadeM3Reboque.setText("0,00 M3");
        jLblRdvCapacidadeM3Reboque.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvCapacidadeM3Reboque.setOpaque(true);

        jLblRdvTipoRodadoReboque.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvTipoRodadoReboque.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvTipoRodadoReboque.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvTipoRodadoReboque.setOpaque(true);

        jLabel130.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel130.setText("Tipo Rodado");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Proprietário", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jChckBxRdvInformarEmitenteReboque.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jChckBxRdvInformarEmitenteReboque.setText("O proprietário Não é o emitente iniciado no Sistema");
        jChckBxRdvInformarEmitenteReboque.setEnabled(false);
        jChckBxRdvInformarEmitenteReboque.setOpaque(false);
        jChckBxRdvInformarEmitenteReboque.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jChckBxRdvInformarEmitenteReboqueItemStateChanged(evt);
            }
        });
        jChckBxRdvInformarEmitenteReboque.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jChckBxRdvInformarEmitenteReboqueStateChanged(evt);
            }
        });
        jChckBxRdvInformarEmitenteReboque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jChckBxRdvInformarEmitenteReboqueActionPerformed(evt);
            }
        });
        jChckBxRdvInformarEmitenteReboque.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jChckBxRdvInformarEmitenteReboquePropertyChange(evt);
            }
        });
        jChckBxRdvInformarEmitenteReboque.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jChckBxRdvInformarEmitenteReboqueKeyPressed(evt);
            }
        });

        jLabel99.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel99.setText("*Código");

        jFldRdvCodPropReboque.setEditable(false);
        jFldRdvCodPropReboque.setBackground(new java.awt.Color(255, 255, 204));
        jFldRdvCodPropReboque.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jFldRdvCodPropReboque.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldRdvCodPropReboqueFocusLost(evt);
            }
        });
        jFldRdvCodPropReboque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldRdvCodPropReboqueActionPerformed(evt);
            }
        });
        jFldRdvCodPropReboque.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldRdvCodPropReboqueKeyPressed(evt);
            }
        });

        jLabel102.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel102.setText("Nome do Proprietário");

        jLblRdvPropietarioReboque.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvPropietarioReboque.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvPropietarioReboque.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvPropietarioReboque.setOpaque(true);

        jLabel104.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel104.setText("Tipo de Proprietário");

        jLblRdvTpProprietarioReboque.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvTpProprietarioReboque.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvTpProprietarioReboque.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvTpProprietarioReboque.setOpaque(true);

        jLabel114.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel114.setText("CPF");

        jLblRdvCpfProprietarioReboque.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvCpfProprietarioReboque.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvCpfProprietarioReboque.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvCpfProprietarioReboque.setOpaque(true);

        jLabel121.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel121.setText("CNPJ");

        jLblRdvCnpjProprietarioReboque.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvCnpjProprietarioReboque.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvCnpjProprietarioReboque.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvCnpjProprietarioReboque.setOpaque(true);

        jLabel123.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel123.setText("RNTRC");

        jLblRdvRntrcProprietarioReboque.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvRntrcProprietarioReboque.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvRntrcProprietarioReboque.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvRntrcProprietarioReboque.setOpaque(true);

        jLabel125.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel125.setText("Inscrição Estadual");

        jLblRdvInscEstProprietarioReboque.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvInscEstProprietarioReboque.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvInscEstProprietarioReboque.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvInscEstProprietarioReboque.setOpaque(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jChckBxRdvInformarEmitenteReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel99, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(jLabel102, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel104, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(jLabel114, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92)
                        .addComponent(jLabel121, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jFldRdvCodPropReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLblRdvPropietarioReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jLblRdvTpProprietarioReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(jLblRdvCpfProprietarioReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jLblRdvCnpjProprietarioReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel123, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblRdvRntrcProprietarioReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel125, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(jLblRdvInscEstProprietarioReboque, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 100, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jChckBxRdvInformarEmitenteReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel99)
                    .addComponent(jLabel102)
                    .addComponent(jLabel104)
                    .addComponent(jLabel114)
                    .addComponent(jLabel121)
                    .addComponent(jLabel123)
                    .addComponent(jLabel125))
                .addGap(1, 1, 1)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jFldRdvCodPropReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblRdvPropietarioReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblRdvTpProprietarioReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblRdvCpfProprietarioReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblRdvCnpjProprietarioReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblRdvRntrcProprietarioReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblRdvInscEstProprietarioReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout jPnlReboqueLayout = new javax.swing.GroupLayout(jPnlReboque);
        jPnlReboque.setLayout(jPnlReboqueLayout);
        jPnlReboqueLayout.setHorizontalGroup(
            jPnlReboqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlReboqueLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPnlReboqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPnlReboqueLayout.createSequentialGroup()
                        .addGroup(jPnlReboqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFldRdvCodReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel100, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(jBtBuscaReboque)
                        .addGap(7, 7, 7)
                        .addGroup(jPnlReboqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblRdvPlacaReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel98, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPnlReboqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblRdvTpCarroceriaReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel101, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPnlReboqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblRdvRenavamReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel122, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPnlReboqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel103, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvRntrcReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPnlReboqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel128, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvUfReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPnlReboqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblRdvCapacidadeKGReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel127, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPnlReboqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblRdvCapacidadeM3Reboque, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel129, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPnlReboqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel130, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvTipoRodadoReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(7, 7, 7))
        );
        jPnlReboqueLayout.setVerticalGroup(
            jPnlReboqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlReboqueLayout.createSequentialGroup()
                .addGroup(jPnlReboqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel100, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel98, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel101, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel122, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel103, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel128, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel127, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel129, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel130, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlReboqueLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPnlReboqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFldRdvCodReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtBuscaReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvPlacaReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvTpCarroceriaReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvRenavamReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvRntrcReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvUfReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvCapacidadeKGReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvCapacidadeM3Reboque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvTipoRodadoReboque, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(5, 5, 5)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPnlRdvInfoVeicLayout = new javax.swing.GroupLayout(jPnlRdvInfoVeic);
        jPnlRdvInfoVeic.setLayout(jPnlRdvInfoVeicLayout);
        jPnlRdvInfoVeicLayout.setHorizontalGroup(
            jPnlRdvInfoVeicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlRdvInfoVeicLayout.createSequentialGroup()
                .addGroup(jPnlRdvInfoVeicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlRdvInfoVeicLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPnlRdvInfoVeicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7)
                            .addGroup(jPnlRdvInfoVeicLayout.createSequentialGroup()
                                .addComponent(jBtIncluirReboque)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBtExcluirReboque)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPnlRdvInfoVeicLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPnlReboque, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPnlRdvInfoVeicLayout.setVerticalGroup(
            jPnlRdvInfoVeicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlRdvInfoVeicLayout.createSequentialGroup()
                .addComponent(jPnlReboque, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPnlRdvInfoVeicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBtExcluirReboque, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(jBtIncluirReboque, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout TabReboqueLayout = new javax.swing.GroupLayout(TabReboque);
        TabReboque.setLayout(TabReboqueLayout);
        TabReboqueLayout.setHorizontalGroup(
            TabReboqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlRdvInfoVeic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        TabReboqueLayout.setVerticalGroup(
            TabReboqueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabReboqueLayout.createSequentialGroup()
                .addComponent(jPnlRdvInfoVeic, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabEditRodoviarios.addTab("Reboque", TabReboque);

        jPnlRdvInfoValePedagio.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Informações do Vale Pedágio", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jTableRdvInfoValePedagio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Código", "Fornecedor" ,"CNPJ Fornecedor", "Responsavél pelo Pagamento", "CPF Responsável pelo Pagamento", "CNPJ Resposável pelo Pagamento", "Número Comprovante", "Valor"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class

            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableRdvInfoValePedagio.getTableHeader().setReorderingAllowed(false);
        jTableRdvInfoValePedagio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableRdvInfoValePedagioMouseReleased(evt);
            }
        });
        jTableRdvInfoValePedagio.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableRdvInfoValePedagioPropertyChange(evt);
            }
        });
        jScrollPane8.setViewportView(jTableRdvInfoValePedagio);

        jBtIncluirPedagio.setText("Incluir");
        jBtIncluirPedagio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIncluirPedagioActionPerformed(evt);
            }
        });

        jBtExcluirPedagio.setText("Excluir");
        jBtExcluirPedagio.setEnabled(false);
        jBtExcluirPedagio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirPedagioActionPerformed(evt);
            }
        });

        jLabel108.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel108.setText("Código");

        jFldRdvCodFornecedorVale.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldRdvCodFornecedorValeFocusLost(evt);
            }
        });
        jFldRdvCodFornecedorVale.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldRdvCodFornecedorValeKeyPressed(evt);
            }
        });

        jBtBuscaFornecedorVale.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaFornecedorVale.setText("F11");
        jBtBuscaFornecedorVale.setFocusable(false);
        jBtBuscaFornecedorVale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaFornecedorValeActionPerformed(evt);
            }
        });

        jLabel109.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel109.setText("CNPJ");

        jLblRdvFornecedorVale.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvFornecedorVale.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblRdvFornecedorVale.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvFornecedorVale.setOpaque(true);

        jLabel110.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel110.setText("Código");

        jFldRdvCodRespPag.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldRdvCodRespPagFocusLost(evt);
            }
        });
        jFldRdvCodRespPag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldRdvCodRespPagActionPerformed(evt);
            }
        });
        jFldRdvCodRespPag.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldRdvCodRespPagKeyPressed(evt);
            }
        });

        jBtBuscaRespPagamento.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaRespPagamento.setText("F11");
        jBtBuscaRespPagamento.setFocusable(false);
        jBtBuscaRespPagamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaRespPagamentoActionPerformed(evt);
            }
        });

        jLabel111.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel111.setText("Responsável por Pagamento do Vale");

        jLblRdvResponsavelPagamento.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvResponsavelPagamento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblRdvResponsavelPagamento.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvResponsavelPagamento.setOpaque(true);

        jFldRdvNrComprovante.setDocument(new LimitaField(20, 2));
        jFldRdvNrComprovante.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldRdvNrComprovanteKeyPressed(evt);
            }
        });

        jLabel112.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel112.setText("Número do Comprovante de Compra");

        jLblRdvCnpjFornecedor.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvCnpjFornecedor.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvCnpjFornecedor.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvCnpjFornecedor.setOpaque(true);

        jLabel119.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel119.setText("Fornecedor de Vale");

        jLabel120.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel120.setText("CNPJ");

        jLblRdvResponsavelCnpj.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvResponsavelCnpj.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvResponsavelCnpj.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvResponsavelCnpj.setOpaque(true);

        jFldRdvValorPedagio.setText("0,00");
        jFldRdvValorPedagio.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldRdvValorPedagioFocusLost(evt);
            }
        });
        jFldRdvValorPedagio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldRdvValorPedagioKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFldRdvValorPedagioKeyTyped(evt);
            }
        });

        jLabel135.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel135.setText("Valor do Vale");
        jLabel135.setToolTipText("Valor do Vale");

        jLabel136.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel136.setText("CPF");

        jLblRdvResponsavelCpf.setBackground(new java.awt.Color(255, 255, 204));
        jLblRdvResponsavelCpf.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRdvResponsavelCpf.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRdvResponsavelCpf.setOpaque(true);

        javax.swing.GroupLayout jPnlRdvInfoValePedagioLayout = new javax.swing.GroupLayout(jPnlRdvInfoValePedagio);
        jPnlRdvInfoValePedagio.setLayout(jPnlRdvInfoValePedagioLayout);
        jPnlRdvInfoValePedagioLayout.setHorizontalGroup(
            jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                        .addGroup(jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel108, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFldRdvCodFornecedorVale, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(jBtBuscaFornecedorVale)
                        .addGap(11, 11, 11)
                        .addGroup(jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel119, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvFornecedorVale, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel109, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvCnpjFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                        .addGroup(jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFldRdvCodRespPag, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel110, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(jBtBuscaRespPagamento)
                        .addGap(11, 11, 11)
                        .addGroup(jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblRdvResponsavelPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel111, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel136, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvResponsavelCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel120, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblRdvResponsavelCnpj, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                        .addGroup(jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFldRdvNrComprovante, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel112, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel135)
                            .addComponent(jFldRdvValorPedagio, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                        .addComponent(jBtIncluirPedagio)
                        .addGap(11, 11, 11)
                        .addComponent(jBtExcluirPedagio))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 1125, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );
        jPnlRdvInfoValePedagioLayout.setVerticalGroup(
            jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                .addGroup(jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel108, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jFldRdvCodFornecedorVale, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jBtBuscaFornecedorVale, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel119, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLblRdvFornecedorVale, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel109, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLblRdvCnpjFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(4, 4, 4)
                .addGroup(jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jFldRdvCodRespPag, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel110, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jBtBuscaRespPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLblRdvResponsavelPagamento, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel111, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel136, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLblRdvResponsavelCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel120, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLblRdvResponsavelCnpj, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addGroup(jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jFldRdvNrComprovante, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel112, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlRdvInfoValePedagioLayout.createSequentialGroup()
                        .addComponent(jLabel135)
                        .addGap(1, 1, 1)
                        .addComponent(jFldRdvValorPedagio, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPnlRdvInfoValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtIncluirPedagio, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtExcluirPedagio, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout TabValePedagioLayout = new javax.swing.GroupLayout(TabValePedagio);
        TabValePedagio.setLayout(TabValePedagioLayout);
        TabValePedagioLayout.setHorizontalGroup(
            TabValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlRdvInfoValePedagio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        TabValePedagioLayout.setVerticalGroup(
            TabValePedagioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabValePedagioLayout.createSequentialGroup()
                .addComponent(jPnlRdvInfoValePedagio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabEditRodoviarios.addTab("Vale Pedágio", TabValePedagio);

        jPnlLacresRodo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Lacres", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel137.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel137.setText("N° Lacres");

        jFldRdvNrLacre.setDocument(new LimitaField(20, 2));
        jFldRdvNrLacre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldRdvNrLacreKeyPressed(evt);
            }
        });

        jTableRdvLacres.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Lacre"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableRdvLacres.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableRdvLacresPropertyChange(evt);
            }
        });
        jScrollPane22.setViewportView(jTableRdvLacres);

        jBtIncluirLacresRod.setText("Incluir");
        jBtIncluirLacresRod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIncluirLacresRodActionPerformed(evt);
            }
        });

        jBtExcluirLacresRod.setText("Excluir");
        jBtExcluirLacresRod.setEnabled(false);
        jBtExcluirLacresRod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirLacresRodActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlLacresRodoLayout = new javax.swing.GroupLayout(jPnlLacresRodo);
        jPnlLacresRodo.setLayout(jPnlLacresRodoLayout);
        jPnlLacresRodoLayout.setHorizontalGroup(
            jPnlLacresRodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlLacresRodoLayout.createSequentialGroup()
                .addGroup(jPnlLacresRodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlLacresRodoLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel137)
                        .addGap(12, 12, 12)
                        .addComponent(jFldRdvNrLacre, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlLacresRodoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane22, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE))
                    .addGroup(jPnlLacresRodoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jBtIncluirLacresRod)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBtExcluirLacresRod)))
                .addGap(13, 13, 13))
        );
        jPnlLacresRodoLayout.setVerticalGroup(
            jPnlLacresRodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlLacresRodoLayout.createSequentialGroup()
                .addGroup(jPnlLacresRodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlLacresRodoLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel137))
                    .addComponent(jFldRdvNrLacre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(jScrollPane22, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPnlLacresRodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBtIncluirLacresRod, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(jBtExcluirLacresRod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout TabLacresRodoLayout = new javax.swing.GroupLayout(TabLacresRodo);
        TabLacresRodo.setLayout(TabLacresRodoLayout);
        TabLacresRodoLayout.setHorizontalGroup(
            TabLacresRodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabLacresRodoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPnlLacresRodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(682, Short.MAX_VALUE))
        );
        TabLacresRodoLayout.setVerticalGroup(
            TabLacresRodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabLacresRodoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPnlLacresRodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabEditRodoviarios.addTab("Lacres", TabLacresRodo);

        javax.swing.GroupLayout TabRodoviarioLayout = new javax.swing.GroupLayout(TabRodoviario);
        TabRodoviario.setLayout(TabRodoviarioLayout);
        TabRodoviarioLayout.setHorizontalGroup(
            TabRodoviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabEditRodoviarios, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        TabRodoviarioLayout.setVerticalGroup(
            TabRodoviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TabRodoviarioLayout.createSequentialGroup()
                .addComponent(jTabEditRodoviarios)
                .addContainerGap())
        );

        jTabEdit.addTab("Rodoviário", TabRodoviario);

        jPnlAquaviario.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Informações", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel72.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel72.setText("Código do Tipo de Embarcação");

        jLblAquaTpEmb.setBackground(new java.awt.Color(255, 255, 204));
        jLblAquaTpEmb.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblAquaTpEmb.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblAquaTpEmb.setOpaque(true);

        jLabel74.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel74.setText("*Número da Viagem");

        jFldAquaNrViagem.setDocument(new LimitaField(10, 2)
        );
        jFldAquaNrViagem.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldAquaNrViagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldAquaNrViagemActionPerformed(evt);
            }
        });
        jFldAquaNrViagem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldAquaNrViagemKeyPressed(evt);
            }
        });

        jLblAquaNomeEmbarcacao.setBackground(new java.awt.Color(255, 255, 204));
        jLblAquaNomeEmbarcacao.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblAquaNomeEmbarcacao.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblAquaNomeEmbarcacao.setOpaque(true);

        jLabel113.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel113.setText("Nome da Embarcação");

        jLabel73.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel73.setText("*Código ");

        jBtBuscaEmbarca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaEmbarca.setText("F11");
        jBtBuscaEmbarca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaEmbarcaActionPerformed(evt);
            }
        });

        jFldAquaIdEmb.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldAquaIdEmb.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldAquaIdEmbFocusLost(evt);
            }
        });
        jFldAquaIdEmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldAquaIdEmbActionPerformed(evt);
            }
        });
        jFldAquaIdEmb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldAquaIdEmbKeyPressed(evt);
            }
        });

        jLabel79.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel79.setText("*Código ");

        jFldAquaCodPrtEmbarque.setDocument(new LimitaField(5, 1)
        );
        jFldAquaCodPrtEmbarque.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldAquaCodPrtEmbarque.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldAquaCodPrtEmbarqueFocusLost(evt);
            }
        });
        jFldAquaCodPrtEmbarque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldAquaCodPrtEmbarqueActionPerformed(evt);
            }
        });
        jFldAquaCodPrtEmbarque.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldAquaCodPrtEmbarqueKeyPressed(evt);
            }
        });

        jLabel77.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel77.setText("*Código ");

        jFldAquaCodPrtDestino.setDocument(new LimitaField(5, 1)
        );
        jFldAquaCodPrtDestino.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldAquaCodPrtDestino.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldAquaCodPrtDestinoFocusLost(evt);
            }
        });
        jFldAquaCodPrtDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldAquaCodPrtDestinoActionPerformed(evt);
            }
        });
        jFldAquaCodPrtDestino.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldAquaCodPrtDestinoKeyPressed(evt);
            }
        });

        jLabel76.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel76.setText("*Código");

        jFldAquaCodTermCarreg.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldAquaCodTermCarreg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldAquaCodTermCarregFocusLost(evt);
            }
        });
        jFldAquaCodTermCarreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldAquaCodTermCarregActionPerformed(evt);
            }
        });
        jFldAquaCodTermCarreg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldAquaCodTermCarregKeyPressed(evt);
            }
        });

        jBtBuscaTerminalCarreg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaTerminalCarreg.setText("F11");
        jBtBuscaTerminalCarreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaTerminalCarregActionPerformed(evt);
            }
        });

        jLabel80.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel80.setText("Nome do Terminal de Carregamento");

        jLblTerminalCarreg.setBackground(new java.awt.Color(255, 255, 204));
        jLblTerminalCarreg.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblTerminalCarreg.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblTerminalCarreg.setOpaque(true);

        jPnlAquaInfoTermCarreg.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Informações do Terminais de Carregamento (Máximo de 5)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N
        jPnlAquaInfoTermCarreg.setToolTipText("");

        jTableAquaInfoTermCarreg.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Código", "Nome Terminal de Carregamento"
            }
        ){ @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableAquaInfoTermCarreg.getTableHeader().setReorderingAllowed(false);
        jTableAquaInfoTermCarreg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableAquaInfoTermCarregMouseReleased(evt);
            }
        });
        jTableAquaInfoTermCarreg.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableAquaInfoTermCarregPropertyChange(evt);
            }
        });
        jScrollPane9.setViewportView(jTableAquaInfoTermCarreg);

        javax.swing.GroupLayout jPnlAquaInfoTermCarregLayout = new javax.swing.GroupLayout(jPnlAquaInfoTermCarreg);
        jPnlAquaInfoTermCarreg.setLayout(jPnlAquaInfoTermCarregLayout);
        jPnlAquaInfoTermCarregLayout.setHorizontalGroup(
            jPnlAquaInfoTermCarregLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
        );
        jPnlAquaInfoTermCarregLayout.setVerticalGroup(
            jPnlAquaInfoTermCarregLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlAquaInfoTermCarregLayout.createSequentialGroup()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                .addGap(3, 3, 3))
        );

        jBtIncluirInfoTermCarreg.setText("Incluir");
        jBtIncluirInfoTermCarreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIncluirInfoTermCarregActionPerformed(evt);
            }
        });

        jBtExcluirInfoTermCarreg.setText("Excluir");
        jBtExcluirInfoTermCarreg.setEnabled(false);
        jBtExcluirInfoTermCarreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirInfoTermCarregActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TabTerminalCarregamentoLayout = new javax.swing.GroupLayout(TabTerminalCarregamento);
        TabTerminalCarregamento.setLayout(TabTerminalCarregamentoLayout);
        TabTerminalCarregamentoLayout.setHorizontalGroup(
            TabTerminalCarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabTerminalCarregamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TabTerminalCarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(TabTerminalCarregamentoLayout.createSequentialGroup()
                        .addGroup(TabTerminalCarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(TabTerminalCarregamentoLayout.createSequentialGroup()
                                .addComponent(jLabel76, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(87, 87, 87))
                            .addGroup(TabTerminalCarregamentoLayout.createSequentialGroup()
                                .addComponent(jFldAquaCodTermCarreg)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBtBuscaTerminalCarreg)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(TabTerminalCarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel80, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblTerminalCarreg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPnlAquaInfoTermCarreg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(TabTerminalCarregamentoLayout.createSequentialGroup()
                        .addComponent(jBtIncluirInfoTermCarreg)
                        .addGap(12, 12, 12)
                        .addComponent(jBtExcluirInfoTermCarreg)))
                .addContainerGap(561, Short.MAX_VALUE))
        );
        TabTerminalCarregamentoLayout.setVerticalGroup(
            TabTerminalCarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabTerminalCarregamentoLayout.createSequentialGroup()
                .addGroup(TabTerminalCarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TabTerminalCarregamentoLayout.createSequentialGroup()
                        .addComponent(jLabel76)
                        .addGap(2, 2, 2)
                        .addGroup(TabTerminalCarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jFldAquaCodTermCarreg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtBuscaTerminalCarreg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(TabTerminalCarregamentoLayout.createSequentialGroup()
                        .addComponent(jLabel80)
                        .addGap(2, 2, 2)
                        .addComponent(jLblTerminalCarreg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(2, 2, 2)
                .addComponent(jPnlAquaInfoTermCarreg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TabTerminalCarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtIncluirInfoTermCarreg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtExcluirInfoTermCarreg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabEditInfoCargaAquaviario.addTab("Terminais de Carregamento", TabTerminalCarregamento);

        jLabel78.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel78.setText("*Código");

        jFldAquaCodTermDescarreg.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldAquaCodTermDescarreg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldAquaCodTermDescarregFocusLost(evt);
            }
        });
        jFldAquaCodTermDescarreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldAquaCodTermDescarregActionPerformed(evt);
            }
        });
        jFldAquaCodTermDescarreg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldAquaCodTermDescarregKeyPressed(evt);
            }
        });

        jBtBuscaTerminalDescarreg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaTerminalDescarreg.setText("F11");
        jBtBuscaTerminalDescarreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaTerminalDescarregActionPerformed(evt);
            }
        });

        jLabel81.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel81.setText("Nome do Terminal de Descarregamento");

        jLblNomeTerminalDescarregamento.setBackground(new java.awt.Color(255, 255, 204));
        jLblNomeTerminalDescarregamento.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblNomeTerminalDescarregamento.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblNomeTerminalDescarregamento.setOpaque(true);

        jPnlAquaInfoTermDescarreg.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Informações do Terminais de Descarregamento (Máximo de 5)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N
        jPnlAquaInfoTermDescarreg.setToolTipText("");

        jTableAquaInfoTermDescarreg.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Código", "Nome Terminal de Descarregamento"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableAquaInfoTermDescarreg.getTableHeader().setReorderingAllowed(false);
        jTableAquaInfoTermDescarreg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableAquaInfoTermDescarregMouseReleased(evt);
            }
        });
        jTableAquaInfoTermDescarreg.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableAquaInfoTermDescarregPropertyChange(evt);
            }
        });
        jScrollPane10.setViewportView(jTableAquaInfoTermDescarreg);

        javax.swing.GroupLayout jPnlAquaInfoTermDescarregLayout = new javax.swing.GroupLayout(jPnlAquaInfoTermDescarreg);
        jPnlAquaInfoTermDescarreg.setLayout(jPnlAquaInfoTermDescarregLayout);
        jPnlAquaInfoTermDescarregLayout.setHorizontalGroup(
            jPnlAquaInfoTermDescarregLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
        );
        jPnlAquaInfoTermDescarregLayout.setVerticalGroup(
            jPnlAquaInfoTermDescarregLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlAquaInfoTermDescarregLayout.createSequentialGroup()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                .addGap(3, 3, 3))
        );

        jBtIncluirInfoTermDescarreg.setText("Incluir");
        jBtIncluirInfoTermDescarreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIncluirInfoTermDescarregActionPerformed(evt);
            }
        });

        jBtExcluirInfoTermDescarreg.setText("Excluir");
        jBtExcluirInfoTermDescarreg.setEnabled(false);
        jBtExcluirInfoTermDescarreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirInfoTermDescarregActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TabTerminalDescarregamentoLayout = new javax.swing.GroupLayout(TabTerminalDescarregamento);
        TabTerminalDescarregamento.setLayout(TabTerminalDescarregamentoLayout);
        TabTerminalDescarregamentoLayout.setHorizontalGroup(
            TabTerminalDescarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabTerminalDescarregamentoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TabTerminalDescarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(TabTerminalDescarregamentoLayout.createSequentialGroup()
                        .addGroup(TabTerminalDescarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel78, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(TabTerminalDescarregamentoLayout.createSequentialGroup()
                                .addComponent(jFldAquaCodTermDescarreg, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBtBuscaTerminalDescarreg)))
                        .addGap(16, 16, 16)
                        .addGroup(TabTerminalDescarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel81, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblNomeTerminalDescarregamento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(TabTerminalDescarregamentoLayout.createSequentialGroup()
                        .addComponent(jBtIncluirInfoTermDescarreg)
                        .addGap(12, 12, 12)
                        .addComponent(jBtExcluirInfoTermDescarreg))
                    .addComponent(jPnlAquaInfoTermDescarreg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(561, Short.MAX_VALUE))
        );
        TabTerminalDescarregamentoLayout.setVerticalGroup(
            TabTerminalDescarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabTerminalDescarregamentoLayout.createSequentialGroup()
                .addGroup(TabTerminalDescarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel78)
                    .addGroup(TabTerminalDescarregamentoLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(TabTerminalDescarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jFldAquaCodTermDescarreg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtBuscaTerminalDescarreg)))
                    .addGroup(TabTerminalDescarregamentoLayout.createSequentialGroup()
                        .addComponent(jLabel81)
                        .addGap(2, 2, 2)
                        .addComponent(jLblNomeTerminalDescarregamento, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(2, 2, 2)
                .addComponent(jPnlAquaInfoTermDescarreg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TabTerminalDescarregamentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtIncluirInfoTermDescarreg)
                    .addComponent(jBtExcluirInfoTermDescarreg))
                .addContainerGap())
        );

        jTabEditInfoCargaAquaviario.addTab("Terminais de Descarregamento", TabTerminalDescarregamento);

        jLabel82.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel82.setText("*Código da Embarcação de Comboio");

        jFldAquaCodEmbComboio.setDocument(new LimitaField(10, 2));
        jFldAquaCodEmbComboio.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldAquaCodEmbComboio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldAquaCodEmbComboioActionPerformed(evt);
            }
        });
        jFldAquaCodEmbComboio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldAquaCodEmbComboioKeyPressed(evt);
            }
        });

        jPnlAquaInfoEmbComboio.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Informações do Embarcações de Comboio (Máximo de 30)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N
        jPnlAquaInfoEmbComboio.setToolTipText("");

        jTableAquaInfoEmbComboio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Código  Terminal Comboio","Id. Balsa","Nome da Balsa"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableAquaInfoEmbComboio.getTableHeader().setReorderingAllowed(false);
        jTableAquaInfoEmbComboio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableAquaInfoEmbComboioMouseReleased(evt);
            }
        });
        jTableAquaInfoEmbComboio.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableAquaInfoEmbComboioPropertyChange(evt);
            }
        });
        jScrollPane11.setViewportView(jTableAquaInfoEmbComboio);

        javax.swing.GroupLayout jPnlAquaInfoEmbComboioLayout = new javax.swing.GroupLayout(jPnlAquaInfoEmbComboio);
        jPnlAquaInfoEmbComboio.setLayout(jPnlAquaInfoEmbComboioLayout);
        jPnlAquaInfoEmbComboioLayout.setHorizontalGroup(
            jPnlAquaInfoEmbComboioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane11)
        );
        jPnlAquaInfoEmbComboioLayout.setVerticalGroup(
            jPnlAquaInfoEmbComboioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
        );

        jBtIncluirInfoEmbComboio.setText("Incluir");
        jBtIncluirInfoEmbComboio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIncluirInfoEmbComboioActionPerformed(evt);
            }
        });

        jBtExcluirInfoEmbComboio.setText("Excluir");
        jBtExcluirInfoEmbComboio.setEnabled(false);
        jBtExcluirInfoEmbComboio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirInfoEmbComboioActionPerformed(evt);
            }
        });

        jLabel142.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel142.setText("*Código ");

        jFldAquaCodBalsa.setDocument(new LimitaField(5, 1)
        );
        jFldAquaCodBalsa.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldAquaCodBalsa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldAquaCodBalsaFocusLost(evt);
            }
        });
        jFldAquaCodBalsa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldAquaCodBalsaActionPerformed(evt);
            }
        });
        jFldAquaCodBalsa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldAquaCodBalsaKeyPressed(evt);
            }
        });

        jBtBuscaBalsa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaBalsa.setText("F11");
        jBtBuscaBalsa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaBalsaActionPerformed(evt);
            }
        });

        jLblAquaNomeBalsa.setBackground(new java.awt.Color(255, 255, 204));
        jLblAquaNomeBalsa.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblAquaNomeBalsa.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblAquaNomeBalsa.setOpaque(true);

        jLabel143.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel143.setText("Nome da Balsa");

        javax.swing.GroupLayout TabEmbarcacaoComboioLayout = new javax.swing.GroupLayout(TabEmbarcacaoComboio);
        TabEmbarcacaoComboio.setLayout(TabEmbarcacaoComboioLayout);
        TabEmbarcacaoComboioLayout.setHorizontalGroup(
            TabEmbarcacaoComboioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabEmbarcacaoComboioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TabEmbarcacaoComboioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(TabEmbarcacaoComboioLayout.createSequentialGroup()
                        .addComponent(jBtIncluirInfoEmbComboio)
                        .addGap(12, 12, 12)
                        .addComponent(jBtExcluirInfoEmbComboio))
                    .addGroup(TabEmbarcacaoComboioLayout.createSequentialGroup()
                        .addGroup(TabEmbarcacaoComboioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(TabEmbarcacaoComboioLayout.createSequentialGroup()
                                .addGroup(TabEmbarcacaoComboioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel142)
                                    .addComponent(jFldAquaCodBalsa, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(5, 5, 5)
                                .addComponent(jBtBuscaBalsa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel82, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(TabEmbarcacaoComboioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFldAquaCodEmbComboio, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblAquaNomeBalsa, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel143, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPnlAquaInfoEmbComboio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(569, Short.MAX_VALUE))
        );
        TabEmbarcacaoComboioLayout.setVerticalGroup(
            TabEmbarcacaoComboioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabEmbarcacaoComboioLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(TabEmbarcacaoComboioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel82)
                    .addComponent(jFldAquaCodEmbComboio, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(TabEmbarcacaoComboioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TabEmbarcacaoComboioLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(TabEmbarcacaoComboioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(TabEmbarcacaoComboioLayout.createSequentialGroup()
                                .addComponent(jLabel142)
                                .addGap(1, 1, 1)
                                .addComponent(jFldAquaCodBalsa, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(TabEmbarcacaoComboioLayout.createSequentialGroup()
                                .addComponent(jLabel143)
                                .addGap(2, 2, 2)
                                .addComponent(jLblAquaNomeBalsa, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2))))
                    .addGroup(TabEmbarcacaoComboioLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jBtBuscaBalsa, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPnlAquaInfoEmbComboio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TabEmbarcacaoComboioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBtExcluirInfoEmbComboio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBtIncluirInfoEmbComboio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabEditInfoCargaAquaviario.addTab("Embarcações de Comboio", TabEmbarcacaoComboio);

        jLabel84.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel84.setText("Código");

        jFldAquaIdentUnCarga.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldAquaIdentUnCarga.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldAquaIdentUnCargaFocusLost(evt);
            }
        });
        jFldAquaIdentUnCarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldAquaIdentUnCargaActionPerformed(evt);
            }
        });
        jFldAquaIdentUnCarga.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldAquaIdentUnCargaKeyPressed(evt);
            }
        });

        jBtBuscaUnCarga.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaUnCarga.setText("F11");
        jBtBuscaUnCarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaUnCargaActionPerformed(evt);
            }
        });

        jLabel83.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel83.setText("Tipo da Unidade de Carga");

        jLblAquaTpUnCarga.setBackground(new java.awt.Color(255, 255, 204));
        jLblAquaTpUnCarga.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblAquaTpUnCarga.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblAquaTpUnCarga.setOpaque(true);

        jPnlAquaInfoUnCargaVazia.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Informações das Unidades de Carga Vazias", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N
        jPnlAquaInfoUnCargaVazia.setToolTipText("");

        jTableAquanInfUnVazia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Identificação da Unidade de Carga", "Tipo da Unidade de Carga"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableAquanInfUnVazia.getTableHeader().setReorderingAllowed(false);
        jTableAquanInfUnVazia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableAquanInfUnVaziaMouseReleased(evt);
            }
        });
        jScrollPane12.setViewportView(jTableAquanInfUnVazia);

        javax.swing.GroupLayout jPnlAquaInfoUnCargaVaziaLayout = new javax.swing.GroupLayout(jPnlAquaInfoUnCargaVazia);
        jPnlAquaInfoUnCargaVazia.setLayout(jPnlAquaInfoUnCargaVaziaLayout);
        jPnlAquaInfoUnCargaVaziaLayout.setHorizontalGroup(
            jPnlAquaInfoUnCargaVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPnlAquaInfoUnCargaVaziaLayout.setVerticalGroup(
            jPnlAquaInfoUnCargaVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlAquaInfoUnCargaVaziaLayout.createSequentialGroup()
                .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                .addGap(3, 3, 3))
        );

        jBtIncluirInfoUnCargaVazia.setText("Incluir");
        jBtIncluirInfoUnCargaVazia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIncluirInfoUnCargaVaziaActionPerformed(evt);
            }
        });

        jBtExcluirInfoUnCargaVazia.setText("Excluir");
        jBtExcluirInfoUnCargaVazia.setEnabled(false);
        jBtExcluirInfoUnCargaVazia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirInfoUnCargaVaziaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TabUnidadeCargaVaziaLayout = new javax.swing.GroupLayout(TabUnidadeCargaVazia);
        TabUnidadeCargaVazia.setLayout(TabUnidadeCargaVaziaLayout);
        TabUnidadeCargaVaziaLayout.setHorizontalGroup(
            TabUnidadeCargaVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabUnidadeCargaVaziaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TabUnidadeCargaVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(TabUnidadeCargaVaziaLayout.createSequentialGroup()
                        .addGroup(TabUnidadeCargaVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel84, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(TabUnidadeCargaVaziaLayout.createSequentialGroup()
                                .addComponent(jFldAquaIdentUnCarga, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtBuscaUnCarga)))
                        .addGap(8, 8, 8)
                        .addGroup(TabUnidadeCargaVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel83, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblAquaTpUnCarga, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPnlAquaInfoUnCargaVazia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(TabUnidadeCargaVaziaLayout.createSequentialGroup()
                        .addComponent(jBtIncluirInfoUnCargaVazia)
                        .addGap(12, 12, 12)
                        .addComponent(jBtExcluirInfoUnCargaVazia)))
                .addContainerGap(611, Short.MAX_VALUE))
        );
        TabUnidadeCargaVaziaLayout.setVerticalGroup(
            TabUnidadeCargaVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabUnidadeCargaVaziaLayout.createSequentialGroup()
                .addGroup(TabUnidadeCargaVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TabUnidadeCargaVaziaLayout.createSequentialGroup()
                        .addComponent(jLabel84)
                        .addGap(2, 2, 2)
                        .addGroup(TabUnidadeCargaVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jFldAquaIdentUnCarga, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtBuscaUnCarga)))
                    .addGroup(TabUnidadeCargaVaziaLayout.createSequentialGroup()
                        .addComponent(jLabel83)
                        .addGap(2, 2, 2)
                        .addComponent(jLblAquaTpUnCarga, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(2, 2, 2)
                .addComponent(jPnlAquaInfoUnCargaVazia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TabUnidadeCargaVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtIncluirInfoUnCargaVazia)
                    .addComponent(jBtExcluirInfoUnCargaVazia))
                .addContainerGap())
        );

        jTabEditInfoCargaAquaviario.addTab("Unidades de Cargas Vazias", TabUnidadeCargaVazia);

        jLabel140.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel140.setText("Código");

        jFldAquaIdUnidTranspVazia.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldAquaIdUnidTranspVazia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldAquaIdUnidTranspVaziaFocusLost(evt);
            }
        });
        jFldAquaIdUnidTranspVazia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldAquaIdUnidTranspVaziaActionPerformed(evt);
            }
        });
        jFldAquaIdUnidTranspVazia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldAquaIdUnidTranspVaziaKeyPressed(evt);
            }
        });

        jBtBuscaUnidTranspVazia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaUnidTranspVazia.setText("F11");
        jBtBuscaUnidTranspVazia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaUnidTranspVaziaActionPerformed(evt);
            }
        });

        jLblAquaTpUnidTranspVazia.setBackground(new java.awt.Color(255, 255, 204));
        jLblAquaTpUnidTranspVazia.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblAquaTpUnidTranspVazia.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblAquaTpUnidTranspVazia.setOpaque(true);

        jLabel141.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel141.setText("Tipo da Unidade de Transporte Vazia");

        jPnlAquaInfoUnCargaVazia1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Informações das  Unidade de Transporte Vazia", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N
        jPnlAquaInfoUnCargaVazia1.setToolTipText("");

        jTableAquanInfUnidTranspVazia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Identificação ", "Tipo da Unidade Trans Vazia"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableAquanInfUnidTranspVazia.getTableHeader().setReorderingAllowed(false);
        jTableAquanInfUnidTranspVazia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableAquanInfUnidTranspVaziaMouseReleased(evt);
            }
        });
        jScrollPane23.setViewportView(jTableAquanInfUnidTranspVazia);

        javax.swing.GroupLayout jPnlAquaInfoUnCargaVazia1Layout = new javax.swing.GroupLayout(jPnlAquaInfoUnCargaVazia1);
        jPnlAquaInfoUnCargaVazia1.setLayout(jPnlAquaInfoUnCargaVazia1Layout);
        jPnlAquaInfoUnCargaVazia1Layout.setHorizontalGroup(
            jPnlAquaInfoUnCargaVazia1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane23, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPnlAquaInfoUnCargaVazia1Layout.setVerticalGroup(
            jPnlAquaInfoUnCargaVazia1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlAquaInfoUnCargaVazia1Layout.createSequentialGroup()
                .addComponent(jScrollPane23, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                .addGap(3, 3, 3))
        );

        jBtIncluirInfoUnidTranspVazia.setText("Incluir");
        jBtIncluirInfoUnidTranspVazia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIncluirInfoUnidTranspVaziaActionPerformed(evt);
            }
        });

        jBtExcluirInfoUnCargaVazia1.setText("Excluir");
        jBtExcluirInfoUnCargaVazia1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirInfoUnCargaVazia1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TabUnidTranspVaziaLayout = new javax.swing.GroupLayout(TabUnidTranspVazia);
        TabUnidTranspVazia.setLayout(TabUnidTranspVaziaLayout);
        TabUnidTranspVaziaLayout.setHorizontalGroup(
            TabUnidTranspVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabUnidTranspVaziaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TabUnidTranspVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(TabUnidTranspVaziaLayout.createSequentialGroup()
                        .addGroup(TabUnidTranspVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel140, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(TabUnidTranspVaziaLayout.createSequentialGroup()
                                .addComponent(jFldAquaIdUnidTranspVazia, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtBuscaUnidTranspVazia)))
                        .addGap(8, 8, 8)
                        .addGroup(TabUnidTranspVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblAquaTpUnidTranspVazia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(TabUnidTranspVaziaLayout.createSequentialGroup()
                                .addComponent(jLabel141, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jPnlAquaInfoUnCargaVazia1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(TabUnidTranspVaziaLayout.createSequentialGroup()
                        .addComponent(jBtIncluirInfoUnidTranspVazia)
                        .addGap(12, 12, 12)
                        .addComponent(jBtExcluirInfoUnCargaVazia1)))
                .addContainerGap(611, Short.MAX_VALUE))
        );
        TabUnidTranspVaziaLayout.setVerticalGroup(
            TabUnidTranspVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabUnidTranspVaziaLayout.createSequentialGroup()
                .addGroup(TabUnidTranspVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TabUnidTranspVaziaLayout.createSequentialGroup()
                        .addComponent(jLabel140)
                        .addGap(2, 2, 2)
                        .addGroup(TabUnidTranspVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jFldAquaIdUnidTranspVazia, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtBuscaUnidTranspVazia)))
                    .addGroup(TabUnidTranspVaziaLayout.createSequentialGroup()
                        .addComponent(jLabel141)
                        .addGap(2, 2, 2)
                        .addComponent(jLblAquaTpUnidTranspVazia, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(2, 2, 2)
                .addComponent(jPnlAquaInfoUnCargaVazia1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TabUnidTranspVaziaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtIncluirInfoUnidTranspVazia)
                    .addComponent(jBtExcluirInfoUnCargaVazia1))
                .addGap(2, 2, 2))
        );

        jTabEditInfoCargaAquaviario.addTab(" Unidade de Transporte Vazia", TabUnidTranspVazia);

        jLblAquaIRIN.setBackground(new java.awt.Color(255, 255, 204));
        jLblAquaIRIN.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblAquaIRIN.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblAquaIRIN.setOpaque(true);

        jLabel138.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel138.setText("IRIN");

        jBtBuscaPrtEmbarque.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaPrtEmbarque.setText("F11");
        jBtBuscaPrtEmbarque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaPrtEmbarqueActionPerformed(evt);
            }
        });

        jLblAquaNomePrtEmbarque.setBackground(new java.awt.Color(255, 255, 204));
        jLblAquaNomePrtEmbarque.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblAquaNomePrtEmbarque.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblAquaNomePrtEmbarque.setOpaque(true);

        jLabel139.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel139.setText("Nome do Porto Embarque");

        jBtBuscaPrtDestino.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaPrtDestino.setText("F11");
        jBtBuscaPrtDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaPrtDestinoActionPerformed(evt);
            }
        });

        jLblAquaNomePrtDestino.setBackground(new java.awt.Color(255, 255, 204));
        jLblAquaNomePrtDestino.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblAquaNomePrtDestino.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblAquaNomePrtDestino.setOpaque(true);

        jLabel144.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel144.setText("Nome do Porto de Destino");

        jLabel145.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel145.setText("Código ");

        jFldAquaCodPrtTrans.setDocument(new LimitaField(5, 1)
        );
        jFldAquaCodPrtTrans.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldAquaCodPrtTrans.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldAquaCodPrtTransFocusLost(evt);
            }
        });
        jFldAquaCodPrtTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldAquaCodPrtTransActionPerformed(evt);
            }
        });
        jFldAquaCodPrtTrans.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldAquaCodPrtTransKeyPressed(evt);
            }
        });

        jBtBuscaPrtDestino2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaPrtDestino2.setText("F11");
        jBtBuscaPrtDestino2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaPrtDestino2ActionPerformed(evt);
            }
        });

        jLblAquaNomePrtTrans.setBackground(new java.awt.Color(255, 255, 204));
        jLblAquaNomePrtTrans.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblAquaNomePrtTrans.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblAquaNomePrtTrans.setOpaque(true);

        jLabel146.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel146.setText("Nome do Porto de Transbordo");

        jFldAquaCodInterno.setDocument(new LimitaField(10, 2)
        );
        jFldAquaCodInterno.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jFldAquaCodInterno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldAquaCodInternoActionPerformed(evt);
            }
        });
        jFldAquaCodInterno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldAquaCodInternoKeyPressed(evt);
            }
        });

        jCmbBxTpNavegacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Interior", "Cabotagem" }));
        jCmbBxTpNavegacao.setSelectedIndex(-1);

        jLabel69.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel69.setText("Tipo de Navegação");
        jLabel69.setToolTipText("");

        javax.swing.GroupLayout jPnlAquaviarioLayout = new javax.swing.GroupLayout(jPnlAquaviario);
        jPnlAquaviario.setLayout(jPnlAquaviarioLayout);
        jPnlAquaviarioLayout.setHorizontalGroup(
            jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                        .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                                        .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel73)
                                            .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                                                .addComponent(jFldAquaIdEmb, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(5, 5, 5)
                                                .addComponent(jBtBuscaEmbarca)))
                                        .addGap(5, 5, 5)
                                        .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel113, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLblAquaNomeEmbarcacao, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                                        .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jFldAquaCodPrtEmbarque, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel79, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(5, 5, 5)
                                        .addComponent(jBtBuscaPrtEmbarque)
                                        .addGap(5, 5, 5)
                                        .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLblAquaNomePrtEmbarque, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel139, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(23, 23, 23)
                                .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                                        .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel72, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLblAquaTpEmb, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel138, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLblAquaIRIN, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jFldAquaCodInterno, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                                        .addComponent(jLabel74, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel69, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                                        .addComponent(jFldAquaNrViagem, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jCmbBxTpNavegacao, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel77)
                                    .addComponent(jFldAquaCodPrtDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(5, 5, 5)
                                .addComponent(jBtBuscaPrtDestino)
                                .addGap(5, 5, 5)
                                .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLblAquaNomePrtDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel144, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTabEditInfoCargaAquaviario)
                            .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                                .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel145)
                                    .addComponent(jFldAquaCodPrtTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(5, 5, 5)
                                .addComponent(jBtBuscaPrtDestino2)
                                .addGap(5, 5, 5)
                                .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLblAquaNomePrtTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel146, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPnlAquaviarioLayout.setVerticalGroup(
            jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel73)
                        .addGap(0, 0, 0)
                        .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jFldAquaIdEmb, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtBuscaEmbarca, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                        .addComponent(jLabel113)
                        .addGap(2, 2, 2)
                        .addComponent(jLblAquaNomeEmbarcacao, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                            .addComponent(jLabel138)
                            .addGap(2, 2, 2)
                            .addComponent(jLblAquaIRIN, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                            .addComponent(jLabel72)
                            .addGap(2, 2, 2)
                            .addComponent(jLblAquaTpEmb, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                        .addComponent(jLabel79)
                        .addGap(1, 1, 1)
                        .addComponent(jFldAquaCodPrtEmbarque, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jBtBuscaPrtEmbarque, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jFldAquaCodInterno, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                            .addComponent(jLabel139)
                            .addGap(2, 2, 2)
                            .addComponent(jLblAquaNomePrtEmbarque, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                        .addComponent(jLabel77)
                        .addGap(1, 1, 1)
                        .addComponent(jFldAquaCodPrtDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                            .addGap(17, 17, 17)
                            .addComponent(jBtBuscaPrtDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                            .addComponent(jLabel144)
                            .addGap(2, 2, 2)
                            .addComponent(jLblAquaNomePrtDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                        .addComponent(jLabel145)
                        .addGap(1, 1, 1)
                        .addComponent(jFldAquaCodPrtTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                            .addGap(17, 17, 17)
                            .addComponent(jBtBuscaPrtDestino2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                                .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel74)
                                    .addComponent(jLabel69))
                                .addGap(1, 1, 1)
                                .addGroup(jPnlAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jFldAquaNrViagem, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jCmbBxTpNavegacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPnlAquaviarioLayout.createSequentialGroup()
                                .addComponent(jLabel146)
                                .addGap(2, 2, 2)
                                .addComponent(jLblAquaNomePrtTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabEditInfoCargaAquaviario, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout TabInfoAquaviarioLayout = new javax.swing.GroupLayout(TabInfoAquaviario);
        TabInfoAquaviario.setLayout(TabInfoAquaviarioLayout);
        TabInfoAquaviarioLayout.setHorizontalGroup(
            TabInfoAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlAquaviario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        TabInfoAquaviarioLayout.setVerticalGroup(
            TabInfoAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlAquaviario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabEditInfoAquaviario.addTab("Informações de Aquaviário", TabInfoAquaviario);

        javax.swing.GroupLayout TabAquaviarioLayout = new javax.swing.GroupLayout(TabAquaviario);
        TabAquaviario.setLayout(TabAquaviarioLayout);
        TabAquaviarioLayout.setHorizontalGroup(
            TabAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabEditInfoAquaviario)
        );
        TabAquaviarioLayout.setVerticalGroup(
            TabAquaviarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabAquaviarioLayout.createSequentialGroup()
                .addComponent(jTabEditInfoAquaviario, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                .addGap(2, 2, 2))
        );

        jTabEdit.addTab("Aquaviário", TabAquaviario);

        jCmbBxDocMunDocumento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCmbBxDocMunDocumentoItemStateChanged(evt);
            }
        });
        jCmbBxDocMunDocumento.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jCmbBxDocMunDocumentoPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jCmbBxDocMunDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbBxDocMunDocumentoActionPerformed(evt);
            }
        });
        jCmbBxDocMunDocumento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxDocMunDocumentoKeyPressed(evt);
            }
        });

        jLabel86.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel86.setText("*Município");

        jCmbBxDocUfMunDocumento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCmbBxDocUfMunDocumentoItemStateChanged(evt);
            }
        });
        jCmbBxDocUfMunDocumento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jCmbBxDocUfMunDocumentoFocusLost(evt);
            }
        });
        jCmbBxDocUfMunDocumento.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
                jCmbBxDocUfMunDocumentoPopupMenuCanceled(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jCmbBxDocUfMunDocumentoPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jCmbBxDocUfMunDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbBxDocUfMunDocumentoActionPerformed(evt);
            }
        });
        jCmbBxDocUfMunDocumento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxDocUfMunDocumentoKeyPressed(evt);
            }
        });

        jLabel85.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel85.setText("*UF");

        jLabel87.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel87.setText("Selecione a UF e Município que Deseja Associar aos Documentos");

        javax.swing.GroupLayout jPnlDocUfMunLayout = new javax.swing.GroupLayout(jPnlDocUfMun);
        jPnlDocUfMun.setLayout(jPnlDocUfMunLayout);
        jPnlDocUfMunLayout.setHorizontalGroup(
            jPnlDocUfMunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDocUfMunLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlDocUfMunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlDocUfMunLayout.createSequentialGroup()
                        .addComponent(jLabel85, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCmbBxDocUfMunDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jLabel86, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCmbBxDocMunDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel87, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPnlDocUfMunLayout.setVerticalGroup(
            jPnlDocUfMunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnlDocUfMunLayout.createSequentialGroup()
                .addComponent(jLabel87)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPnlDocUfMunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCmbBxDocUfMunDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel85)
                    .addComponent(jLabel86)
                    .addComponent(jCmbBxDocMunDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        jTabEditInformacoesDocumento.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabEditInformacoesDocumentoStateChanged(evt);
            }
        });

        jPnlUfMunDescarreg.setLayout(null);

        jLabel88.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel88.setText("*UF");
        jPnlUfMunDescarreg.add(jLabel88);
        jLabel88.setBounds(12, 17, 40, 13);

        jCmbBxDocUfMunDescarreg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jCmbBxDocUfMunDescarregFocusLost(evt);
            }
        });
        jCmbBxDocUfMunDescarreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbBxDocUfMunDescarregActionPerformed(evt);
            }
        });
        jCmbBxDocUfMunDescarreg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxDocUfMunDescarregKeyPressed(evt);
            }
        });
        jPnlUfMunDescarreg.add(jCmbBxDocUfMunDescarreg);
        jCmbBxDocUfMunDescarreg.setBounds(50, 15, 60, 20);

        jLabel89.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel89.setText("*Município");
        jPnlUfMunDescarreg.add(jLabel89);
        jLabel89.setBounds(179, 17, 70, 13);

        jCmbBxDocMunDescarreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCmbBxDocMunDescarregActionPerformed(evt);
            }
        });
        jCmbBxDocMunDescarreg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxDocMunDescarregKeyPressed(evt);
            }
        });
        jPnlUfMunDescarreg.add(jCmbBxDocMunDescarreg);
        jCmbBxDocMunDescarreg.setBounds(253, 12, 180, 20);

        jLblAviso.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLblAviso.setForeground(new java.awt.Color(204, 0, 0));
        jLblAviso.setText("*Para inserir os municípios de descarregamento é necessário escolher um local de descarregamento na aba dados");
        jPnlUfMunDescarreg.add(jLblAviso);
        jLblAviso.setBounds(460, 10, 579, 13);

        jBtDocIncuirMunDescarreg.setText("Incluir");
        jBtDocIncuirMunDescarreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtDocIncuirMunDescarregActionPerformed(evt);
            }
        });

        jBtDocExcluirMunDescarreg.setText("Excluir");
        jBtDocExcluirMunDescarreg.setEnabled(false);
        jBtDocExcluirMunDescarreg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtDocExcluirMunDescarregActionPerformed(evt);
            }
        });

        jPnlDocMunDescarreg.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "(100 no Máximo)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jTableDocMunDescarreg.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "UF", "Município", "Cod. Município"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableDocMunDescarreg.getTableHeader().setReorderingAllowed(false);
        jTableDocMunDescarreg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableDocMunDescarregMouseReleased(evt);
            }
        });
        jScrollPane13.setViewportView(jTableDocMunDescarreg);

        javax.swing.GroupLayout jPnlDocMunDescarregLayout = new javax.swing.GroupLayout(jPnlDocMunDescarreg);
        jPnlDocMunDescarreg.setLayout(jPnlDocMunDescarregLayout);
        jPnlDocMunDescarregLayout.setHorizontalGroup(
            jPnlDocMunDescarregLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDocMunDescarregLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 1139, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        jPnlDocMunDescarregLayout.setVerticalGroup(
            jPnlDocMunDescarregLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDocMunDescarregLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout TabMunicipiosDescarregLayout = new javax.swing.GroupLayout(TabMunicipiosDescarreg);
        TabMunicipiosDescarreg.setLayout(TabMunicipiosDescarregLayout);
        TabMunicipiosDescarregLayout.setHorizontalGroup(
            TabMunicipiosDescarregLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlUfMunDescarreg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPnlDocMunDescarreg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(TabMunicipiosDescarregLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBtDocIncuirMunDescarreg)
                .addGap(12, 12, 12)
                .addComponent(jBtDocExcluirMunDescarreg)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        TabMunicipiosDescarregLayout.setVerticalGroup(
            TabMunicipiosDescarregLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabMunicipiosDescarregLayout.createSequentialGroup()
                .addComponent(jPnlUfMunDescarreg, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPnlDocMunDescarreg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TabMunicipiosDescarregLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtDocIncuirMunDescarreg)
                    .addComponent(jBtDocExcluirMunDescarreg))
                .addContainerGap())
        );

        jTabEditInformacoesDocumento.addTab("Municípios de Descarregamentos", TabMunicipiosDescarreg);

        jPnlDocCte.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "CT-e's", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jPnlDocQtdCte.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Documentos (2000 no Máximo)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jTableDocCte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Código", "Chave de Acesso", "Código de Barras", "Indicador de Reentrega", "Quantidade de Unidade de Transporte", "UF", "Cód. Município", "Município"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class,  java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
                , java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,
                java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableDocCte.getTableHeader().setReorderingAllowed(false);
        jTableDocCte.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableDocCteMouseReleased(evt);
            }
        });
        jTableDocCte.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableDocCtePropertyChange(evt);
            }
        });
        jScrollPane14.setViewportView(jTableDocCte);

        jBtDocIncluirCte.setText("Incluir");
        jBtDocIncluirCte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtDocIncluirCteActionPerformed(evt);
            }
        });

        jBtDocExcluirCte.setText("Excluir");
        jBtDocExcluirCte.setEnabled(false);
        jBtDocExcluirCte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtDocExcluirCteActionPerformed(evt);
            }
        });

        jBtDocEditarCte.setText("Editar");
        jBtDocEditarCte.setEnabled(false);
        jBtDocEditarCte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtDocEditarCteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlDocQtdCteLayout = new javax.swing.GroupLayout(jPnlDocQtdCte);
        jPnlDocQtdCte.setLayout(jPnlDocQtdCteLayout);
        jPnlDocQtdCteLayout.setHorizontalGroup(
            jPnlDocQtdCteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDocQtdCteLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPnlDocQtdCteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane14)
                    .addGroup(jPnlDocQtdCteLayout.createSequentialGroup()
                        .addComponent(jBtDocIncluirCte)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtDocEditarCte)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtDocExcluirCte)
                        .addContainerGap(977, Short.MAX_VALUE))))
        );
        jPnlDocQtdCteLayout.setVerticalGroup(
            jPnlDocQtdCteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDocQtdCteLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addGap(8, 8, 8)
                .addGroup(jPnlDocQtdCteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtDocIncluirCte)
                    .addComponent(jBtDocExcluirCte)
                    .addComponent(jBtDocEditarCte))
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout jPnlDocCteLayout = new javax.swing.GroupLayout(jPnlDocCte);
        jPnlDocCte.setLayout(jPnlDocCteLayout);
        jPnlDocCteLayout.setHorizontalGroup(
            jPnlDocCteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDocCteLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPnlDocQtdCte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        jPnlDocCteLayout.setVerticalGroup(
            jPnlDocCteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDocCteLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPnlDocQtdCte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout TabCTeLayout = new javax.swing.GroupLayout(TabCTe);
        TabCTe.setLayout(TabCTeLayout);
        TabCTeLayout.setHorizontalGroup(
            TabCTeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlDocCte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        TabCTeLayout.setVerticalGroup(
            TabCTeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabCTeLayout.createSequentialGroup()
                .addComponent(jPnlDocCte, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(3, 3, 3))
        );

        jTabEditInformacoesDocumento.addTab("Conhecimento de Transporte (Eletrônico)", TabCTe);

        jPnlDocNFe.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "NF-e's", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jPnlDocQtdNFe.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Documentos (2000 no Máximo)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jTableDocNFe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Código", "Chave de Acesso", "Código de Barras", "Indicador de Reentrega", "Quantidade de Unidade de Transporte", "UF", "Cód. Município", "Município"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class,  java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
                , java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,
                java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableDocNFe.getTableHeader().setReorderingAllowed(false);
        jTableDocNFe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableDocNFeMouseReleased(evt);
            }
        });
        jTableDocNFe.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableDocNFePropertyChange(evt);
            }
        });
        jScrollPane15.setViewportView(jTableDocNFe);

        jBtDocIncluirNfe.setText("Incluir");
        jBtDocIncluirNfe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtDocIncluirNfeActionPerformed(evt);
            }
        });

        jBtDocExcluirNfe.setText("Excluir");
        jBtDocExcluirNfe.setEnabled(false);
        jBtDocExcluirNfe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtDocExcluirNfeActionPerformed(evt);
            }
        });

        jBtDocEditarNfe.setText("Editar");
        jBtDocEditarNfe.setEnabled(false);
        jBtDocEditarNfe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtDocEditarNfeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlDocQtdNFeLayout = new javax.swing.GroupLayout(jPnlDocQtdNFe);
        jPnlDocQtdNFe.setLayout(jPnlDocQtdNFeLayout);
        jPnlDocQtdNFeLayout.setHorizontalGroup(
            jPnlDocQtdNFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDocQtdNFeLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPnlDocQtdNFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 1124, Short.MAX_VALUE)
                    .addGroup(jPnlDocQtdNFeLayout.createSequentialGroup()
                        .addComponent(jBtDocIncluirNfe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtDocEditarNfe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtDocExcluirNfe)
                        .addContainerGap())))
        );
        jPnlDocQtdNFeLayout.setVerticalGroup(
            jPnlDocQtdNFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDocQtdNFeLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPnlDocQtdNFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtDocIncluirNfe)
                    .addComponent(jBtDocExcluirNfe)
                    .addComponent(jBtDocEditarNfe))
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout jPnlDocNFeLayout = new javax.swing.GroupLayout(jPnlDocNFe);
        jPnlDocNFe.setLayout(jPnlDocNFeLayout);
        jPnlDocNFeLayout.setHorizontalGroup(
            jPnlDocNFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDocNFeLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPnlDocQtdNFe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        jPnlDocNFeLayout.setVerticalGroup(
            jPnlDocNFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDocNFeLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPnlDocQtdNFe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout TabNFeLayout = new javax.swing.GroupLayout(TabNFe);
        TabNFe.setLayout(TabNFeLayout);
        TabNFeLayout.setHorizontalGroup(
            TabNFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlDocNFe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        TabNFeLayout.setVerticalGroup(
            TabNFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabNFeLayout.createSequentialGroup()
                .addComponent(jPnlDocNFe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        jTabEditInformacoesDocumento.addTab("Nota Fiscal Eletrônica", TabNFe);

        jPnlDocMDFe.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "MDF-e's", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jPnlDocQtdMDFe.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Documentos (2000 no Máximo)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jTableDocMDFe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Código", "Chave de Acesso", "Código de Barras", "Indicador de Reentrega", "Quantidade de Unidade de Transporte", "UF", "Cód. Município", "Município"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class,  java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
                , java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,
                java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableDocMDFe.getTableHeader().setReorderingAllowed(false);
        jTableDocMDFe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableDocMDFeMouseReleased(evt);
            }
        });
        jTableDocMDFe.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableDocMDFePropertyChange(evt);
            }
        });
        jScrollPane16.setViewportView(jTableDocMDFe);

        jBtDocIncluirMDFe.setText("Incluir");
        jBtDocIncluirMDFe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtDocIncluirMDFeActionPerformed(evt);
            }
        });

        jBtDocExcluirMDFe.setText("Excluir");
        jBtDocExcluirMDFe.setEnabled(false);
        jBtDocExcluirMDFe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtDocExcluirMDFeActionPerformed(evt);
            }
        });

        jBtDocEditarMDFe.setText("Editar");
        jBtDocEditarMDFe.setEnabled(false);
        jBtDocEditarMDFe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtDocEditarMDFeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlDocQtdMDFeLayout = new javax.swing.GroupLayout(jPnlDocQtdMDFe);
        jPnlDocQtdMDFe.setLayout(jPnlDocQtdMDFeLayout);
        jPnlDocQtdMDFeLayout.setHorizontalGroup(
            jPnlDocQtdMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDocQtdMDFeLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPnlDocQtdMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 1119, Short.MAX_VALUE)
                    .addGroup(jPnlDocQtdMDFeLayout.createSequentialGroup()
                        .addComponent(jBtDocIncluirMDFe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtDocEditarMDFe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtDocExcluirMDFe)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(5, 5, 5))
        );
        jPnlDocQtdMDFeLayout.setVerticalGroup(
            jPnlDocQtdMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDocQtdMDFeLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addGap(5, 5, 5)
                .addGroup(jPnlDocQtdMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtDocIncluirMDFe)
                    .addComponent(jBtDocExcluirMDFe)
                    .addComponent(jBtDocEditarMDFe))
                .addGap(5, 5, 5))
        );

        javax.swing.GroupLayout jPnlDocMDFeLayout = new javax.swing.GroupLayout(jPnlDocMDFe);
        jPnlDocMDFe.setLayout(jPnlDocMDFeLayout);
        jPnlDocMDFeLayout.setHorizontalGroup(
            jPnlDocMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDocMDFeLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPnlDocQtdMDFe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        jPnlDocMDFeLayout.setVerticalGroup(
            jPnlDocMDFeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDocMDFeLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPnlDocQtdMDFe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout TabMDFeReferenciadoLayout = new javax.swing.GroupLayout(TabMDFeReferenciado);
        TabMDFeReferenciado.setLayout(TabMDFeReferenciadoLayout);
        TabMDFeReferenciadoLayout.setHorizontalGroup(
            TabMDFeReferenciadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlDocMDFe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        TabMDFeReferenciadoLayout.setVerticalGroup(
            TabMDFeReferenciadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlDocMDFe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabEditInformacoesDocumento.addTab("MDF-e Referenciado", TabMDFeReferenciado);

        javax.swing.GroupLayout TabInformacoesDocumentoLayout = new javax.swing.GroupLayout(TabInformacoesDocumento);
        TabInformacoesDocumento.setLayout(TabInformacoesDocumentoLayout);
        TabInformacoesDocumentoLayout.setHorizontalGroup(
            TabInformacoesDocumentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlDocUfMun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTabEditInformacoesDocumento)
        );
        TabInformacoesDocumentoLayout.setVerticalGroup(
            TabInformacoesDocumentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabInformacoesDocumentoLayout.createSequentialGroup()
                .addComponent(jPnlDocUfMun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabEditInformacoesDocumento))
        );

        jTabEdit.addTab("Informações do Documento", TabInformacoesDocumento);

        jPnlTotaisFornecimento.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Totais de Fornecimentos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel90.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel90.setText("Quantidade Total de CT-e Relacionados no Manifesto");

        jLabel91.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel91.setText("Quantidade Total de NF-e Relacionados no Manifesto");

        jLabel92.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel92.setText("*Valor Total da Mercadoria/Carga Transportada");

        jLabel93.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel93.setText("*Código da Unidade de Medida do Peso Bruto da Mercadoria/Carga Transportada");

        jLabel94.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel94.setText("*Peso Bruto Total da Mercadoria/Carga Transportada");

        jFldTotQtdCte.setEditable(false);
        jFldTotQtdCte.setBackground(new java.awt.Color(255, 255, 204));
        jFldTotQtdCte.setText("0");
        jFldTotQtdCte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldTotQtdCteActionPerformed(evt);
            }
        });
        jFldTotQtdCte.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldTotQtdCteKeyPressed(evt);
            }
        });

        jFldTotQtdNFe.setEditable(false);
        jFldTotQtdNFe.setBackground(new java.awt.Color(255, 255, 204));
        jFldTotQtdNFe.setText("0");
        jFldTotQtdNFe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldTotQtdNFeActionPerformed(evt);
            }
        });
        jFldTotQtdNFe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldTotQtdNFeKeyPressed(evt);
            }
        });

        jFldTotVlTotalMercadoria.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldTotVlTotalMercadoriaFocusLost(evt);
            }
        });
        jFldTotVlTotalMercadoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldTotVlTotalMercadoriaActionPerformed(evt);
            }
        });
        jFldTotVlTotalMercadoria.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldTotVlTotalMercadoriaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFldTotVlTotalMercadoriaKeyTyped(evt);
            }
        });

        jCmbBxTotCodUnMedidaPeso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "KG", "TON" }));
        jCmbBxTotCodUnMedidaPeso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCmbBxTotCodUnMedidaPesoKeyPressed(evt);
            }
        });

        jFldTotQtdPesoBrutoTotal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldTotQtdPesoBrutoTotalFocusLost(evt);
            }
        });
        jFldTotQtdPesoBrutoTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldTotQtdPesoBrutoTotalActionPerformed(evt);
            }
        });
        jFldTotQtdPesoBrutoTotal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFldTotQtdPesoBrutoTotalKeyTyped(evt);
            }
        });

        jLabel148.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel148.setText("Quantidade Total de MDF-e Relacionados no Manifesto");

        jFldTotQtdMDFe.setEditable(false);
        jFldTotQtdMDFe.setBackground(new java.awt.Color(255, 255, 204));
        jFldTotQtdMDFe.setText("0");
        jFldTotQtdMDFe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldTotQtdMDFeActionPerformed(evt);
            }
        });
        jFldTotQtdMDFe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldTotQtdMDFeKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPnlTotaisFornecimentoLayout = new javax.swing.GroupLayout(jPnlTotaisFornecimento);
        jPnlTotaisFornecimento.setLayout(jPnlTotaisFornecimentoLayout);
        jPnlTotaisFornecimentoLayout.setHorizontalGroup(
            jPnlTotaisFornecimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlTotaisFornecimentoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlTotaisFornecimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlTotaisFornecimentoLayout.createSequentialGroup()
                        .addComponent(jLabel90, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(140, 140, 140)
                        .addComponent(jFldTotQtdCte, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlTotaisFornecimentoLayout.createSequentialGroup()
                        .addComponent(jLabel91, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130)
                        .addComponent(jFldTotQtdNFe, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlTotaisFornecimentoLayout.createSequentialGroup()
                        .addComponent(jLabel92, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130)
                        .addComponent(jFldTotVlTotalMercadoria, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlTotaisFornecimentoLayout.createSequentialGroup()
                        .addComponent(jLabel93, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jCmbBxTotCodUnMedidaPeso, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlTotaisFornecimentoLayout.createSequentialGroup()
                        .addComponent(jLabel94, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130)
                        .addComponent(jFldTotQtdPesoBrutoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlTotaisFornecimentoLayout.createSequentialGroup()
                        .addComponent(jLabel148, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130)
                        .addComponent(jFldTotQtdMDFe, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPnlTotaisFornecimentoLayout.setVerticalGroup(
            jPnlTotaisFornecimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnlTotaisFornecimentoLayout.createSequentialGroup()
                .addGroup(jPnlTotaisFornecimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel90)
                    .addComponent(jFldTotQtdCte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPnlTotaisFornecimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel91)
                    .addComponent(jFldTotQtdNFe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPnlTotaisFornecimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel148)
                    .addComponent(jFldTotQtdMDFe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(jPnlTotaisFornecimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel92)
                    .addComponent(jFldTotVlTotalMercadoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPnlTotaisFornecimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel93)
                    .addComponent(jCmbBxTotCodUnMedidaPeso, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPnlTotaisFornecimentoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel94)
                    .addComponent(jFldTotQtdPesoBrutoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPnlTotLacres.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Lacres", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jLabel96.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel96.setText("N° Lacres");

        jFldTotNrLacres.setDocument(new LimitaField(60, 2));
        jFldTotNrLacres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldTotNrLacresKeyPressed(evt);
            }
        });

        jTableTotNrLacre.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Lacre"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableTotNrLacre.getTableHeader().setReorderingAllowed(false);
        jTableTotNrLacre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableTotNrLacreMouseReleased(evt);
            }
        });
        jTableTotNrLacre.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableTotNrLacrePropertyChange(evt);
            }
        });
        jScrollPane18.setViewportView(jTableTotNrLacre);

        jBtIncluirLacre.setText("Incluir");
        jBtIncluirLacre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIncluirLacreActionPerformed(evt);
            }
        });

        jBtExcluirLacre.setText("Excluir");
        jBtExcluirLacre.setEnabled(false);
        jBtExcluirLacre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirLacreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlTotLacresLayout = new javax.swing.GroupLayout(jPnlTotLacres);
        jPnlTotLacres.setLayout(jPnlTotLacresLayout);
        jPnlTotLacresLayout.setHorizontalGroup(
            jPnlTotLacresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlTotLacresLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPnlTotLacresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel96, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlTotLacresLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jFldTotNrLacres, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane18, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                    .addGroup(jPnlTotLacresLayout.createSequentialGroup()
                        .addComponent(jBtIncluirLacre)
                        .addGap(12, 12, 12)
                        .addComponent(jBtExcluirLacre))))
        );
        jPnlTotLacresLayout.setVerticalGroup(
            jPnlTotLacresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlTotLacresLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPnlTotLacresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel96)
                    .addComponent(jFldTotNrLacres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addGroup(jPnlTotLacresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtIncluirLacre)
                    .addComponent(jBtExcluirLacre))
                .addGap(9, 9, 9))
        );

        jPnlDownload.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Autorizados para Dowload do XML do MDF-e", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        buttonGroup1.add(jRadioCnpj);
        jRadioCnpj.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jRadioCnpj.setText("CNPJ do Autorizado");
        jRadioCnpj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioCnpjActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioCpf);
        jRadioCpf.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jRadioCpf.setSelected(true);
        jRadioCpf.setText("CPF do Autorizado");
        jRadioCpf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioCpfActionPerformed(evt);
            }
        });

        jFldTotDocumentoAutorizado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jFldTotDocumentoAutorizadoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldTotDocumentoAutorizadoFocusLost(evt);
            }
        });
        jFldTotDocumentoAutorizado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldTotDocumentoAutorizadoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFldTotDocumentoAutorizadoKeyTyped(evt);
            }
        });

        jTableTotAutorizados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "N° do Documento"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableTotAutorizados.getTableHeader().setReorderingAllowed(false);
        jTableTotAutorizados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableTotAutorizadosMouseReleased(evt);
            }
        });
        jTableTotAutorizados.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableTotAutorizadosPropertyChange(evt);
            }
        });
        jScrollPane17.setViewportView(jTableTotAutorizados);

        jBtIncluirAutorizado.setText("Incluir");
        jBtIncluirAutorizado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIncluirAutorizadoActionPerformed(evt);
            }
        });

        jBtExcluirAutorizado.setText("Excluir");
        jBtExcluirAutorizado.setEnabled(false);
        jBtExcluirAutorizado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirAutorizadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlDownloadLayout = new javax.swing.GroupLayout(jPnlDownload);
        jPnlDownload.setLayout(jPnlDownloadLayout);
        jPnlDownloadLayout.setHorizontalGroup(
            jPnlDownloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDownloadLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPnlDownloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlDownloadLayout.createSequentialGroup()
                        .addComponent(jRadioCnpj, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jRadioCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jFldTotDocumentoAutorizado)
                        .addGap(5, 5, 5))
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
                    .addGroup(jPnlDownloadLayout.createSequentialGroup()
                        .addComponent(jBtIncluirAutorizado)
                        .addGap(12, 12, 12)
                        .addComponent(jBtExcluirAutorizado)))
                .addGap(5, 5, 5))
        );
        jPnlDownloadLayout.setVerticalGroup(
            jPnlDownloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlDownloadLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPnlDownloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioCnpj)
                    .addComponent(jRadioCpf)
                    .addComponent(jFldTotDocumentoAutorizado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addGroup(jPnlDownloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtIncluirAutorizado)
                    .addComponent(jBtExcluirAutorizado))
                .addGap(9, 9, 9))
        );

        javax.swing.GroupLayout TabTotalizadoresLayout = new javax.swing.GroupLayout(TabTotalizadores);
        TabTotalizadores.setLayout(TabTotalizadoresLayout);
        TabTotalizadoresLayout.setHorizontalGroup(
            TabTotalizadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlTotaisFornecimento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(TabTotalizadoresLayout.createSequentialGroup()
                .addComponent(jPnlTotLacres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPnlDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        TabTotalizadoresLayout.setVerticalGroup(
            TabTotalizadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabTotalizadoresLayout.createSequentialGroup()
                .addComponent(jPnlTotaisFornecimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TabTotalizadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPnlDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPnlTotLacres, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabEdit.addTab("Totalizadores", TabTotalizadores);

        jLabel95.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel95.setText("Informações Adicionais de Interesse do Fisco");

        jTxtAreaInfoAdicionaisFisco.setColumns(20);
        jTxtAreaInfoAdicionaisFisco.setDocument(new LimitaField(2000, 0));
        jTxtAreaInfoAdicionaisFisco.setLineWrap(true);
        jTxtAreaInfoAdicionaisFisco.setRows(5);
        jScrollPane19.setViewportView(jTxtAreaInfoAdicionaisFisco);

        jLabel97.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel97.setText("Informações Complementares de Interesse do Contribuinte");

        jTxtAreaInfoAdicionaisContribuinte.setColumns(20);
        jTxtAreaInfoAdicionaisContribuinte.setDocument(new LimitaField(2000, 0));
        jTxtAreaInfoAdicionaisContribuinte.setRows(5);
        jScrollPane20.setViewportView(jTxtAreaInfoAdicionaisContribuinte);

        javax.swing.GroupLayout TabInfoAdicionaisLayout = new javax.swing.GroupLayout(TabInfoAdicionais);
        TabInfoAdicionais.setLayout(TabInfoAdicionaisLayout);
        TabInfoAdicionaisLayout.setHorizontalGroup(
            TabInfoAdicionaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabInfoAdicionaisLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TabInfoAdicionaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane19)
                    .addGroup(TabInfoAdicionaisLayout.createSequentialGroup()
                        .addGroup(TabInfoAdicionaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel95)
                            .addComponent(jLabel97))
                        .addGap(0, 841, Short.MAX_VALUE))
                    .addComponent(jScrollPane20))
                .addContainerGap())
        );
        TabInfoAdicionaisLayout.setVerticalGroup(
            TabInfoAdicionaisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabInfoAdicionaisLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel95)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel97)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(184, Short.MAX_VALUE))
        );

        jTabEdit.addTab("Informações Adicionais", TabInfoAdicionais);

        jPnlRdvInfoSeguro.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Informações do Seguro", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        jTableSeguro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "", "Código", "Número da Apólice", "Cód. Seguradora", "Nome da Seguradora", "CNPJ da Seguradora",
                "Cód. Responsável", "Responsável pelo Seguro" ,"CPF do Responsável",
                "CNPJ do Responsável", "Número de Averbações"
            }
        ){
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                if(colIndex == 0){
                    return true;
                }else{
                    return false;
                }
                //Disallow the editing of any cell
            };

            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class

            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableSeguro.getTableHeader().setReorderingAllowed(false);
        jTableSeguro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableSeguroMouseReleased(evt);
            }
        });
        jTableSeguro.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableSeguroPropertyChange(evt);
            }
        });
        jScrollPane24.setViewportView(jTableSeguro);

        jLabel147.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel147.setText("Código");

        jFldCodRespSeguro.setEnabled(false);
        jFldCodRespSeguro.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldCodRespSeguroFocusLost(evt);
            }
        });
        jFldCodRespSeguro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldCodRespSeguroActionPerformed(evt);
            }
        });
        jFldCodRespSeguro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldCodRespSeguroKeyPressed(evt);
            }
        });

        jBtBuscaRespSeguro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaRespSeguro.setText("F11");
        jBtBuscaRespSeguro.setEnabled(false);
        jBtBuscaRespSeguro.setFocusable(false);
        jBtBuscaRespSeguro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaRespSeguroActionPerformed(evt);
            }
        });

        jLblNomeRespSeg.setBackground(new java.awt.Color(255, 255, 204));
        jLblNomeRespSeg.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblNomeRespSeg.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblNomeRespSeg.setEnabled(false);
        jLblNomeRespSeg.setOpaque(true);

        jLabel149.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel149.setText("Código");

        jFldCodSeguradora.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFldCodSeguradoraFocusLost(evt);
            }
        });
        jFldCodSeguradora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFldCodSeguradoraActionPerformed(evt);
            }
        });
        jFldCodSeguradora.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldCodSeguradoraKeyPressed(evt);
            }
        });

        jBtBuscaSeguradora.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/tool.png"))); // NOI18N
        jBtBuscaSeguradora.setText("F11");
        jBtBuscaSeguradora.setFocusable(false);
        jBtBuscaSeguradora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtBuscaSeguradoraActionPerformed(evt);
            }
        });

        jLabel150.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel150.setText("Nome da Seguradora ");

        jLblNomeSeguradora.setBackground(new java.awt.Color(255, 255, 204));
        jLblNomeSeguradora.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblNomeSeguradora.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblNomeSeguradora.setOpaque(true);

        jFldNrApolice.setDocument(new LimitaField(20, 2));
        jFldNrApolice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFldNrApoliceKeyPressed(evt);
            }
        });

        jLabel151.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel151.setText("Número da Apólice ");

        jLabel152.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel152.setText("Nome do Responsavel (Contratante)");

        jLabel153.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel153.setText("CNPJ");

        jLblCnpjSeguradora.setBackground(new java.awt.Color(255, 255, 204));
        jLblCnpjSeguradora.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblCnpjSeguradora.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblCnpjSeguradora.setOpaque(true);

        jChckBxDdInformarResponsavelSeguro.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jChckBxDdInformarResponsavelSeguro.setSelected(true);
        jChckBxDdInformarResponsavelSeguro.setText("O Contratante do Seguro não é o emitente iniciado no Sistema");
        jChckBxDdInformarResponsavelSeguro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jChckBxDdInformarResponsavelSeguroItemStateChanged(evt);
            }
        });
        jChckBxDdInformarResponsavelSeguro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jChckBxDdInformarResponsavelSeguroKeyPressed(evt);
            }
        });

        jLabel156.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel156.setText("CPF");

        jLblRespSegCpf.setBackground(new java.awt.Color(255, 255, 204));
        jLblRespSegCpf.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRespSegCpf.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRespSegCpf.setEnabled(false);
        jLblRespSegCpf.setOpaque(true);

        jLblRespSegCnpj.setBackground(new java.awt.Color(255, 255, 204));
        jLblRespSegCnpj.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLblRespSegCnpj.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jLblRespSegCnpj.setEnabled(false);
        jLblRespSegCnpj.setOpaque(true);

        jLabel157.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel157.setText("CNPJ");

        jBtDadosAverbacao.setText("Dados Averbação");
        jBtDadosAverbacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtDadosAverbacaoActionPerformed(evt);
            }
        });

        jBtExcluirSeguro.setText("Excluir");
        jBtExcluirSeguro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtExcluirSeguroActionPerformed(evt);
            }
        });

        jBtIncluirSeguro.setText("Incluir");
        jBtIncluirSeguro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtIncluirSeguroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPnlRdvInfoSeguroLayout = new javax.swing.GroupLayout(jPnlRdvInfoSeguro);
        jPnlRdvInfoSeguro.setLayout(jPnlRdvInfoSeguroLayout);
        jPnlRdvInfoSeguroLayout.setHorizontalGroup(
            jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                        .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                                .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jFldCodSeguradora, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel149, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addComponent(jBtBuscaSeguradora)
                                .addGap(11, 11, 11)
                                .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLblNomeSeguradora, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel150, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel153, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLblCnpjSeguradora, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jFldNrApolice, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel151, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                                .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel147, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jFldCodRespSeguro, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addComponent(jBtBuscaRespSeguro)
                                .addGap(11, 11, 11)
                                .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLblNomeRespSeg, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel152, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel156, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLblRespSegCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel157, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLblRespSegCnpj, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                                .addComponent(jBtIncluirSeguro)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtExcluirSeguro)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtDadosAverbacao))
                            .addComponent(jChckBxDdInformarResponsavelSeguro, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 321, Short.MAX_VALUE))
                    .addComponent(jScrollPane24))
                .addContainerGap())
        );
        jPnlRdvInfoSeguroLayout.setVerticalGroup(
            jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                .addComponent(jChckBxDdInformarResponsavelSeguro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel147, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jFldCodRespSeguro, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jBtBuscaRespSeguro, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel156, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel157, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLblRespSegCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLblRespSegCnpj, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                            .addComponent(jLabel152)
                            .addGap(0, 0, 0)
                            .addComponent(jLblNomeRespSeg, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(4, 4, 4)
                .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jFldCodSeguradora, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel149, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jBtBuscaSeguradora, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLblNomeSeguradora, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel150, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel153, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLblCnpjSeguradora, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlRdvInfoSeguroLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jFldNrApolice, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel151, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane24, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPnlRdvInfoSeguroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtDadosAverbacao, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtExcluirSeguro, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtIncluirSeguro, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout TabSeguroCargaLayout = new javax.swing.GroupLayout(TabSeguroCarga);
        TabSeguroCarga.setLayout(TabSeguroCargaLayout);
        TabSeguroCargaLayout.setHorizontalGroup(
            TabSeguroCargaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPnlRdvInfoSeguro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        TabSeguroCargaLayout.setVerticalGroup(
            TabSeguroCargaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TabSeguroCargaLayout.createSequentialGroup()
                .addComponent(jPnlRdvInfoSeguro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(2, 2, 2))
        );

        jTabEdit.addTab("Seguro da Carga", TabSeguroCarga);

        javax.swing.GroupLayout jPnlEditCentroLayout = new javax.swing.GroupLayout(jPnlEditCentro);
        jPnlEditCentro.setLayout(jPnlEditCentroLayout);
        jPnlEditCentroLayout.setHorizontalGroup(
            jPnlEditCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabEdit)
        );
        jPnlEditCentroLayout.setVerticalGroup(
            jPnlEditCentroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlEditCentroLayout.createSequentialGroup()
                .addComponent(jTabEdit)
                .addGap(1, 1, 1))
        );

        jPnlEdit.add(jPnlEditCentro, java.awt.BorderLayout.CENTER);

        jPnlEditSul.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPnlEditSul.setPreferredSize(new java.awt.Dimension(1117, 60));

        jBtEditSalvar.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtEditSalvar.setText("Salvar");
        jBtEditSalvar.setToolTipText("");
        jBtEditSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtEditSalvarActionPerformed(evt);
            }
        });
        jBtEditSalvar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBtEditSalvarKeyPressed(evt);
            }
        });

        jBtEditFechar.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtEditFechar.setText("Fechar");
        jBtEditFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtEditFecharActionPerformed(evt);
            }
        });
        jBtEditFechar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBtEditFecharKeyPressed(evt);
            }
        });

        jBtEditar.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtEditar.setText("Editar");
        jBtEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtEditarActionPerformed(evt);
            }
        });
        jBtEditar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBtEditarKeyPressed(evt);
            }
        });

        jBtEditTransmitir.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtEditTransmitir.setText("Transmitir");
        jBtEditTransmitir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtEditTransmitirActionPerformed(evt);
            }
        });
        jBtEditTransmitir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBtEditTransmitirKeyPressed(evt);
            }
        });

        jBtEditCancelarMDFe.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtEditCancelarMDFe.setText("Cancelar MDF-e");
        jBtEditCancelarMDFe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtEditCancelarMDFeActionPerformed(evt);
            }
        });
        jBtEditCancelarMDFe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBtEditCancelarMDFeKeyPressed(evt);
            }
        });

        jBtEditEncerraMDFe.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtEditEncerraMDFe.setText("Encerra MDF-e");
        jBtEditEncerraMDFe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtEditEncerraMDFeActionPerformed(evt);
            }
        });
        jBtEditEncerraMDFe.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBtEditEncerraMDFeKeyPressed(evt);
            }
        });

        jBtEditExportar.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtEditExportar.setText("Exportar");
        jBtEditExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtEditExportarActionPerformed(evt);
            }
        });
        jBtEditExportar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBtEditExportarKeyPressed(evt);
            }
        });

        jBtEditConsultarProtocolo.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtEditConsultarProtocolo.setText("Consultar Protocolo");
        jBtEditConsultarProtocolo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtEditConsultarProtocoloActionPerformed(evt);
            }
        });
        jBtEditConsultarProtocolo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBtEditConsultarProtocoloKeyPressed(evt);
            }
        });

        jBtEditImprimirDAMDFE.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jBtEditImprimirDAMDFE.setText("Imprimir DAMDFE");
        jBtEditImprimirDAMDFE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtEditImprimirDAMDFEActionPerformed(evt);
            }
        });
        jBtEditImprimirDAMDFE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBtEditImprimirDAMDFEKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPnlEditSulLayout = new javax.swing.GroupLayout(jPnlEditSul);
        jPnlEditSul.setLayout(jPnlEditSulLayout);
        jPnlEditSulLayout.setHorizontalGroup(
            jPnlEditSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlEditSulLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBtEditSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtEditTransmitir, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtEditCancelarMDFe)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtEditEncerraMDFe)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtEditConsultarProtocolo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtEditImprimirDAMDFE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtEditExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtEditFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(265, Short.MAX_VALUE))
        );
        jPnlEditSulLayout.setVerticalGroup(
            jPnlEditSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnlEditSulLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPnlEditSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jBtEditSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPnlEditSulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBtEditFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBtEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBtEditTransmitir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBtEditCancelarMDFe, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBtEditEncerraMDFe, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBtEditExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBtEditConsultarProtocolo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBtEditImprimirDAMDFE, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPnlEdit.add(jPnlEditSul, java.awt.BorderLayout.SOUTH);

        jPnlPrincipal.add(jPnlEdit, "card3");

        getContentPane().add(jPnlPrincipal, "card2");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFldCodFilialAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jFldCodFilialAncestorAdded
        //        jLblFilial.setText(BuscaFilial(jFldCodFilial.getText()));
    }//GEN-LAST:event_jFldCodFilialAncestorAdded

    private void jFldCodFilialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldCodFilialFocusLost
        BuscaNomeFilial(jFldCodFilial.getText());
    }//GEN-LAST:event_jFldCodFilialFocusLost

    private void jFldCodFilialKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldCodFilialKeyPressed

        if (evt.getKeyCode() == evt.VK_F11) {
            jBtBuscaFilial.doClick();
        }

        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldBuscaPeriodoEmissaoInicial.requestFocus();
        }

    }//GEN-LAST:event_jFldCodFilialKeyPressed

    private void jBtBuscaFilialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaFilialActionPerformed
        TelaBuscaFilial telabuscafilial = new TelaBuscaFilial();
        telabuscafilial.setVisible(true);
        jFldCodFilial.setText(telabuscafilial.sCOD);
        jLblFilial.setText(telabuscafilial.sDESC);
        jLblFilialCNPJ.setText(telabuscafilial.sCNPJ);
        jLblFilialIE.setText(telabuscafilial.sIE);
        jFldCodFilial.requestFocus();
    }//GEN-LAST:event_jBtBuscaFilialActionPerformed

    private void jBtBuscaNovoMDFeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaNovoMDFeActionPerformed
 
        if (jFldCodFilial.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Escolha um Emitente!");
            jFldCodFilial.requestFocus();
        } else {
            tag_acao = "1";
            jPnlEdit.setVisible(true);
            jPnlBusca.setVisible(false);

            jBtEditar.setEnabled(false);
            jBtEditSalvar.setEnabled(true);

            jPnlErroMensagem.setVisible(false);
            jPnlEditSul.setVisible(true);

            LimpaField();
            HabilitarComponentes(true);

            //GERA O NUMERO MAXIMO
            BuscaCodMax();
            jFldDdNumero.setText(new DecimalFormat("000000000").format(codmax));
            jFldDdCodNumerico.setText(new DecimalFormat("00000000").format(codmax));

            //DATA DE EMISSÃO DA MDFE
            jFldDdDataHoraEmissao.setText(util.FormataDataHora(new Date()));
            System.out.println("dt: " + util.FormataDataHora(new Date()));

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");

            jLblStatusMDFe.setText("Em digitação");

            jPnlErroMensagem.setVisible(false);

            try {
                InserirDados(jFldDdNumero.getText(), jFldDdNumero.getText(), jFldDdCodNumerico.getText(), util.FormataDataBanco(sdf.parse(jFldDdDataHoraEmissao.getText())),
                        "", jLblStatusMDFe.getText(), tabusu.getCodigo(), tabusu.getNome(), util.FormataDataBanco(new Date()), "1",
                        Integer.parseInt(jFldCodFilial.getText()), util.ExtraiNumeros(jFldEmtCNPJ.getText()), jFldEmtInscEstadual.getText(),
                        jFldEmtRazaoSocial.getText(), jFldEmtNomeFantasia.getText(), jFldEmtLogradouro.getText(), jFldEmtNumero.getText(),
                        jFldEmtComplemento.getText(), jFldEmtBairro.getText(), util.ExtraiNumeros(jFldEmtCep.getText()), jFldtPais.getText(),
                        jFldEmtUf.getText(), jFldEmtMunicipio.getText(), jFldEmtTelefone.getText(), jFldEmtEmail.getText(), jFldEmtRNTRC.getText(), jFldEmtCodMun.getText()
                );
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
            }

            jFldDdSerie.requestFocus();
            
        }

    }//GEN-LAST:event_jBtBuscaNovoMDFeActionPerformed

    private void jBtBuscaDetalharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaDetalharActionPerformed

        tag_acao = "2";
        if (jFldCodFilial.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Escolha um Emissor!");
            jFldCodFilial.requestFocus();
        } else {
            for (int linha = 0; linha < jTablePrincipal.getRowCount(); linha++) {
                if (((boolean) jTablePrincipal.getValueAt(linha, 0)) == true) {

                    HabilitarComponentes(false);

                     LimpaField();
                    util.sDAD_CODIGO = Integer.parseInt(jTablePrincipal.getValueAt(linha, 2).toString());

                    //--------------------dados----------------------
                    CarregaCampoEditDados(jTablePrincipal.getValueAt(linha, 2).toString());

                    //---------------------rodoviario---------------------------
                    CarregaTudoCiot(jTablePrincipal.getValueAt(linha, 2).toString());
                    CarregaTudoContratante(jTablePrincipal.getValueAt(linha, 2).toString());
                    CarregaTudoLocalCarregamento(jTablePrincipal.getValueAt(linha, 2).toString());
                    CarregaTudoUfPercurso(jTablePrincipal.getValueAt(linha, 2).toString());
                    CarregaTudoCondutor(jTablePrincipal.getValueAt(linha, 2).toString());
                    CarregaTudoReboque(jTablePrincipal.getValueAt(linha, 2).toString());
                    CarregaTudoValePedagio(jTablePrincipal.getValueAt(linha, 2).toString());
                    CarregaTudoNrLacreRodoviario(jTablePrincipal.getValueAt(linha, 2).toString());

                    //---------------------aquaviario---------------------------                                
                    CarregaTerminaisCarregamento(jTablePrincipal.getValueAt(linha, 2).toString());
                    CarregaTerminaisDescarregamento(jTablePrincipal.getValueAt(linha, 2).toString());
                    CarregaEmbComboio(jTablePrincipal.getValueAt(linha, 2).toString());
                    CarregaTpUnCargaVazia(jTablePrincipal.getValueAt(linha, 2).toString());                    
                    CarregaTpUnTransVazia(jTablePrincipal.getValueAt(linha, 2).toString());

                    //---------------------informacoes documento---------------------------  
                    CarregaTudoMunicipioDescarregamento(jTablePrincipal.getValueAt(linha, 2).toString());
                    /*
                    CarregaDocumento(Integer.parseInt(jTablePrincipal.getValueAt(linha, 2).toString()), "C", jTableDocCte);
                    CarregaDocumento(Integer.parseInt(jTablePrincipal.getValueAt(linha, 2).toString()), "N", jTableDocNFe);
                    CarregaDocumento(Integer.parseInt(jTablePrincipal.getValueAt(linha, 2).toString()), "M", jTableDocMDFe);
                     */
                    //CarregaConhecimentoTransporte(jTablePrincipal.getValueAt(linha, 2).toString());

                    //---------------------totalizadores---------------------------    
                    CarregaTudoNrLacre(jTablePrincipal.getValueAt(linha, 2).toString());
                    CarregaTudoDocumentoAutorizado(jTablePrincipal.getValueAt(linha, 2).toString());

                    //-------------------Seguro-------------------------------------
                    
                    CarregaTudoSeguro(jTablePrincipal.getValueAt(linha, 2).toString());
                    
                    jPnlErroMensagem.setVisible(false);
                    jPnlEditSul.setVisible(true);

                    //Nao deixa mais editar a mdfe se a situacao estiver cancelado, encerrado ou autorizado
                    if(jLblStatusMDFe.getText().equals("Cancelado") || jLblStatusMDFe.getText().equals("Encerrado") || jLblStatusMDFe.getText().equals("Autorizado")){
                        //jBtEditSalvar.setEnabled(false);
                        //jBtEditar.setEnabled(false);//
                    }else{
                        jBtEditSalvar.setEnabled(false);
                        jBtEditar.setEnabled(true);
                    }
                    
                    

                    jPnlBusca.setVisible(false);
                    jPnlEdit.setVisible(true);
                    
                    jFldDdSerie.requestFocus();
                }
            }
        }

    }//GEN-LAST:event_jBtBuscaDetalharActionPerformed

    private void jBtGeraXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtGeraXMLActionPerformed
         // TODO add your handling code here:

        for (int linha = 0; linha < jTablePrincipal.getRowCount(); linha++) {
            if (((boolean) jTablePrincipal.getValueAt(linha, 0)) == true) {

                try {
                    Verifica_Existe_Pasta_MDFe();
                    ApagarArquivoMDFe();                    
                    CriaXML(jTablePrincipal.getValueAt(linha, 2).toString(), jFldCodFilial.getText(), "C");
                } catch (SQLException ex) {
                    Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }//GEN-LAST:event_jBtGeraXMLActionPerformed

    private void jBtAssinarXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtAssinarXMLActionPerformed
 
        try {

            for (int linha = 0; linha < jTablePrincipal.getRowCount(); linha++) {
                if ((boolean) jTablePrincipal.getValueAt(linha, 0) == true) {
                    InfoCertificado infocert = new InfoCertificado();
                    infocert.CarregarCertificado(jFldEmtCamCertificado.getText(), jFldEmtSenhaCertificado.getText().toString());

                    InfoCertificadoBean InfoCertBean = new InfoCertificadoBean();
                    Assina assinatura = new Assina();
                    Verifica_Existe_Pasta_MDFe_Assinada();
                    String XMLAssinado = assinatura.GerarAssinatura("C:\\InterageSE\\MDFe_XML\\MDFe_XML_NORMAL\\" + jTablePrincipal.getValueAt(linha, 11) + ".xml", "C:\\InterageSE\\MDFe_XML\\MDFe_XML_ASS\\" + jTablePrincipal.getValueAt(linha, 11) + ".xml", InfoCertBean.getAlias(), InfoCertBean.getCamCertificado(), InfoCertBean.getSenha(), "infMDFe", ""
                            + "", "S");//
                    
                    //chave do mdfe
                    AlterarDadosSituacao(jTablePrincipal.getValueAt(linha, 2).toString(), "Assinado");
                    
                    JOptionPane.showMessageDialog(null, "XML Assinado!");
                }
            }

            // JOptionPane.showMessageDialog(null,"Arquivo assinado com sucesso!");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro na assinatua do arquivo xml!\n" + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jBtAssinarXMLActionPerformed

    private void jBtValidaXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtValidaXMLActionPerformed
        // TODO add your handling code here:

        for (int linha = 0; linha < jTablePrincipal.getRowCount(); linha++) {
            if ((boolean) jTablePrincipal.getValueAt(linha, 0) == true) {
                try {
                    //chave do mdfe
                    ValidaDocXML("C:\\InterageSE\\MDFe_XML\\MDFe_XML_ASS\\" + jTablePrincipal.getValueAt(linha, 11) + ".xml", "mdfe_v3.00.xsd");
                    AlterarDadosSituacao(jTablePrincipal.getValueAt(linha, 2).toString(), "Validado");

                } catch (Exception e) {
                    //  JOptionPane.showMessageDialog(null, "Erro ao validar");
                    if (e instanceof SAXParseException) {
                        JOptionPane.showMessageDialog(null, "XML Parse Error on Col: " + ((SAXParseException) e).getColumnNumber() + " | Lin: " + ((SAXParseException) e).getLineNumber() + " - " + ((SAXParseException) e).getLocalizedMessage());
                        System.out.println("XML Parse Error on Col: " + ((SAXParseException) e).getColumnNumber() + " | Lin: " + ((SAXParseException) e).getLineNumber() + " - " + ((SAXParseException) e).getLocalizedMessage());
                    } else {
                        JOptionPane.showMessageDialog(null, "Unknow error attemping to validate XML.");
                    }
                }
            }
        }

    }//GEN-LAST:event_jBtValidaXMLActionPerformed

    private void TransmitirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransmitirActionPerformed
        
        if (jFldCodFilial.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Escolha um Emissor!");
            jFldCodFilial.requestFocus();
        } else {
            for (int linha = 0; linha < jTablePrincipal.getRowCount(); linha++) {
                if (((boolean) jTablePrincipal.getValueAt(linha, 0)) == true) {

                    try {
                        //Cria arquivo XML
                        Verifica_Existe_Pasta_MDFe();
                        ApagarArquivoMDFe();                    
                        CriaXML(jTablePrincipal.getValueAt(linha, 2).toString(), jFldCodFilial.getText(), "C"); 
                        //------------------------------------------------------
                        
                        //Assina arquivo XML
                        InfoCertificado infocert = new InfoCertificado();
                        infocert.CarregarCertificado(jFldEmtCamCertificado.getText(), jFldEmtSenhaCertificado.getText().toString());                        
                        InfoCertificadoBean InfoCertBean = new InfoCertificadoBean();
                        Assina assinatura = new Assina();
                        Verifica_Existe_Pasta_MDFe_Assinada();
                        String XMLAssinado = assinatura.GerarAssinatura("C:\\InterageSE\\MDFe_XML\\MDFe_XML_NORMAL\\" + jTablePrincipal.getValueAt(linha, 11) + ".xml", "C:\\InterageSE\\MDFe_XML\\MDFe_XML_ASS\\" + jTablePrincipal.getValueAt(linha, 11) + ".xml", InfoCertBean.getAlias(), InfoCertBean.getCamCertificado(), InfoCertBean.getSenha(), "infMDFe", ""+ "", "S");//                    
                        //------------------------------------------------------
                        
                        //Valida Documento XML
                        ValidaDocXML("C:\\InterageSE\\MDFe_XML\\MDFe_XML_ASS\\" + jTablePrincipal.getValueAt(linha, 11) + ".xml", "mdfe_v3.00.xsd");
                        //------------------------------------------------------
                                                                    
                        //Transmite arquivo validado
                        infocert.CarregarCertificado(jFldEmtCamCertificado.getText(), jFldEmtSenhaCertificado.getText().toString());
                        LerXmlRecepcao(MDFeRecepcao.Recepcao("C:\\InterageSE\\MDFe_XML\\MDFe_XML_ASS\\" + jTablePrincipal.getValueAt(linha, 11) + ".xml", "2", "1", InfoCertBean.getCamCertificado(), InfoCertBean.getSenha()));
                        LerXmlRetRecepcao(MDFeRetRecepcao.RetRecepcao("2", nRec, InfoCertBean.getCamCertificado(), InfoCertBean.getSenha()));
                        //Se tiver tudo certo
                        if (cStat.equals("100")) {
                            AlterarDadosProtocolo(jTablePrincipal.getValueAt(linha, 2).toString(), nProtEvt);
                            AlterarDadosSituacao(jTablePrincipal.getValueAt(linha, 2).toString(), "Autorizado");
                        }
                        
                    } catch (XmlPullParserException ex) {
                        Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                    Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
                  } catch (InstantiationException ex) {
                    Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
                  } catch (IllegalAccessException ex) {
                    Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
                  } catch (ParserConfigurationException ex) {
                    Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
                  } catch (NoSuchAlgorithmException ex) {
                    Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
                  } catch (CertificateException ex) {
                    Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
                  } catch (UnrecoverableEntryException ex) {
                    Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
                  } catch (Exception ex) {
                    Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
                  }
                }
            }
        }
    }//GEN-LAST:event_TransmitirActionPerformed

    private void jBtBuscaChaveDeAcessoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaChaveDeAcessoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtBuscaChaveDeAcessoActionPerformed

    private void jBtBuscaExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaExcluirActionPerformed
       
        
        
      if (jFldCodFilial.getText().length() == 0) {
        JOptionPane.showMessageDialog(null, "Escolha um Emissor!");
        jFldCodFilial.requestFocus();
      } else {
        for (int linha = 0; linha < jTablePrincipal.getRowCount(); linha++) {
          if (((boolean) jTablePrincipal.getValueAt(linha, 0)) == true) {
            if(((jTablePrincipal.getValueAt(linha, 10).toString().equalsIgnoreCase("Autorizado")) ) && ((jTablePrincipal.getValueAt(linha, 10).toString().equalsIgnoreCase("Cancelado")) ) && ((jTablePrincipal.getValueAt(linha, 10).toString().equalsIgnoreCase("Encerrado")) )) {
               DeletarDados(tabusu.getCodigo(), tabusu.getNome(), util.FormataDataBanco(new Date()), "3");
            }else{
               
            }
            
            
          }
        }
      }
    }//GEN-LAST:event_jBtBuscaExcluirActionPerformed

    private void jBtIncCondutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIncCondutorActionPerformed
               // TODO add your handling code here:
      if (jFldCodFilial.getText().length() == 0) {
        JOptionPane.showMessageDialog(null, "Escolha um Emissor!");
        jFldCodFilial.requestFocus();
      } else {
        for (int linha = 0; linha < jTablePrincipal.getRowCount(); linha++) {
          if (((boolean) jTablePrincipal.getValueAt(linha, 0)) == true) {
            if((jTablePrincipal.getValueAt(linha, 10).toString().equalsIgnoreCase("Autorizado")) ) {
              JOptionPane.showMessageDialog(null, "Não foi Autorizado!");
            }else{
              util.sCHAVE_MDFE   = (String) jTablePrincipal.getValueAt(linha, 11);
              util.sDAD_NR_PROT  = (String) jTablePrincipal.getValueAt(linha, 12);
              util.sDAD_NUMERO   = jTablePrincipal.getValueAt(linha, 2).toString();
              
              TelaIncluiCondutor IncluiCondutor = new TelaIncluiCondutor( jFldEmtCamCertificado.getText(), jFldEmtSenhaCertificado.getText(), jFldEmtCNPJ.getText());
              IncluiCondutor.setVisible(true);
            }
            
            
          }
        }
      }
    }//GEN-LAST:event_jBtIncCondutorActionPerformed

    private void jBtEncerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtEncerrarActionPerformed
        // TODO add your handling code here:
        if (jFldCodFilial.getText().length() == 0) {
        JOptionPane.showMessageDialog(null, "Escolha um Emissor!");
        jFldCodFilial.requestFocus();
      } else {
        for (int linha = 0; linha < jTablePrincipal.getRowCount(); linha++) {
          if (((boolean) jTablePrincipal.getValueAt(linha, 0)) == true) {
            if((jTablePrincipal.getValueAt(linha, 10).toString().equalsIgnoreCase("Autorizado")) ) {
              JOptionPane.showMessageDialog(null, "Não foi Autorizado!");
            }else{
              util.sCHAVE_MDFE   = (String) jTablePrincipal.getValueAt(linha, 11);
              util.sDAD_NR_PROT  = (String) jTablePrincipal.getValueAt(linha, 12);
             
              TelaEncerramento Encerramento = new TelaEncerramento(util.sCHAVE_MDFE, util.sDAD_NR_PROT, jFldEmtCamCertificado.getText(), jFldEmtSenhaCertificado.getText(), jFldEmtCNPJ.getText());
              Encerramento.setVisible(true);
            }
            
            
          }
        }
      }
    }//GEN-LAST:event_jBtEncerrarActionPerformed

    private void jBtCancelaMDFeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtCancelaMDFeActionPerformed
         // TODO add your handling code here:
      if (jFldCodFilial.getText().length() == 0) {
        JOptionPane.showMessageDialog(null, "Escolha um Emissor!");
        jFldCodFilial.requestFocus();
      } else {
        for (int linha = 0; linha < jTablePrincipal.getRowCount(); linha++) {
          if (((boolean) jTablePrincipal.getValueAt(linha, 0)) == true) {
            if((jTablePrincipal.getValueAt(linha, 10).toString().equalsIgnoreCase("Autorizado")) ) {
              JOptionPane.showMessageDialog(null, "Não foi Autorizado!");
            }else{
              util.sCHAVE_MDFE   = (String) jTablePrincipal.getValueAt(linha, 11);
              util.sDAD_NR_PROT  = (String) jTablePrincipal.getValueAt(linha, 12);
             
              TelaCancelamento cancelamento = new TelaCancelamento( jFldEmtCamCertificado.getText(), jFldEmtSenhaCertificado.getText(), jFldEmtCNPJ.getText());
              cancelamento.setVisible(true);
            }
            
            
          }
        }
      }
    }//GEN-LAST:event_jBtCancelaMDFeActionPerformed

    private void jBtBuscaImprimirDamdfeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaImprimirDamdfeActionPerformed

      
        if (jFldCodFilial.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Escolha um Emissor!");
            jFldCodFilial.requestFocus();
        } else {
            for (int linha = 0; linha < jTablePrincipal.getRowCount(); linha++) {
                if (((boolean) jTablePrincipal.getValueAt(linha, 0)) == true) {
                    TelaImprimirDamdfe telaImprimir = new TelaImprimirDamdfe(jTablePrincipal.getValueAt(linha, 2).toString(), jTablePrincipal.getValueAt(linha, 9).toString(), jTablePrincipal.getValueAt(linha, 8).toString());
                    telaImprimir.setVisible(true);
                }
            }
        }
      
      
    }//GEN-LAST:event_jBtBuscaImprimirDamdfeActionPerformed

    private void jBtConsultarProtocoloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtConsultarProtocoloActionPerformed
          // TODO add your handling code here:
      if (jFldCodFilial.getText().length() == 0) {
        JOptionPane.showMessageDialog(null, "Escolha um Emissor!");
        jFldCodFilial.requestFocus();
      } else {
        for (int linha = 0; linha < jTablePrincipal.getRowCount(); linha++) {
          if (((boolean) jTablePrincipal.getValueAt(linha, 0)) == true) {
            try {
               infocert.CarregarCertificado(jFldEmtCamCertificado.getText(), jFldEmtSenhaCertificado.getText().toString());
               LerXmlProtocolo(MDFeConsultaSitMDFe.ConsultaSitMDFe(jTablePrincipal.getValueAt(linha, 11).toString(), "2", InfoCertBean.getCamCertificado(), InfoCertBean.getSenha()));
             
            } catch (XmlPullParserException ex) {
              Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
              Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
            }
          }
        }
      }
    }//GEN-LAST:event_jBtConsultarProtocoloActionPerformed

    private void jBtConsultarStatusServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtConsultarStatusServicoActionPerformed
         // TODO add your handling code here:

      infocert.CarregarCertificado(jFldEmtCamCertificado.getText(),jFldEmtSenhaCertificado.getText().toString() );
      
      
      try {        
        VerificaStatusXml(MDFeConsultaStatusServico.ConsultaStatusServico("2", InfoCertBean.getCamCertificado(), InfoCertBean.getSenha()));
      } catch (XmlPullParserException ex) {
        Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
      } catch (IOException ex) {
        Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
      }
      
      //JOptionPane.showMessageDialog(null, MDFeConsultaStatusServico.ConsultaStatusServico("2", InfoCertBean.getCamCertificado(), InfoCertBean.getSenha()));
    }//GEN-LAST:event_jBtConsultarStatusServicoActionPerformed

    private void jBtBuscaSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaSairActionPerformed
        dispose();
    }//GEN-LAST:event_jBtBuscaSairActionPerformed

    private void jBtEditSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtEditSalvarActionPerformed
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        jFldTotQtdCte.setText(BuscaQtdDocumento(jFldDdNumero.getText(), "C").toString());
        jFldTotQtdNFe.setText(BuscaQtdDocumento(jFldDdNumero.getText(), "N").toString());
        jFldTotQtdMDFe.setText(BuscaQtdDocumento(jFldDdNumero.getText(), "M").toString());

        try {

            if (tag_acao == "2" || tag_acao == "1") {

                String chave = "";
                jLblChaveDeAcesso.setText("");

                int option = JOptionPane.YES_NO_OPTION;
                if (VerificaField() == false) {
                    jPnlErroMensagem.setVisible(true);
                    jPnlEditSul.setVisible(false);
                    jTabEdit.setSelectedIndex(0);
                    //Caso o mdfe ainda tenha campos a ser informados, a situação ficará em digitação
                    jLblStatusMDFe.setText("Em Digitação");
                    option = JOptionPane.showConfirmDialog(null, "O MDFe Não é Válido. Deseja Salvar Mesmo Assim?", "Confirmar", JOptionPane.YES_NO_OPTION);
                } else {
                    jPnlErroMensagem.setVisible(false);
                    jPnlEditSul.setVisible(true);
                    chave = GerarChaveDeAcesso();
                    jLblChaveDeAcesso.setText(chave);
                    jLblStatusMDFe.setText("Salvo");
                }

                if (option == JOptionPane.YES_OPTION) {//21586212000172
                    AlterarDados(jFldDdNumero.getText(), jFldDdModelo.getText(), jFldDdSerie.getText(), jFldDdNumero.getText(), util.FormataDataBanco(sdf.parse(jFldDdDataHoraEmissao.getText())),
                            VerificaDataHoraInicioViagem(), jFldDdCodNumerico.getText(), jFldDdDV.getText(), util.VerificaValorNulo(jCmbBxDdMDFeUf.getSelectedItem()),
                            TipoEmitente(), Modalidade(), FormaEmissao(), TipoTranspotador(), jLblChaveDeAcesso.getText(), util.VerificaValorNulo(jCmbBxDdUfLocalDescarreg.getSelectedItem()), jLblStatusMDFe.getText(), tabusu.getCodigo(),
                            tabusu.getNome(), util.FormataDataBanco(new Date()), "2",
                            Integer.parseInt(jFldCodFilial.getText()), util.ExtraiNumeros(jFldEmtCNPJ.getText()), util.ExtraiNumeros(jFldEmtInscEstadual.getText()), jFldEmtRazaoSocial.getText(), jFldEmtNomeFantasia.getText(), jFldEmtLogradouro.getText(),
                            jFldEmtNumero.getText(), jFldEmtComplemento.getText(), jFldEmtBairro.getText(), util.ExtraiNumeros(jFldEmtCep.getText()), jFldtPais.getText(), jFldEmtUf.getText(), jFldEmtCodMun.getText(), jFldEmtMunicipio.getText().toString(), jFldEmtTelefone.getText(), jFldEmtEmail.getText(), jFldEmtRNTRC.getText(),
                            jFldRdvRntrc.getText(), jFldRdvCodAgendamentoPorto.getText(), jFldRdvCodVeic.getText(), BuscaCodTipoCarroceria(jLblRdvTpCarroceria.getText()),
                            util.ExtraiNumerosLetra(jLblRdvPlaca.getText()), Integer.parseInt(util.ExtraiNumeros(jLblRdvTaraKG.getText())), jLblRdvRenavam.getText(), jLblRdvUFVeic.getText(),
                            BuscaCodTipoRodado(jLblRdvTpRodado.getText()), Integer.parseInt(util.ExtraiNumeros(jLblRdvCapacidadeKG.getText())), Integer.parseInt(util.ExtraiNumeros(jLblRdvCapacidadeM3.getText().replaceAll(" M3", ""))),
                            VerificaCodigo(jFldRdvCodProp.getText()), jLblRdvPropietario.getText(), BuscaCodTipoProprietario(jLblRdvTpProprietario.getText()), util.ExtraiNumeros(jLblRdvCpfProprietario.getText()), util.ExtraiNumeros(jLblRdvCnpjProprietario.getText()),
                            jLblRdvRntrcProprietario.getText(), jLblRdvInscEstProprietario.getText(), jLblRdvUfProprietario.getText(),
                            VerificaCodigo(jFldAquaCodInterno.getText()), jFldAquaIdEmb.getText(), jLblAquaNomeEmbarcacao.getText(), jLblAquaTpEmb.getText(), jLblAquaIRIN.getText(), jFldAquaCodPrtEmbarque.getText(), jLblAquaNomePrtEmbarque.getText(), jFldAquaCodPrtDestino.getText(),
                            jLblAquaNomePrtDestino.getText(), jFldAquaCodPrtTrans.getText(), jLblAquaNomePrtTrans.getText(), TipoNavegacao(), jFldAquaNrViagem.getText(), jFldTotQtdCte.getText(), jFldTotQtdNFe.getText(), jFldTotQtdMDFe.getText(), Double.parseDouble(util.TrocaVirgulaPorPonto(jFldTotVlTotalMercadoria.getText())), UnidadeMedidaPeso(), Double.parseDouble(util.TrocaVirgulaPorPonto(jFldTotQtdPesoBrutoTotal.getText())),
                            jTxtAreaInfoAdicionaisFisco.getText(), jTxtAreaInfoAdicionaisContribuinte.getText());
                    
                    
                    
                }

            }

            if (tag_acao == "3") {
                DeletarDados(tabusu.getCodigo(), tabusu.getNome(), util.FormataDataBanco(new Date()), "3");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro...\n" + e.getLocalizedMessage());
        }

    }//GEN-LAST:event_jBtEditSalvarActionPerformed

    private void jBtEditSalvarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtEditSalvarKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jBtEditSalvar.doClick();
        }

        if (evt.getKeyCode() == evt.VK_RIGHT) {
            jBtEditFechar.requestFocus();
        }
    }//GEN-LAST:event_jBtEditSalvarKeyPressed

    private void jBtEditFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtEditFecharActionPerformed
        jPnlEdit.setVisible(false);
        jPnlBusca.setVisible(true);
        BuscaMDFePorParametro();
    }//GEN-LAST:event_jBtEditFecharActionPerformed

    private void jBtEditFecharKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtEditFecharKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jPnlBusca.setVisible(true);
            jPnlEdit.setVisible(false);

        }

        if (evt.getKeyCode() == evt.VK_LEFT) {
            jBtEditSalvar.requestFocus();
        }

        if (evt.getKeyCode() == evt.VK_RIGHT) {
            //  jFldNomeEmb.requestFocus();
        }
    }//GEN-LAST:event_jBtEditFecharKeyPressed

    private void jCmbBxDdMDFeUfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxDdMDFeUfKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jCmbBxDdTpEmitente.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxDdMDFeUfKeyPressed

    private void jCmbBxDdTpEmitenteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxDdTpEmitenteKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jCmbBxDdModalidade.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxDdTpEmitenteKeyPressed

    private void jFldDdSerieFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldDdSerieFocusLost
        //Formata o campo de texto caso tenha mais de 0 caracteres
        if (jFldDdSerie.getText().length() > 0) {
            DecimalFormat df = new DecimalFormat("000");
            jFldDdSerie.setText(df.format(Integer.parseInt(jFldDdSerie.getText())));
        }
    }//GEN-LAST:event_jFldDdSerieFocusLost

    private void jFldDdSerieKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldDdSerieKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldDdNumero.requestFocus();
        }
    }//GEN-LAST:event_jFldDdSerieKeyPressed

    private void jFldDdNumeroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldDdNumeroFocusLost
        //Formata o campo de texto caso tenha mais de 0 caracteres
        if (jFldDdNumero.getText().length() > 0) {
            DecimalFormat df = new DecimalFormat("000000000");
            jFldDdNumero.setText(df.format(Integer.parseInt(jFldDdNumero.getText())));
        }
    }//GEN-LAST:event_jFldDdNumeroFocusLost

    private void jFldDdNumeroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldDdNumeroKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldDdDataHoraEmissao.requestFocus();
        }
    }//GEN-LAST:event_jFldDdNumeroKeyPressed

    private void jFldDdDataHoraEmissaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldDdDataHoraEmissaoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldDdDataHoraInicioViagem.requestFocus();
        }
    }//GEN-LAST:event_jFldDdDataHoraEmissaoKeyPressed

    private void jCmbBxDdModalidadeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxDdModalidadeKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jCmbBxDdFormaEmissao.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxDdModalidadeKeyPressed

    private void jCmbBxDdFormaEmissaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxDdFormaEmissaoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jCmbBxDdUfLocalCarreg.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxDdFormaEmissaoKeyPressed

    private void jFldDdDataHoraInicioViagemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldDdDataHoraInicioViagemKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jChckBxDdInformarCodNumerico.requestFocus();
        }
    }//GEN-LAST:event_jFldDdDataHoraInicioViagemKeyPressed

    private void jChckBxDdInformarCodNumericoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jChckBxDdInformarCodNumericoItemStateChanged
        /*
        Evento para deixar visível ou invisível o codigo numerico da nota e o Digito Verificador dessa
        de acordo com a situação do CheckBox
         */
        if (jChckBxDdInformarCodNumerico.isSelected() == true) {
            jLblDV.setVisible(true);
            jLblCodNumerico.setVisible(true);
            jFldDdCodNumerico.setVisible(true);
            jFldDdDV.setVisible(true);
        } else {
            jLblDV.setVisible(false);
            jLblCodNumerico.setVisible(false);
            jFldDdCodNumerico.setVisible(false);
            jFldDdDV.setVisible(false);
        }
    }//GEN-LAST:event_jChckBxDdInformarCodNumericoItemStateChanged

    private void jChckBxDdInformarCodNumericoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jChckBxDdInformarCodNumericoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldDdCodNumerico.requestFocus();
        }
    }//GEN-LAST:event_jChckBxDdInformarCodNumericoKeyPressed

    private void jFldDdCodNumericoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldDdCodNumericoFocusLost
        //Formata o campo de texto caso tenha mais de 0 caracteres
        if (jFldDdCodNumerico.getText().length() > 0) {
            DecimalFormat df = new DecimalFormat("00000000");
            jFldDdCodNumerico.setText(df.format(Integer.parseInt(jFldDdCodNumerico.getText())));
        }

    }//GEN-LAST:event_jFldDdCodNumericoFocusLost

    private void jFldDdCodNumericoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldDdCodNumericoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jCmbBxDdMDFeUf.requestFocus();
        }
    }//GEN-LAST:event_jFldDdCodNumericoKeyPressed

    private void jCmbBxDdUfLocalCarregFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbBxDdUfLocalCarregFocusLost

    }//GEN-LAST:event_jCmbBxDdUfLocalCarregFocusLost

    private void jCmbBxDdUfLocalCarregKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxDdUfLocalCarregKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jCmbBxDdMunicipioLocalCarreg.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxDdUfLocalCarregKeyPressed

    private void jCmbBxDdMunicipioLocalCarregKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxDdMunicipioLocalCarregKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jBtDdIncluirMunicipioLocalCarreg.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxDdMunicipioLocalCarregKeyPressed

    private void jBtDdExcluirMunicipioLocalCarregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtDdExcluirMunicipioLocalCarregActionPerformed
        if (jTableDdMunicipioLocalCarreg.getSelectedRow() > -1) {
            Integer option = JOptionPane.showConfirmDialog(null, "Deseja excluir o(s) municipio(s) selecionado(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                DeletarLocalDeCarregamento(jFldDdNumero.getText());
            }

        } else {
            JOptionPane.showMessageDialog(null, "Selecione o item para deletar!");
        }

    }//GEN-LAST:event_jBtDdExcluirMunicipioLocalCarregActionPerformed

    private void jBtDdIncluirMunicipioLocalCarregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtDdIncluirMunicipioLocalCarregActionPerformed
        //Verifica se a UF e o municipio foram selecionados e se já não foram inserifo
        if (VerificaDdLocalCarregamento() == true) {
            InserirLocalDeCarregamento(jFldDdNumero.getText(), jCmbBxDdUfLocalCarreg.getSelectedItem().toString(),
                    BuscaCodMunicipio(jCmbBxDdMunicipioLocalCarreg.getSelectedItem().toString(), jCmbBxDdUfLocalCarreg.getSelectedItem().toString()), jCmbBxDdMunicipioLocalCarreg.getSelectedItem().toString());
            CarregaTudoLocalCarregamento(jFldDdNumero.getText());
        }
    }//GEN-LAST:event_jBtDdIncluirMunicipioLocalCarregActionPerformed

    private void jCmbBxDdUfPercursoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxDdUfPercursoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jBtDdIncluirUfPercurso.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxDdUfPercursoKeyPressed

    private void jBtDdIncluirUfPercursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtDdIncluirUfPercursoActionPerformed
        if (VerificaDdLocalPercurso() == true) {
            InserirUfPercurso(BuscaCodUf(jCmbBxDdUfPercurso.getSelectedItem().toString()), jFldDdNumero.getText(), jCmbBxDdUfPercurso.getSelectedItem().toString());
        }
    }//GEN-LAST:event_jBtDdIncluirUfPercursoActionPerformed

    private void jBtDdExcluirUfPercursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtDdExcluirUfPercursoActionPerformed
        if (jBtEditSalvar.isEnabled() == true) {
            if (jTableDdUfPercurso.getSelectedRow() > -1) {
                Integer option = JOptionPane.showConfirmDialog(null, "Deseja excluir a(s) UF(s) selecionada(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    DeletarUfPercurso(jFldDdNumero.getText());
                }

            } else {
                JOptionPane.showMessageDialog(null, "Selecione o item para deletar!");
            }
        }

    }//GEN-LAST:event_jBtDdExcluirUfPercursoActionPerformed

    private void jCmbBxDdUfLocalDescarregKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxDdUfLocalDescarregKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jBtEditSalvar.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxDdUfLocalDescarregKeyPressed

    private void jFldEmtCNPJActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldEmtCNPJActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldEmtCNPJActionPerformed

    private void jFldEmtInscEstadualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldEmtInscEstadualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldEmtInscEstadualActionPerformed

    private void jFldEmtInscEstadualKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldEmtInscEstadualKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldEmtRazaoSocial.requestFocus();
        }
    }//GEN-LAST:event_jFldEmtInscEstadualKeyPressed

    private void jFldEmtRazaoSocialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldEmtRazaoSocialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldEmtRazaoSocialActionPerformed

    private void jFldEmtRazaoSocialKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldEmtRazaoSocialKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldEmtNomeFantasia.requestFocus();
        }
    }//GEN-LAST:event_jFldEmtRazaoSocialKeyPressed

    private void jFldEmtNomeFantasiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldEmtNomeFantasiaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldEmtNomeFantasiaActionPerformed

    private void jFldEmtNomeFantasiaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldEmtNomeFantasiaKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldEmtLogradouro.requestFocus();
        }
    }//GEN-LAST:event_jFldEmtNomeFantasiaKeyPressed

    private void jFldEmtComplementoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldEmtComplementoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldEmtBairro.requestFocus();
        }
    }//GEN-LAST:event_jFldEmtComplementoKeyPressed

    private void jFldEmtBairroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldEmtBairroKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldEmtBairro.requestFocus();
        }
    }//GEN-LAST:event_jFldEmtBairroKeyPressed

    private void jFldEmtNumeroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldEmtNumeroKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldEmtComplemento.requestFocus();
        }
    }//GEN-LAST:event_jFldEmtNumeroKeyPressed

    private void jFldEmtLogradouroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldEmtLogradouroKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldEmtNumero.requestFocus();
        }
    }//GEN-LAST:event_jFldEmtLogradouroKeyPressed

    private void jFldEmtCepKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldEmtCepKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldtPais.requestFocus();
        }
    }//GEN-LAST:event_jFldEmtCepKeyPressed

    private void jFldEmtTelefoneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldEmtTelefoneKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldEmtEmail.requestFocus();
        }
    }//GEN-LAST:event_jFldEmtTelefoneKeyPressed

    private void jCmbBxDdMDFeUfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbBxDdMDFeUfFocusLost

    }//GEN-LAST:event_jCmbBxDdMDFeUfFocusLost

    private void jTablePrincipalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePrincipalMouseClicked

    }//GEN-LAST:event_jTablePrincipalMouseClicked

    private void jFldRdvRntrcKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvRntrcKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldRdvCodAgendamentoPorto.requestFocus();
        }
    }//GEN-LAST:event_jFldRdvRntrcKeyPressed

    private void jFldRdvCiotKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvCiotKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            
            if(jRadioCpfCiot.isSelected() == true){
                jRadioCpfCiot.requestFocus();
            }else if(jRadioCnpjCiot.isSelected() == true){
                jRadioCnpjCiot.requestFocus();
            }
            
        }
    }//GEN-LAST:event_jFldRdvCiotKeyPressed

    private void jFldRdvCodAgendamentoPortoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvCodAgendamentoPortoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            
                jFldRdvCiot.requestFocus();
            
        }
    }//GEN-LAST:event_jFldRdvCodAgendamentoPortoKeyPressed

    private void jFldRdvCodVeicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvCodVeicKeyPressed
        if (evt.getKeyCode() == evt.VK_F11) {
            jBtBuscaVeiculo.doClick();
        }
    }//GEN-LAST:event_jFldRdvCodVeicKeyPressed

    private void jFldRdvCodPropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldRdvCodPropActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldRdvCodPropActionPerformed

    private void jFldRdvCodPropKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvCodPropKeyPressed
        if (evt.getKeyCode() == evt.VK_F11) {
            //   jBtBuscaProprietario.doClick();
        }
    }//GEN-LAST:event_jFldRdvCodPropKeyPressed

    private void jFldRdvCodCondutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldRdvCodCondutorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldRdvCodCondutorActionPerformed

    private void jFldRdvCodCondutorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvCodCondutorKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_F11) {
            jBtBuscaCondutor.doClick();
        }

        if (evt.getKeyCode() == evt.VK_ENTER) {
            jBtIncluirCondutor.requestFocus();
        }

    }//GEN-LAST:event_jFldRdvCodCondutorKeyPressed

    private void jFldRdvCodReboqueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvCodReboqueKeyPressed
        if (evt.getKeyCode() == evt.VK_F11) {
            jBtBuscaReboque.doClick();
        }

        if (evt.getKeyCode() == evt.VK_ENTER) {
            jBtIncluirReboque.requestFocus();
        }
    }//GEN-LAST:event_jFldRdvCodReboqueKeyPressed

    private void jFldRdvCodReboqueKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvCodReboqueKeyReleased

    }//GEN-LAST:event_jFldRdvCodReboqueKeyReleased

    private void jFldRdvCodFornecedorValeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvCodFornecedorValeKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldRdvCodRespPag.requestFocus();
        }

        if (evt.getKeyCode() == evt.VK_F11) {
            jBtBuscaFornecedorVale.doClick();
        }
    }//GEN-LAST:event_jFldRdvCodFornecedorValeKeyPressed

    private void jFldRdvCodRespPagKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvCodRespPagKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldRdvNrComprovante.requestFocus();
        }

        if (evt.getKeyCode() == evt.VK_F11) {
            jBtBuscaRespPagamento.doClick();
        }
    }//GEN-LAST:event_jFldRdvCodRespPagKeyPressed

    private void jFldRdvNrComprovanteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvNrComprovanteKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldRdvValorPedagio.requestFocus();            
            jFldRdvValorPedagio.selectAll();
        }
    }//GEN-LAST:event_jFldRdvNrComprovanteKeyPressed

    private void jCmbBxDocMunDocumentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxDocMunDocumentoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jBtDocIncuirMunDescarreg.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxDocMunDocumentoKeyPressed

    private void jCmbBxDocUfMunDocumentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxDocUfMunDocumentoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jCmbBxDocMunDocumento.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxDocUfMunDocumentoKeyPressed

    private void jCmbBxDocUfMunDescarregKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxDocUfMunDescarregKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCmbBxDocUfMunDescarregKeyPressed

    private void jCmbBxDocMunDescarregKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxDocMunDescarregKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCmbBxDocMunDescarregKeyPressed

    private void jTabEditInformacoesDocumentoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabEditInformacoesDocumentoStateChanged
        //Condicao para mostrar o panel com as informacoes de Uf e Municipio dos documentos
        if (jTabEditInformacoesDocumento.getSelectedIndex() > 0) {
            jPnlDocUfMun.setVisible(true);
        } else {
            jPnlDocUfMun.setVisible(false);
        }

    }//GEN-LAST:event_jTabEditInformacoesDocumentoStateChanged

    private void jFldTotQtdCteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldTotQtdCteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldTotQtdCteActionPerformed

    private void jFldTotQtdCteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldTotQtdCteKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldTotQtdNFe.requestFocus();
        }
    }//GEN-LAST:event_jFldTotQtdCteKeyPressed

    private void jFldTotQtdNFeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldTotQtdNFeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldTotQtdNFeActionPerformed

    private void jFldTotQtdNFeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldTotQtdNFeKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldTotVlTotalMercadoria.requestFocus();
        }
    }//GEN-LAST:event_jFldTotQtdNFeKeyPressed

    private void jFldTotVlTotalMercadoriaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldTotVlTotalMercadoriaFocusLost
        if (jFldTotVlTotalMercadoria.getText().length() > 0) {
            jFldTotVlTotalMercadoria.setText(new DecimalFormat("#,##0.00").format(Double.parseDouble(util.TrocaVirgulaPorPonto(jFldTotVlTotalMercadoria.getText()))));
        } else {
            jFldTotVlTotalMercadoria.setText(new DecimalFormat("#,##0.00").format(0.0));
        }
    }//GEN-LAST:event_jFldTotVlTotalMercadoriaFocusLost

    private void jFldTotVlTotalMercadoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldTotVlTotalMercadoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldTotVlTotalMercadoriaActionPerformed

    private void jFldTotVlTotalMercadoriaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldTotVlTotalMercadoriaKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jCmbBxTotCodUnMedidaPeso.requestFocus();
        }
    }//GEN-LAST:event_jFldTotVlTotalMercadoriaKeyPressed

    private void jFldTotVlTotalMercadoriaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldTotVlTotalMercadoriaKeyTyped
        String Caracteres = "0123456789,";
        if (!Caracteres.contains(evt.getKeyChar() + "")) {
            evt.consume();
        }
    }//GEN-LAST:event_jFldTotVlTotalMercadoriaKeyTyped

    private void jCmbBxTotCodUnMedidaPesoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxTotCodUnMedidaPesoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldTotQtdPesoBrutoTotal.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxTotCodUnMedidaPesoKeyPressed

    private void jFldTotQtdPesoBrutoTotalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldTotQtdPesoBrutoTotalFocusLost
        if (jFldTotQtdPesoBrutoTotal.getText().length() == 0) {
            jFldTotQtdPesoBrutoTotal.setText(new DecimalFormat("#,##0.0000").format(0.0));
        } else {
            jFldTotQtdPesoBrutoTotal.setText(new DecimalFormat("#,##0.0000").format(Double.parseDouble(util.TrocaVirgulaPorPonto(jFldTotQtdPesoBrutoTotal.getText()))));
        }
    }//GEN-LAST:event_jFldTotQtdPesoBrutoTotalFocusLost

    private void jFldTotQtdPesoBrutoTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldTotQtdPesoBrutoTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldTotQtdPesoBrutoTotalActionPerformed

    private void jFldTotQtdPesoBrutoTotalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldTotQtdPesoBrutoTotalKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldTotQtdPesoBrutoTotalKeyTyped

    private void jRadioCnpjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioCnpjActionPerformed
        jFldTotDocumentoAutorizado.setText("");
    }//GEN-LAST:event_jRadioCnpjActionPerformed

    private void jBtEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtEditarActionPerformed
        int option = JOptionPane.showConfirmDialog(null, "A situação do MDFe voltará para \"Em Digitação\". \n Deseja continuar?", "Confirmação", JOptionPane.YES_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            AlterarDadosSituacao(jFldDdNumero.getText(), "Em Digitação");
            jLblStatusMDFe.setText("Em Digitação");
            jLblChaveDeAcesso.setText("");
            HabilitarComponentes(true);
            jBtEditar.setEnabled(false);
            jBtEditSalvar.setEnabled(true);
            jChckBxDdInformarEmitente.setEnabled(false);
            jChckBxRdvInformarEmitenteReboque.setEnabled(false);
        }

        
        
    }//GEN-LAST:event_jBtEditarActionPerformed

    private void jBtEditarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtEditarKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtEditarKeyPressed

    private void jBtEditTransmitirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtEditTransmitirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtEditTransmitirActionPerformed

    private void jBtEditTransmitirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtEditTransmitirKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtEditTransmitirKeyPressed

    private void jBtEditCancelarMDFeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtEditCancelarMDFeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtEditCancelarMDFeActionPerformed

    private void jBtEditCancelarMDFeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtEditCancelarMDFeKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtEditCancelarMDFeKeyPressed

    private void jBtEditEncerraMDFeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtEditEncerraMDFeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtEditEncerraMDFeActionPerformed

    private void jBtEditEncerraMDFeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtEditEncerraMDFeKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtEditEncerraMDFeKeyPressed

    private void jBtEditExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtEditExportarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtEditExportarActionPerformed

    private void jBtEditExportarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtEditExportarKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtEditExportarKeyPressed

    private void jBtEditConsultarProtocoloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtEditConsultarProtocoloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtEditConsultarProtocoloActionPerformed

    private void jBtEditConsultarProtocoloKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtEditConsultarProtocoloKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtEditConsultarProtocoloKeyPressed

    private void jBtEditImprimirDAMDFEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtEditImprimirDAMDFEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtEditImprimirDAMDFEActionPerformed

    private void jBtEditImprimirDAMDFEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBtEditImprimirDAMDFEKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtEditImprimirDAMDFEKeyPressed

    private void jBtBuscaVeiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaVeiculoActionPerformed
         TelaBuscaVeiculo telaVeic = new TelaBuscaVeiculo();
        telaVeic.setVisible(true);
        jFldRdvCodVeic.setText(telaVeic.sCOD.toString());
        jLblRdvTpCarroceria.setText(telaVeic.sTP_CARROCERIA);
        jLblRdvPlaca.setText(telaVeic.sPLACA);
        jLblRdvTaraKG.setText(telaVeic.sTARA);
        jLblRdvRenavam.setText(telaVeic.sRENAVAM);
        jLblRdvUFVeic.setText(telaVeic.sUF);
        jLblRdvCapacidadeKG.setText(telaVeic.sCAPACIDADEKG);
        jLblRdvCapacidadeM3.setText(telaVeic.sCAPACIDADEM3);
        jLblRdvTpRodado.setText(telaVeic.sTP_RODADO);
        jFldRdvCodProp.setText(telaVeic.sCODPROP);

        if (telaVeic.sPROPTERC.equals("P")) {
            jChckBxDdInformarEmitente.setSelected(false);
            jChckBxDdInformarEmitente.setEnabled(false);
            //jFldRdvRntrc.setText(jFldEmtRNTRC.getText());
            jLblRdvPropietario.setText("");
            jLblRdvTpProprietario.setText("");
            jLblRdvCpfProprietario.setText("");
            jLblRdvCnpjProprietario.setText("");
            jLblRdvRntrcProprietario.setText("");
            jLblRdvUfProprietario.setText("");
            jLblRdvInscEstProprietario.setText("");
        } else if (telaVeic.sPROPTERC.equals("T")) {
            jChckBxDdInformarEmitente.setSelected(true);
            jChckBxDdInformarEmitente.setEnabled(false);
            //jFldRdvRntrc.setText("");
        }

        if (jFldRdvCodProp.getText().length() > 0) {
            BuscaProprietario(jFldRdvCodProp.getText());
        }
        jFldRdvCodVeic.requestFocus();
    }//GEN-LAST:event_jBtBuscaVeiculoActionPerformed

    private void jFldRdvCodVeicFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldRdvCodVeicFocusLost
        if (jFldRdvCodVeic.getText().length() > 0) {
            BuscaVeiculoTracao(jFldRdvCodVeic.getText());
            if (jFldRdvCodProp.getText().length() > 0) {
                BuscaProprietario(jFldRdvCodProp.getText());
                jChckBxDdInformarEmitente.setEnabled(false);
            }

        }

    }//GEN-LAST:event_jFldRdvCodVeicFocusLost

    private void jFldRdvCodVeicFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldRdvCodVeicFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldRdvCodVeicFocusGained

    private void jFldRdvCodPropFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldRdvCodPropFocusLost
        if (jFldRdvCodProp.getText().length() > 0) {
            BuscaProprietario(jFldRdvCodProp.getText());
        }
    }//GEN-LAST:event_jFldRdvCodPropFocusLost

    private void jBtBuscaCondutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaCondutorActionPerformed
        TelaBuscaCondutor telaCondutor = new TelaBuscaCondutor();
        telaCondutor.setVisible(true);
        jFldRdvCodCondutor.setText(telaCondutor.sCOD.toString());
        jLblRdvCondutor.setText(telaCondutor.sNOME);
        jLblRdvCpfCondutor.setText(telaCondutor.sCPF);
        jFldRdvCodCondutor.requestFocus();
    }//GEN-LAST:event_jBtBuscaCondutorActionPerformed

    private void jBtIncluirCondutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIncluirCondutorActionPerformed
        if (VerificaRdvCondutor() == true) {
            InserirCondutor(jFldRdvCodCondutor.getText(), jFldDdNumero.getText(), jLblRdvCondutor.getText(), util.ExtraiNumeros(jLblRdvCpfCondutor.getText()));
            jFldRdvCodCondutor.requestFocus();
        }
    }//GEN-LAST:event_jBtIncluirCondutorActionPerformed

    private void jFldRdvCodCondutorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldRdvCodCondutorFocusLost
        if (jFldRdvCodCondutor.getText().length() > 0) {
            BuscaCondutor(jFldRdvCodCondutor.getText());
        }
    }//GEN-LAST:event_jFldRdvCodCondutorFocusLost

    private void jBtExcluirCondutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirCondutorActionPerformed
        if (jBtEditSalvar.isEnabled() == true) {
            if (jTableRdvCondutores.getSelectedRow() > -1) {
                DeletarCondutor(jFldDdNumero.getText());
            } else {
                JOptionPane.showMessageDialog(null, "Selecione o item para deletar!");
            }
        }
    }//GEN-LAST:event_jBtExcluirCondutorActionPerformed

    private void jBtBuscaReboqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaReboqueActionPerformed
        TelaBuscaReboque telaReboque = new TelaBuscaReboque();
        telaReboque.setVisible(true);
        jFldRdvCodReboque.setText(telaReboque.sCOD.toString());
        jLblRdvPlacaReboque.setText(telaReboque.sPLACA);
        jLblRdvTpCarroceriaReboque.setText(telaReboque.sTP_CARROCERIA);
        jLblRdvRenavamReboque.setText(telaReboque.sRENAVAM);
        jLblRdvRntrcReboque.setText(telaReboque.sRNTRC);
        jLblRdvUfReboque.setText(telaReboque.sUF);
        jLblRdvCapacidadeKGReboque.setText(telaReboque.sCAPACIDADEKG);
        jLblRdvCapacidadeM3Reboque.setText(telaReboque.sCAPACIDADEM3);
        jLblRdvTipoRodadoReboque.setText(telaReboque.sTP_RODADO);
        jFldRdvCodPropReboque.setText(telaReboque.sCODPROP);
        if (jFldRdvCodPropReboque.getText().length() > 0) {
            jChckBxRdvInformarEmitenteReboque.setSelected(true);
            BuscaProprietario(jFldRdvCodPropReboque.getText());
        } else {
            jChckBxRdvInformarEmitenteReboque.setSelected(false);
            jFldRdvCodPropReboque.setText("");
            jLblRdvPropietarioReboque.setText("");
            jLblRdvTpProprietarioReboque.setText("");
            jLblRdvCpfProprietarioReboque.setText("");
            jLblRdvCnpjProprietarioReboque.setText("");
            jLblRdvRntrcProprietarioReboque.setText("");
            jLblRdvInscEstProprietarioReboque.setText("");
        }
        jFldRdvCodReboque.requestFocus();
    }//GEN-LAST:event_jBtBuscaReboqueActionPerformed

    private void jBtIncluirReboqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIncluirReboqueActionPerformed
        if (VerificaRdvReboque() == true) {
            InserirReboque(jFldRdvCodReboque.getText(), jFldDdNumero.getText(), VerificaCodigo(jFldRdvCodPropReboque.getText()), jLblRdvPropietarioReboque.getText());
            jFldRdvCodReboque.requestFocus();
        }
    }//GEN-LAST:event_jBtIncluirReboqueActionPerformed

    private void jFldRdvCodReboqueFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldRdvCodReboqueFocusLost
        if (jFldRdvCodReboque.getText().length() > 0) {
            BuscaReboque(jFldRdvCodReboque.getText());
        }
    }//GEN-LAST:event_jFldRdvCodReboqueFocusLost

    private void jBtExcluirReboqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirReboqueActionPerformed
        if (jBtEditSalvar.isEnabled() == true) {
            if (jTableRdvInfoReboque.getSelectedRow() > -1) {
                Integer option = JOptionPane.showConfirmDialog(null, "Deseja excluir o(s) reboque(s) selecionado(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    DeletarReboque(jFldDdNumero.getText());
                }
            } else {
                JOptionPane.showMessageDialog(null, "Selecione o item para deletar!");
            }
        }


    }//GEN-LAST:event_jBtExcluirReboqueActionPerformed

    private void jBtBuscaFornecedorValeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaFornecedorValeActionPerformed
        TelaBuscaFornecedorVale telaVale = new TelaBuscaFornecedorVale();
        telaVale.setVisible(true);
        jFldRdvCodFornecedorVale.setText(telaVale.sCOD.toString());
        jLblRdvFornecedorVale.setText(telaVale.sNOME);
        jLblRdvCnpjFornecedor.setText(telaVale.sCNPJ);
        jFldRdvCodFornecedorVale.requestFocus();
    }//GEN-LAST:event_jBtBuscaFornecedorValeActionPerformed

    private void jBtBuscaRespPagamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaRespPagamentoActionPerformed
        TelaBuscaResponsavelPagamento telaResp = new TelaBuscaResponsavelPagamento();
        telaResp.setVisible(true);
        jFldRdvCodRespPag.setText(telaResp.sCODIGO.toString());
        jLblRdvResponsavelPagamento.setText(telaResp.sNOME);
        jLblRdvResponsavelCpf.setText(telaResp.sCPF);
        jLblRdvResponsavelCnpj.setText(telaResp.sCNPJ);
        jFldRdvCodRespPag.requestFocus();
    }//GEN-LAST:event_jBtBuscaRespPagamentoActionPerformed

    private void jBtIncluirPedagioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIncluirPedagioActionPerformed
        if (VerificaRdvValePedagio() == true) {
            InserirValePedagio(BuscaCodMaxValePedagio(jFldDdNumero.getText()).toString(), jFldDdNumero.getText(), jLblRdvFornecedorVale.getText(), util.ExtraiNumeros(jLblRdvCnpjFornecedor.getText()), jLblRdvResponsavelPagamento.getText(),
                    util.ExtraiNumeros(jLblRdvResponsavelCpf.getText()), util.ExtraiNumeros(jLblRdvResponsavelCnpj.getText()), jFldRdvNrComprovante.getText(), Double.parseDouble(util.TrocaVirgulaPorPonto(jFldRdvValorPedagio.getText())));
            jFldRdvCodFornecedorVale.requestFocus();
        }
    }//GEN-LAST:event_jBtIncluirPedagioActionPerformed

    private void jFldRdvCodFornecedorValeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldRdvCodFornecedorValeFocusLost
        if (jFldRdvCodFornecedorVale.getText().length() > 0) {
            BuscaFornecedorVale(jFldRdvCodFornecedorVale.getText());
        }
    }//GEN-LAST:event_jFldRdvCodFornecedorValeFocusLost

    private void jFldRdvCodRespPagFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldRdvCodRespPagFocusLost
        if (jFldRdvCodRespPag.getText().length() > 0) {
            BuscaResponsavelPagamento(jFldRdvCodRespPag.getText());
        }
    }//GEN-LAST:event_jFldRdvCodRespPagFocusLost

    private void jBtExcluirPedagioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirPedagioActionPerformed
        if (jBtEditSalvar.isEnabled() == true) {
            if (jTableRdvInfoValePedagio.getSelectedRow() > -1) {
                Integer option = JOptionPane.showConfirmDialog(null, "Deseja excluir o(s) vale(s) selecionado(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    DeletarValePedagio(jFldDdNumero.getText());
                }
            } else {
                JOptionPane.showMessageDialog(null, "Selecione o item para deletar!");
            }
        }
    }//GEN-LAST:event_jBtExcluirPedagioActionPerformed

    private void jFldRdvCodVeicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldRdvCodVeicActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldRdvCodVeicActionPerformed

    private void jFldRdvCodReboqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldRdvCodReboqueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldRdvCodReboqueActionPerformed

    private void jFldRdvCodRespPagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldRdvCodRespPagActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldRdvCodRespPagActionPerformed

    private void jTabEditStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabEditStateChanged
        //Se a tab numero 4 for selecionada, carrega o todos os municipios do local de carregamento para 
        //a combobox de municipios de descarregamento e deixa o aviso invisivel
        if (jTabEdit.getSelectedIndex() == 4) {
            jCmbBxDocUfMunDescarreg.removeAllItems();
            jCmbBxDocMunDescarreg.removeAllItems();
            //VERIFICA SE TEM LOCAL DE DESCARREGAMENTO PREENCHIDO
            if (jCmbBxDdUfLocalDescarreg.getSelectedItem() != null) {
                //JOGA O LOCAL DE DESCARREGAMENTO PREENCHIDO NA UF DO MINICIPIOS DE DESCARREGAMENTO
                jCmbBxDocUfMunDescarreg.addItem(jCmbBxDdUfLocalDescarreg.getSelectedItem().toString());

                //CARREGA O MUNICIPIOS DA UF SELECIONADA DO MINICIPIOS DE DESCARREGAMENTO
                BuscaMunicipio(jCmbBxDocUfMunDescarreg.getSelectedItem(), jCmbBxDocMunDescarreg);

                CarregaComboBoxUfDescarregamentoDocumento(jFldDdNumero.getText());

                if (jCmbBxDocUfMunDocumento.getSelectedItem() != null) {
                    CarregaComboBoxMunicipioDescarregamentoDocumento(jFldDdNumero.getText(), jCmbBxDocUfMunDocumento.getSelectedItem().toString());

                    String CodMun = BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString());

                    CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), "C", CodMun, jTableDocCte);
                    CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), "N", CodMun, jTableDocNFe);
                    CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), "M", CodMun, jTableDocMDFe);
                }

                jLblAviso.setVisible(false);
            } else {
                jLblAviso.setVisible(true);
            }

        }

        //Busca a quantidade de CTE e NFE referenciadas
        if (jTabEdit.getSelectedIndex() == 5) {
            jFldTotQtdCte.setText(BuscaQtdDocumento(jFldDdNumero.getText(), "C").toString());
            jFldTotQtdNFe.setText(BuscaQtdDocumento(jFldDdNumero.getText(), "N").toString());
            jFldTotQtdMDFe.setText(BuscaQtdDocumento(jFldDdNumero.getText(), "M").toString());
        }
    }//GEN-LAST:event_jTabEditStateChanged

    private void jBtIncluirLacreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIncluirLacreActionPerformed
        if (VerificaTotNrLacres() == true) {
            InserirNrLacre(jFldDdNumero.getText(), jFldTotNrLacres.getText());
            jFldTotNrLacres.setText("");
            jFldTotNrLacres.requestFocus();
        }
    }//GEN-LAST:event_jBtIncluirLacreActionPerformed

    private void jBtExcluirLacreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirLacreActionPerformed
        if (jBtEditSalvar.isSelected() == true) {
            if (jTableTotNrLacre.getSelectedRow() > -1) {
                Integer option = JOptionPane.showConfirmDialog(null, "Deseja excluir o(s) lacre(s) selecionado(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    DeletarNrLacre(jFldDdNumero.getText());
                }
            } else {
                JOptionPane.showMessageDialog(null, "Selecione o item para deletar!");
            }
        }
    }//GEN-LAST:event_jBtExcluirLacreActionPerformed

    private void jFldTotDocumentoAutorizadoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldTotDocumentoAutorizadoFocusLost
        if (jFldTotDocumentoAutorizado.getText().length() > 0) {
            if (jRadioCpf.isSelected()) {
                if (util.VerificaCPF(jFldTotDocumentoAutorizado.getText()) == true) {
                    try {
                        jFldTotDocumentoAutorizado.setText(util.FormataCpf(jFldTotDocumentoAutorizado.getText()));
                    } catch (ParseException ex) {
                        Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "CPF Inválido!");
                    jFldTotDocumentoAutorizado.requestFocus();
                }
            } else if (jRadioCnpj.isSelected() == true) {
                if (util.VerificaCNPJ(jFldTotDocumentoAutorizado.getText()) == true) {
                    jFldTotDocumentoAutorizado.setText(util.FormataCnpj(jFldTotDocumentoAutorizado.getText()));
                } else {
                    JOptionPane.showMessageDialog(null, "CNPJ Inválido!");
                    jFldTotDocumentoAutorizado.requestFocus();
                }
            }
        }

    }//GEN-LAST:event_jFldTotDocumentoAutorizadoFocusLost

    private void jFldTotDocumentoAutorizadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldTotDocumentoAutorizadoFocusGained
        jFldTotDocumentoAutorizado.setText(util.ExtraiNumeros(jFldTotDocumentoAutorizado.getText()));
    }//GEN-LAST:event_jFldTotDocumentoAutorizadoFocusGained

    private void jFldTotDocumentoAutorizadoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldTotDocumentoAutorizadoKeyTyped
        String Caracteres = "0123456789";
        if (!Caracteres.contains(evt.getKeyChar() + "")) {
            evt.consume();
        }
    }//GEN-LAST:event_jFldTotDocumentoAutorizadoKeyTyped

    private void jBtIncluirAutorizadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIncluirAutorizadoActionPerformed
        if (VerificaDocumentoAutorizado() == true) {
            String tipo = "";
            if (jRadioCpf.isSelected() == true) {
                tipo = "1";
            } else if (jRadioCnpj.isSelected() == true) {
                tipo = "2";
            }
            InserirDocumento(jFldDdNumero.getText(), util.ExtraiNumeros(jFldTotDocumentoAutorizado.getText()), tipo);
            jFldTotDocumentoAutorizado.setText("");
            jFldTotDocumentoAutorizado.requestFocus();
        }

    }//GEN-LAST:event_jBtIncluirAutorizadoActionPerformed

    private void jBtExcluirAutorizadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirAutorizadoActionPerformed
        if (jBtEditSalvar.isEnabled() == true) {
            if (jTableTotAutorizados.getSelectedRow() > -1) {
                Integer option = JOptionPane.showConfirmDialog(null, "Deseja excluir o(s) autorizado(s) selecionado(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    DeletarDocumento(jFldDdNumero.getText());
                }
            } else {
                JOptionPane.showMessageDialog(null, "Selecione o item para deletar!");
            }
        }
    }//GEN-LAST:event_jBtExcluirAutorizadoActionPerformed

    private void jCmbBxDdModalidadeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCmbBxDdModalidadeItemStateChanged
        if (jCmbBxDdModalidade.getSelectedIndex() == 0) {
            jTabEdit.setEnabledAt(2, true);
            jTabEdit.setEnabledAt(3, false);
            //Desabilita a aba de referenciar MDFe
            jTabEditInformacoesDocumento.setEnabledAt(3, false);
            jTabEditInformacoesDocumento.setSelectedIndex(0);
        } else if (jCmbBxDdModalidade.getSelectedIndex() == 1) {
            jTabEdit.setEnabledAt(2, false);
            jTabEdit.setEnabledAt(3, true);
            //Habilita a aba de referenciar MDFe
            jTabEditInformacoesDocumento.setEnabledAt(3, true);
            jTabEditInformacoesDocumento.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jCmbBxDdModalidadeItemStateChanged

    private void jTablePrincipalMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablePrincipalMouseReleased

    }//GEN-LAST:event_jTablePrincipalMouseReleased

    private void jCmbBxDdUfLocalDescarregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbBxDdUfLocalDescarregActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_jCmbBxDdUfLocalDescarregActionPerformed

    private void jFldDdModeloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldDdModeloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldDdModeloActionPerformed

    private void jChckBxSelecionarTudoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jChckBxSelecionarTudoItemStateChanged
        if (jChckBxSelecionarTudo.isSelected() == true) {
            for (int linha = 0; linha < jTablePrincipal.getRowCount(); linha++) {
                jTablePrincipal.setValueAt(true, linha, 0);
                jBtBuscaExcluir.setEnabled(true);
            }
        } else {
            for (int linha = 0; linha < jTablePrincipal.getRowCount(); linha++) {
                jTablePrincipal.setValueAt(false, linha, 0);
                jBtBuscaExcluir.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jChckBxSelecionarTudoItemStateChanged

    private void jBtNovaPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtNovaPesquisaActionPerformed
        // TODO add your handling code here:
        GridUFCarregamento(1);

        jFldBuscaPeriodoEmissaoInicial.setText("");
        jFldBuscaSerie.setText("");
        jFldBuscaNumeroInicial.setText("");
        jCmbBxBuscaSituacao.setSelectedIndex(-1);
        jCmbBxBuscaTpEmissao.setSelectedIndex(-1);
        jCmbBxBuscaModalidade.setSelectedIndex(-1);
        jCmbBxBuscaUfCarregamento.setSelectedIndex(-1);
        jCmbBxBuscaUfDescarregamento.setSelectedIndex(-1);
        jCmbBxBuscaUfPercurso.setSelectedIndex(-1);
        jFldBuscaChaveAcessoCTe.setText("");
        jFldBuscaChaveAcessoNFe.setText("");
    }//GEN-LAST:event_jBtNovaPesquisaActionPerformed

    private void jBtPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtPesquisarActionPerformed
        // TODO add your handling code here:
        BuscaMDFePorParametro();
        // CarregaTudo();
    }//GEN-LAST:event_jBtPesquisarActionPerformed

    private void jFldBuscaChaveAcessoCTeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldBuscaChaveAcessoCTeKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldBuscaChaveAcessoNFe.requestFocus();
        }
    }//GEN-LAST:event_jFldBuscaChaveAcessoCTeKeyPressed

    private void jFldBuscaChaveAcessoCTeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldBuscaChaveAcessoCTeFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldBuscaChaveAcessoCTeFocusLost

    private void jFldBuscaChaveAcessoCTeAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jFldBuscaChaveAcessoCTeAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldBuscaChaveAcessoCTeAncestorAdded

    private void jFldBuscaChaveAcessoNFeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldBuscaChaveAcessoNFeKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jBtPesquisar.requestFocus();
        }
    }//GEN-LAST:event_jFldBuscaChaveAcessoNFeKeyPressed

    private void jFldBuscaChaveAcessoNFeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldBuscaChaveAcessoNFeFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldBuscaChaveAcessoNFeFocusLost

    private void jFldBuscaChaveAcessoNFeAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jFldBuscaChaveAcessoNFeAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldBuscaChaveAcessoNFeAncestorAdded

    private void jCmbBxBuscaUfPercursoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxBuscaUfPercursoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldBuscaChaveAcessoCTe.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxBuscaUfPercursoKeyPressed

    private void jCmbBxBuscaUfDescarregamentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxBuscaUfDescarregamentoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jCmbBxBuscaUfPercurso.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxBuscaUfDescarregamentoKeyPressed

    private void jCmbBxBuscaUfCarregamentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxBuscaUfCarregamentoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jCmbBxBuscaUfDescarregamento.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxBuscaUfCarregamentoKeyPressed

    private void jCmbBxBuscaModalidadeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxBuscaModalidadeKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jCmbBxBuscaUfCarregamento.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxBuscaModalidadeKeyPressed

    private void jCmbBxBuscaSituacaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxBuscaSituacaoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jCmbBxBuscaTpEmissao.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxBuscaSituacaoKeyPressed

    private void jCmbBxBuscaSituacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbBxBuscaSituacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCmbBxBuscaSituacaoActionPerformed

    private void jCmbBxBuscaTpEmissaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCmbBxBuscaTpEmissaoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jCmbBxBuscaModalidade.requestFocus();
        }
    }//GEN-LAST:event_jCmbBxBuscaTpEmissaoKeyPressed

    private void jCmbBxBuscaTpEmissaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbBxBuscaTpEmissaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCmbBxBuscaTpEmissaoActionPerformed

    private void jCmbBxBuscaTpEmissaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCmbBxBuscaTpEmissaoItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jCmbBxBuscaTpEmissaoItemStateChanged

    private void jFldBuscaNumeroInicialKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldBuscaNumeroInicialKeyPressed
        /* if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldBuscaNumeroFinal.requestFocus();
        }*/
    }//GEN-LAST:event_jFldBuscaNumeroInicialKeyPressed

    private void jFldBuscaNumeroInicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldBuscaNumeroInicialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldBuscaNumeroInicialActionPerformed

    private void jFldBuscaNumeroInicialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldBuscaNumeroInicialFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldBuscaNumeroInicialFocusLost

    private void jFldBuscaNumeroInicialAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jFldBuscaNumeroInicialAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldBuscaNumeroInicialAncestorAdded

    private void jFldBuscaSerieKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldBuscaSerieKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldBuscaNumeroInicial.requestFocus();
        }
    }//GEN-LAST:event_jFldBuscaSerieKeyPressed

    private void jFldBuscaSerieFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldBuscaSerieFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldBuscaSerieFocusLost

    private void jFldBuscaSerieAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jFldBuscaSerieAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldBuscaSerieAncestorAdded

    private void jFldBuscaPeriodoEmissaoFinalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldBuscaPeriodoEmissaoFinalKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldBuscaSerie.requestFocus();
        }
    }//GEN-LAST:event_jFldBuscaPeriodoEmissaoFinalKeyPressed

    private void jFldBuscaPeriodoEmissaoFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldBuscaPeriodoEmissaoFinalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldBuscaPeriodoEmissaoFinalActionPerformed

    private void jFldBuscaPeriodoEmissaoFinalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldBuscaPeriodoEmissaoFinalFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldBuscaPeriodoEmissaoFinalFocusLost

    private void jFldBuscaPeriodoEmissaoFinalAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jFldBuscaPeriodoEmissaoFinalAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldBuscaPeriodoEmissaoFinalAncestorAdded

    private void jFldBuscaPeriodoEmissaoInicialKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldBuscaPeriodoEmissaoInicialKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldBuscaPeriodoEmissaoFinal.requestFocus();
        }
    }//GEN-LAST:event_jFldBuscaPeriodoEmissaoInicialKeyPressed

    private void jFldBuscaPeriodoEmissaoInicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldBuscaPeriodoEmissaoInicialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldBuscaPeriodoEmissaoInicialActionPerformed

    private void jFldBuscaPeriodoEmissaoInicialFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldBuscaPeriodoEmissaoInicialFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldBuscaPeriodoEmissaoInicialFocusLost

    private void jFldBuscaPeriodoEmissaoInicialAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jFldBuscaPeriodoEmissaoInicialAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldBuscaPeriodoEmissaoInicialAncestorAdded

    private void jBtDocIncuirMunDescarregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtDocIncuirMunDescarregActionPerformed

        if (VerificaDocMunicipioDescarregamento() == true) {
            InserirMunicipioDescarregamento(jFldDdNumero.getText(), BuscaCodMunicipio(jCmbBxDocMunDescarreg.getSelectedItem().toString(), jCmbBxDocUfMunDescarreg.getSelectedItem().toString()),
                    jCmbBxDocUfMunDescarreg.getSelectedItem().toString(), jCmbBxDocMunDescarreg.getSelectedItem().toString());
        }

        //Carrega os combobox de municipios e estados depois de inserir
        CarregaComboBoxUfDescarregamentoDocumento(jFldDdNumero.getText());
        CarregaComboBoxMunicipioDescarregamentoDocumento(jFldDdNumero.getText(), jCmbBxDocUfMunDocumento.getSelectedItem().toString());
    }//GEN-LAST:event_jBtDocIncuirMunDescarregActionPerformed

    private void jBtDocExcluirMunDescarregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtDocExcluirMunDescarregActionPerformed
        if (jBtEditSalvar.isEnabled() == true) {
            if (jTableDocMunDescarreg.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(null, "Selecione um item para deletar!");
            } else {
                DeletarMunicipioDescarregamento(jFldDdNumero.getText());
            }

            //Carrega os combobox de municipios e estados depois de deletar
            CarregaComboBoxUfDescarregamentoDocumento(jFldDdNumero.getText());
            CarregaComboBoxMunicipioDescarregamentoDocumento(jFldDdNumero.getText(), jCmbBxDocUfMunDocumento.getSelectedItem().toString());
        }

    }//GEN-LAST:event_jBtDocExcluirMunDescarregActionPerformed

    private void jCmbBxDocUfMunDescarregFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbBxDocUfMunDescarregFocusLost

    }//GEN-LAST:event_jCmbBxDocUfMunDescarregFocusLost

    private void jBtDocIncluirCteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtDocIncluirCteActionPerformed
        if (BuscaQtdDocumento(jFldDdNumero.getText(), "C") <= 1000) {

            util.sDAD_CODIGO = Integer.parseInt(jFldDdNumero.getText());
            util.sCOD_MUN = BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString());
            util.sMUNICIPIO = jCmbBxDocMunDocumento.getSelectedItem().toString();
            util.sUF = jCmbBxDocUfMunDocumento.getSelectedItem().toString();
            util.sTIPO_DOC = "C";
            BuscaCodMaxDocumento(util.sTIPO_DOC, util.sCOD_MUN, util.sDAD_CODIGO.toString());

            InserirDocumento(util.sCODDOC, util.sDAD_CODIGO.toString(), "", "", "0", util.sTIPO_DOC, util.sCOD_MUN, util.sMUNICIPIO, util.sUF);

            TelaDocumento telaCTe = new TelaDocumento("1", "");
            telaCTe.setVisible(true);
            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), util.sTIPO_DOC, util.sCOD_MUN, jTableDocCte);
        } else {
            JOptionPane.showMessageDialog(null, "Limite de 1000 documentos atingidos.");
        }
    }//GEN-LAST:event_jBtDocIncluirCteActionPerformed

    private void jBtDocEditarCteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtDocEditarCteActionPerformed
      if (jTableDocCte.getSelectedRow() > -1) {
        if (jBtEditSalvar.isEnabled() == true) {
          util.sCOD_MUN = BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString());
          util.sMUNICIPIO = jCmbBxDocMunDocumento.getSelectedItem().toString();
          util.sUF = jCmbBxDocUfMunDocumento.getSelectedItem().toString();
          util.sCODDOC = jTableDocCte.getValueAt(jTableDocCte.getSelectedRow(), 1).toString();
          util.sCOD_BARRAS = jTableDocCte.getValueAt(jTableDocCte.getSelectedRow(), 3).toString();
          if(jTableDocCte.getValueAt(jTableDocCte.getSelectedRow(), 4) != null){
              util.sIND_REENTREGA = jTableDocCte.getValueAt(jTableDocCte.getSelectedRow(), 4).toString();
          }else{
              util.sIND_REENTREGA = "";
          }
          
          util.sTIPO_DOC = "C";

          TelaDocumento telaDoc = new TelaDocumento("2", jTableDocCte.getValueAt(jTableDocCte.getSelectedRow(), 2).toString());
          telaDoc.setVisible(true);

          CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), util.sTIPO_DOC, BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString()), jTableDocCte);
        }
      } else {
        JOptionPane.showMessageDialog(null, "Selecione um item para Editar!");
      }
    }//GEN-LAST:event_jBtDocEditarCteActionPerformed

    private void jBtDocExcluirCteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtDocExcluirCteActionPerformed
        if (jBtEditSalvar.isEnabled() == true) {
            if (jTableDocCte.getSelectedRow() > -1) {
                util.sTIPO_DOC = "C";
                Integer option = JOptionPane.showConfirmDialog(null, "Deseja excluir o(s) documento(s) selecionados(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    //Se Tabela tiver mais de 0 carregamento
                    if (jTableDocCte.getRowCount() > 0) {
                        //Dá um loop com a quantidade de linhas da Tabela
                        for (int linha = 0; linha < jTableDocCte.getRowCount(); linha++) {
                            //Percorre todas as linhas verificando quais tem o CheckBox marcado (True)
                            if (((boolean) jTableDocCte.getValueAt(linha, 0)) == true) {
                                DeletarDocumento(jTableDocCte.getValueAt(linha, 1).toString(), Integer.parseInt(jFldDdNumero.getText()), util.sTIPO_DOC, jTableDocCte.getValueAt(linha, 7).toString());
                            }
                            //A que estiver marcado, será deletada usando o codigo, Municipio e Dado
                        }
                    }
                }

                CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), util.sTIPO_DOC, BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString()), jTableDocCte);
            } else {
                JOptionPane.showMessageDialog(null, "Selecione um item para deletar!");
            }
        }
    }//GEN-LAST:event_jBtDocExcluirCteActionPerformed

    private void jTableDocCteMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDocCteMouseReleased

    }//GEN-LAST:event_jTableDocCteMouseReleased

    private void jCmbBxDocUfMunDocumentoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCmbBxDocUfMunDocumentoFocusLost

    }//GEN-LAST:event_jCmbBxDocUfMunDocumentoFocusLost

    private void jCmbBxDocMunDocumentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCmbBxDocMunDocumentoItemStateChanged
        /*
        if(jCmbBxDocMunDocumento.getSelectedItem() != null){
            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), "C", BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString()), jTableDocCte);
            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), "N", BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString()), jTableDocNFe);
            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), "M", BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString()), jTableDocMDFe);
        }
         */
    }//GEN-LAST:event_jCmbBxDocMunDocumentoItemStateChanged

    private void jCmbBxDocMunDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbBxDocMunDocumentoActionPerformed
        /*
        if(jCmbBxDocMunDocumento.getSelectedItem() != null){
            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), "C", BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString()), jTableDocCte);
            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), "N", BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString()), jTableDocNFe);
            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), "M", BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString()), jTableDocMDFe);
        }
         */
    }//GEN-LAST:event_jCmbBxDocMunDocumentoActionPerformed

    private void jCmbBxDocUfMunDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbBxDocUfMunDocumentoActionPerformed

    }//GEN-LAST:event_jCmbBxDocUfMunDocumentoActionPerformed

    private void jCmbBxDocUfMunDocumentoPopupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jCmbBxDocUfMunDocumentoPopupMenuCanceled

    }//GEN-LAST:event_jCmbBxDocUfMunDocumentoPopupMenuCanceled

    private void jCmbBxDocUfMunDocumentoPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jCmbBxDocUfMunDocumentoPopupMenuWillBecomeInvisible
        //Se os itens selecionados do combobox de municipio e uf forem diferentes de null
        if (jCmbBxDocUfMunDocumento.getSelectedItem() != null && jCmbBxDocMunDocumento.getSelectedItem() != null) {
            //Carrega os municios cadastrados do estado
            CarregaComboBoxMunicipioDescarregamentoDocumento(jFldDdNumero.getText(), jCmbBxDocUfMunDocumento.getSelectedItem().toString());

            //Carrega o cod do municipio selecionado
            String CodMun = BuscaCodMunicipio(String.valueOf(jCmbBxDocMunDocumento.getSelectedItem()), String.valueOf(jCmbBxDocUfMunDocumento.getSelectedItem()));
            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), "C", CodMun, jTableDocCte);
            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), "N", CodMun, jTableDocNFe);
            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), "M", CodMun, jTableDocMDFe);
        }

    }//GEN-LAST:event_jCmbBxDocUfMunDocumentoPopupMenuWillBecomeInvisible

    private void jCmbBxDocMunDocumentoPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jCmbBxDocMunDocumentoPopupMenuWillBecomeInvisible
        //Se o item selecionado do combobox de municipio for diferente de null
        if (jCmbBxDocMunDocumento.getSelectedItem() != null) {
            //Carregas as tabelas
            String CodMun = BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString());
            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), "C", CodMun, jTableDocCte);
            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), "N", CodMun, jTableDocNFe);
            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), "M", CodMun, jTableDocMDFe);
        }
    }//GEN-LAST:event_jCmbBxDocMunDocumentoPopupMenuWillBecomeInvisible

    private void jBtDocIncluirNfeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtDocIncluirNfeActionPerformed
        if (BuscaQtdDocumento(jFldDdNumero.getText(), "N") <= 1000) {
            util.sDAD_CODIGO = Integer.parseInt(jFldDdNumero.getText());
            util.sCOD_MUN = BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString());
            util.sMUNICIPIO = jCmbBxDocMunDocumento.getSelectedItem().toString();
            util.sUF = jCmbBxDocUfMunDocumento.getSelectedItem().toString();
            util.sTIPO_DOC = "N";
            BuscaCodMaxDocumento(util.sTIPO_DOC, util.sCOD_MUN, util.sDAD_CODIGO.toString());

            InserirDocumento(util.sCODDOC, util.sDAD_CODIGO.toString(), "", "", "0", util.sTIPO_DOC, util.sCOD_MUN, util.sMUNICIPIO, util.sUF);

            TelaDocumento telaDoc = new TelaDocumento("1", "");
            telaDoc.setVisible(true);
            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), util.sTIPO_DOC, util.sCOD_MUN, jTableDocNFe);
        } else {
            JOptionPane.showMessageDialog(null, "Limite de 1000 documentos atingidos.");
        }
    }//GEN-LAST:event_jBtDocIncluirNfeActionPerformed

    private void jBtDocEditarNfeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtDocEditarNfeActionPerformed
        if (jBtEditSalvar.isEnabled() == true) {
            util.sCOD_MUN = BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString());
            util.sMUNICIPIO = jCmbBxDocMunDocumento.getSelectedItem().toString();
            util.sUF = jCmbBxDocUfMunDocumento.getSelectedItem().toString();
            util.sCODDOC = jTableDocNFe.getValueAt(jTableDocNFe.getSelectedRow(), 1).toString();
            
            if(jTableDocNFe.getValueAt(jTableDocNFe.getSelectedRow(), 4) != null){
                util.sIND_REENTREGA = jTableDocNFe.getValueAt(jTableDocNFe.getSelectedRow(), 4).toString();
            }else{
                util.sIND_REENTREGA = "";
            }
            util.sTIPO_DOC = "N";

            TelaDocumento telaDoc = new TelaDocumento("2", jTableDocNFe.getValueAt(jTableDocNFe.getSelectedRow(), 2).toString());
            telaDoc.setVisible(true);

            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), util.sTIPO_DOC, BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString()), jTableDocNFe);
        }

    }//GEN-LAST:event_jBtDocEditarNfeActionPerformed

    private void jBtDocExcluirNfeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtDocExcluirNfeActionPerformed
        if (jBtEditSalvar.isSelected() == true) {
            if (jTableDocNFe.getSelectedRow() > -1) {
                util.sTIPO_DOC = "N";
                Integer option = JOptionPane.showConfirmDialog(null, "Deseja excluir o(s) documento(s) selecionados(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    //Se Tabela tiver mais de 0 carregamento
                    if (jTableDocNFe.getRowCount() > 0) {
                        //Dá um loop com a quantidade de linhas da Tabela
                        for (int linha = 0; linha < jTableDocNFe.getRowCount(); linha++) {
                            //Percorre todas as linhas verificando quais tem o CheckBox marcado (True)
                            if (((boolean) jTableDocNFe.getValueAt(linha, 0)) == true) {
                                DeletarDocumento(jTableDocNFe.getValueAt(linha, 1).toString(), Integer.parseInt(jFldDdNumero.getText()), util.sTIPO_DOC, jTableDocNFe.getValueAt(linha, 7).toString());
                            }
                            //A que estiver marcado, será deletada usando o codigo, Municipio e Dado
                        }
                    }
                }

                 CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), util.sTIPO_DOC, BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString()), jTableDocNFe);
            } else {
                JOptionPane.showMessageDialog(null, "Selecione um item para deletar!");
            }
        }

    }//GEN-LAST:event_jBtDocExcluirNfeActionPerformed

    private void jBtDocIncluirMDFeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtDocIncluirMDFeActionPerformed
        if (BuscaQtdDocumento(jFldDdNumero.getText(), "M") <= 1000) {

            util.sDAD_CODIGO = Integer.parseInt(jFldDdNumero.getText());
            util.sCOD_MUN = BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString());
            util.sMUNICIPIO = jCmbBxDocMunDocumento.getSelectedItem().toString();
            util.sUF = jCmbBxDocUfMunDocumento.getSelectedItem().toString();
            util.sTIPO_DOC = "M";
            BuscaCodMaxDocumento(util.sTIPO_DOC, util.sCOD_MUN, util.sDAD_CODIGO.toString());

            InserirDocumento(util.sCODDOC, util.sDAD_CODIGO.toString(), "", "", "0", util.sTIPO_DOC, util.sCOD_MUN, util.sMUNICIPIO, util.sUF);

            TelaDocumento telaDoc = new TelaDocumento("1", "");
            telaDoc.setVisible(true);
            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), util.sTIPO_DOC, util.sCOD_MUN, jTableDocMDFe);
        } else {
            JOptionPane.showMessageDialog(null, "Limite de 1000 documentos atingidos.");
        }
    }//GEN-LAST:event_jBtDocIncluirMDFeActionPerformed

    private void jBtDocEditarMDFeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtDocEditarMDFeActionPerformed
        if (jBtEditSalvar.isEnabled() == true) {
            util.sCOD_MUN = BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString());
            util.sMUNICIPIO = jCmbBxDocMunDocumento.getSelectedItem().toString();
            util.sUF = jCmbBxDocUfMunDocumento.getSelectedItem().toString();
            util.sCODDOC = jTableDocMDFe.getValueAt(jTableDocMDFe.getSelectedRow(), 1).toString();
            util.sTIPO_DOC = "M";
            if(jTableDocMDFe.getValueAt(jTableDocMDFe.getSelectedRow(), 4) != null){
                util.sIND_REENTREGA = jTableDocMDFe.getValueAt(jTableDocMDFe.getSelectedRow(), 4).toString();
            }else{
                util.sIND_REENTREGA = "";
            }
            

            TelaDocumento telaDoc = new TelaDocumento("2", jTableDocMDFe.getValueAt(jTableDocMDFe.getSelectedRow(), 2).toString());
            telaDoc.setVisible(true);

            CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), util.sTIPO_DOC, BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString()), jTableDocMDFe);
        }

    }//GEN-LAST:event_jBtDocEditarMDFeActionPerformed

    private void jBtDocExcluirMDFeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtDocExcluirMDFeActionPerformed
        if (jBtEditSalvar.isEnabled() == true) {
            if (jTableDocMDFe.getSelectedRow() > -1) {
                util.sTIPO_DOC = "M";
                Integer option = JOptionPane.showConfirmDialog(null, "Deseja excluir o(s) documento(s) selecionados(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    //Se Tabela tiver mais de 0 carregamento
                    if (jTableDocMDFe.getRowCount() > 0) {
                        //Dá um loop com a quantidade de linhas da Tabela
                        for (int linha = 0; linha < jTableDocMDFe.getRowCount(); linha++) {
                            //Percorre todas as linhas verificando quais tem o CheckBox marcado (True)
                            if (((boolean) jTableDocMDFe.getValueAt(linha, 0)) == true) {
                                DeletarDocumento(jTableDocMDFe.getValueAt(linha, 1).toString(), Integer.parseInt(jFldDdNumero.getText()), util.sTIPO_DOC, jTableDocMDFe.getValueAt(linha, 7).toString());
                            }

                        }
                    }
                }

                CarregaDocumento(Integer.parseInt(jFldDdNumero.getText()), util.sTIPO_DOC, BuscaCodMunicipio(jCmbBxDocMunDocumento.getSelectedItem().toString(), jCmbBxDocUfMunDocumento.getSelectedItem().toString()), jTableDocMDFe);
            } else {
                JOptionPane.showMessageDialog(null, "Selecione um item para deletar!");
            }
        }
    }//GEN-LAST:event_jBtDocExcluirMDFeActionPerformed

    private void jCmbBxDdMunicipioLocalCarregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbBxDdMunicipioLocalCarregActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCmbBxDdMunicipioLocalCarregActionPerformed

    private void jCmbBxDdUfLocalCarregItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCmbBxDdUfLocalCarregItemStateChanged
        BuscaMunicipio(jCmbBxDdUfLocalCarreg.getSelectedItem(), jCmbBxDdMunicipioLocalCarreg);
    }//GEN-LAST:event_jCmbBxDdUfLocalCarregItemStateChanged

    private void jCmbBxDdUfLocalCarregPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jCmbBxDdUfLocalCarregPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        /*  for (String estado : BuscaMunicipio(jCmbBxDdUfLocalCarreg.getSelectedItem().toString())) {
            jCmbBxDdMunicipioLocalCarreg.addItem(estado);
        }*/
    }//GEN-LAST:event_jCmbBxDdUfLocalCarregPopupMenuWillBecomeInvisible

    private void jCmbBxDdMDFeUfItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCmbBxDdMDFeUfItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jCmbBxDdMDFeUfItemStateChanged

    private void jCmbBxDocUfMunDescarregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbBxDocUfMunDescarregActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCmbBxDocUfMunDescarregActionPerformed

    private void jCmbBxDocUfMunDocumentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCmbBxDocUfMunDocumentoItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_jCmbBxDocUfMunDocumentoItemStateChanged

    private void jCmbBxDocMunDescarregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCmbBxDocMunDescarregActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCmbBxDocMunDescarregActionPerformed

    private void jCmbBxDdTpEmitenteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCmbBxDdTpEmitenteItemStateChanged
        if (jCmbBxDdTpEmitente.getSelectedIndex() == 0) {
            jTabEditInformacoesDocumento.setEnabledAt(1, true);
            jTabEditInformacoesDocumento.setEnabledAt(2, false);
        } else if (jCmbBxDdTpEmitente.getSelectedIndex() == 1) {
            jTabEditInformacoesDocumento.setEnabledAt(1, false);
            jTabEditInformacoesDocumento.setEnabledAt(2, true);
        }
    }//GEN-LAST:event_jCmbBxDdTpEmitenteItemStateChanged

    private void jBtMostrarChaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtMostrarChaveActionPerformed
        if (jLblChaveDeAcesso.getText().length() > 0) {
            JTextField jFld = new JTextField(jLblChaveDeAcesso.getText());
            jFld.setFont(new Font("Dialog", Font.BOLD, 18));
            jFld.setEditable(false);
            JOptionPane.showMessageDialog(null, jFld, "Chave de Acesso", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_jBtMostrarChaveActionPerformed

    private void jTableDdMunicipioLocalCarregMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDdMunicipioLocalCarregMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableDdMunicipioLocalCarregMouseClicked

    private void jTableDdMunicipioLocalCarregMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDdMunicipioLocalCarregMouseReleased


    }//GEN-LAST:event_jTableDdMunicipioLocalCarregMouseReleased

    private void jTableDdUfPercursoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDdUfPercursoMouseReleased
        if (jBtEditSalvar.isEnabled() == true) {
            int selecionada = 0;
            for (int linha = 0; linha < jTableDdUfPercurso.getRowCount(); linha++) {
                if (((boolean) jTableDdUfPercurso.getValueAt(linha, 0)) == true) {
                    selecionada++;
                }
            }

            if (selecionada > 0) {
                jBtDdExcluirUfPercurso.setEnabled(true);
            } else {
                jBtDdExcluirUfPercurso.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jTableDdUfPercursoMouseReleased

    private void jTableRdvInfoReboqueMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableRdvInfoReboqueMouseReleased


    }//GEN-LAST:event_jTableRdvInfoReboqueMouseReleased

    private void jTableRdvInfoValePedagioMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableRdvInfoValePedagioMouseReleased


    }//GEN-LAST:event_jTableRdvInfoValePedagioMouseReleased

    private void jTableDocMunDescarregMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDocMunDescarregMouseReleased

    }//GEN-LAST:event_jTableDocMunDescarregMouseReleased

    private void jTableDocNFeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDocNFeMouseReleased

    }//GEN-LAST:event_jTableDocNFeMouseReleased

    private void jTableDocMDFeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDocMDFeMouseReleased

    }//GEN-LAST:event_jTableDocMDFeMouseReleased

    private void jTableTotNrLacreMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTotNrLacreMouseReleased

    }//GEN-LAST:event_jTableTotNrLacreMouseReleased

    private void jTableTotAutorizadosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTotAutorizadosMouseReleased

    }//GEN-LAST:event_jTableTotAutorizadosMouseReleased

    private void jFldtPaisKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldtPaisKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldtPaisKeyPressed

    private void jFldEmtMunicipioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldEmtMunicipioKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldEmtMunicipioKeyPressed

    private void jFldEmtUfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldEmtUfKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldEmtUfKeyPressed

    private void jChckBxDdInformarEmitenteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jChckBxDdInformarEmitenteItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jChckBxDdInformarEmitenteItemStateChanged

    private void jChckBxDdInformarEmitenteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jChckBxDdInformarEmitenteKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jChckBxDdInformarEmitenteKeyPressed

    private void jChckBxDdInformarEmitenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChckBxDdInformarEmitenteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jChckBxDdInformarEmitenteActionPerformed

    private void jFldRdvRntrcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldRdvRntrcActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldRdvRntrcActionPerformed

    private void jFldEmtRNTRCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldEmtRNTRCKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldEmtRNTRCKeyPressed

    private void jFldEmtRNTRCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldEmtRNTRCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldEmtRNTRCActionPerformed

    private void jChckBxDdInformarEmitenteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jChckBxDdInformarEmitenteStateChanged

    }//GEN-LAST:event_jChckBxDdInformarEmitenteStateChanged

    private void jTblErroMsgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTblErroMsgMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTblErroMsgMouseClicked

    private void jTblErroMsgMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTblErroMsgMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTblErroMsgMouseReleased

    private void jTablePrincipalPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTablePrincipalPropertyChange

        int Selecionada = 0;
        for (int linha = 0; linha < jTablePrincipal.getRowCount(); linha++) {
            if (((boolean) jTablePrincipal.getValueAt(linha, 0)) == true) {
                Selecionada++;
            }
            if (Selecionada > 1 || Selecionada == 0) {
                jBtBuscaDetalhar.setEnabled(false);
            } else {
                jBtBuscaDetalhar.setEnabled(true);
            }

            if (Selecionada >= 1) {
                jBtBuscaExcluir.setEnabled(true);
            } else {
                jBtBuscaExcluir.setEnabled(false);
            }

        }

    }//GEN-LAST:event_jTablePrincipalPropertyChange

    private void jFldEmtCodMunKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldEmtCodMunKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldEmtCodMunKeyPressed

    private void jChckBxRdvInformarEmitenteReboqueItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jChckBxRdvInformarEmitenteReboqueItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jChckBxRdvInformarEmitenteReboqueItemStateChanged

    private void jChckBxRdvInformarEmitenteReboqueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jChckBxRdvInformarEmitenteReboqueStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jChckBxRdvInformarEmitenteReboqueStateChanged

    private void jChckBxRdvInformarEmitenteReboqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChckBxRdvInformarEmitenteReboqueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jChckBxRdvInformarEmitenteReboqueActionPerformed

    private void jChckBxRdvInformarEmitenteReboqueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jChckBxRdvInformarEmitenteReboqueKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jChckBxRdvInformarEmitenteReboqueKeyPressed

    private void jFldRdvCodPropReboqueFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldRdvCodPropReboqueFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldRdvCodPropReboqueFocusLost

    private void jFldRdvCodPropReboqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldRdvCodPropReboqueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldRdvCodPropReboqueActionPerformed

    private void jFldRdvCodPropReboqueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvCodPropReboqueKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldRdvCodPropReboqueKeyPressed

    private void jFldRdvCiotFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldRdvCiotFocusLost
        if (jFldRdvCiot.getText().length() > 0) {
            jFldRdvCiot.setText(new DecimalFormat("000000000000").format(Double.parseDouble(jFldRdvCiot.getText())));
        }
    }//GEN-LAST:event_jFldRdvCiotFocusLost

    private void jBtFecharPanelErroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtFecharPanelErroActionPerformed
        jPnlErroMensagem.setVisible(false);
        jPnlEditSul.setVisible(true);
    }//GEN-LAST:event_jBtFecharPanelErroActionPerformed

    private void jRadioCpfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioCpfActionPerformed
        jFldTotDocumentoAutorizado.setText("");
    }//GEN-LAST:event_jRadioCpfActionPerformed

    private void jChckBxDdInformarEmitentePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jChckBxDdInformarEmitentePropertyChange

    }//GEN-LAST:event_jChckBxDdInformarEmitentePropertyChange

    private void jChckBxRdvInformarEmitenteReboquePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jChckBxRdvInformarEmitenteReboquePropertyChange

    }//GEN-LAST:event_jChckBxRdvInformarEmitenteReboquePropertyChange

    private void jTableRdvInfoReboquePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableRdvInfoReboquePropertyChange
        if (jBtEditSalvar.isEnabled() == true) {
            int selecionada = 0;
            for (int linha = 0; linha < jTableRdvInfoReboque.getRowCount(); linha++) {
                if (((boolean) jTableRdvInfoReboque.getValueAt(linha, 0)) == true) {
                    selecionada++;
                }
            }

            if (selecionada > 0) {
                jBtExcluirReboque.setEnabled(true);
            } else {
                jBtExcluirReboque.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jTableRdvInfoReboquePropertyChange

    private void jTableRdvInfoValePedagioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableRdvInfoValePedagioPropertyChange
        if (jBtEditSalvar.isEnabled() == true) {
            int selecionada = 0;
            for (int linha = 0; linha < jTableRdvInfoValePedagio.getRowCount(); linha++) {
                if (((boolean) jTableRdvInfoValePedagio.getValueAt(linha, 0)) == true) {
                    selecionada++;
                }
            }

            if (selecionada > 0) {
                jBtExcluirPedagio.setEnabled(true);
            } else {
                jBtExcluirPedagio.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jTableRdvInfoValePedagioPropertyChange

    private void jTableDdMunicipioLocalCarregPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableDdMunicipioLocalCarregPropertyChange
        if (jBtEditSalvar.isEnabled() == true) {
            int selecionada = 0;
            for (int linha = 0; linha < jTableDdMunicipioLocalCarreg.getRowCount(); linha++) {
                if (((boolean) jTableDdMunicipioLocalCarreg.getValueAt(linha, 0)) == true) {
                    selecionada++;
                }
            }

            if (selecionada > 0) {
                jBtDdExcluirMunicipioLocalCarreg.setEnabled(true);
            } else {
                jBtDdExcluirMunicipioLocalCarreg.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jTableDdMunicipioLocalCarregPropertyChange

    private void jTableDocCtePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableDocCtePropertyChange
        if (jBtEditSalvar.isEnabled() == true) {
            int selecionada = 0;
            for (int linha = 0; linha < jTableDocCte.getRowCount(); linha++) {
                if (((boolean) jTableDocCte.getValueAt(linha, 0)) == true) {
                    selecionada++;
                }
            }

            if (selecionada == 0) {
                jBtDocEditarCte.setEnabled(false);
                jBtDocExcluirCte.setEnabled(false);
            }

            if (selecionada == 1) {
                jBtDocEditarCte.setEnabled(true);
                jBtDocExcluirCte.setEnabled(true);
            }

            if (selecionada > 1) {
                jBtDocEditarCte.setEnabled(false);
                jBtDocExcluirCte.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jTableDocCtePropertyChange

    private void jTableDocNFePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableDocNFePropertyChange
        if (jBtEditSalvar.isEnabled() == true) {
            int selecionada = 0;
            for (int linha = 0; linha < jTableDocNFe.getRowCount(); linha++) {
                if (((boolean) jTableDocNFe.getValueAt(linha, 0)) == true) {
                    selecionada++;
                }
            }

            if (selecionada == 0) {
                jBtDocEditarNfe.setEnabled(false);
                jBtDocExcluirNfe.setEnabled(false);
            }

            if (selecionada == 1) {
                jBtDocEditarNfe.setEnabled(true);
                jBtDocExcluirNfe.setEnabled(true);
            }

            if (selecionada > 1) {
                jBtDocEditarNfe.setEnabled(false);
                jBtDocExcluirNfe.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jTableDocNFePropertyChange

    private void jTableDocMDFePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableDocMDFePropertyChange
        if (jBtEditSalvar.isEnabled() == true) {
            int selecionada = 0;
            for (int linha = 0; linha < jTableDocMDFe.getRowCount(); linha++) {
                if (((boolean) jTableDocMDFe.getValueAt(linha, 0)) == true) {
                    selecionada++;
                }
            }

            if (selecionada == 0) {
                jBtDocEditarMDFe.setEnabled(false);
                jBtDocExcluirMDFe.setEnabled(false);
            }

            if (selecionada == 1) {
                jBtDocEditarMDFe.setEnabled(true);
                jBtDocExcluirMDFe.setEnabled(true);
            }

            if (selecionada > 1) {
                jBtDocEditarMDFe.setEnabled(false);
                jBtDocExcluirMDFe.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jTableDocMDFePropertyChange

    private void jTableTotNrLacrePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableTotNrLacrePropertyChange
        if (jBtEditSalvar.isEnabled() == true) {
            int selecionada = 0;
            for (int linha = 0; linha < jTableTotNrLacre.getRowCount(); linha++) {
                if (((boolean) jTableTotNrLacre.getValueAt(linha, 0)) == true) {
                    selecionada++;
                }
            }

            if (selecionada > 0) {
                jBtExcluirLacre.setEnabled(true);
            } else {
                jBtExcluirLacre.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jTableTotNrLacrePropertyChange

    private void jTableTotAutorizadosPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableTotAutorizadosPropertyChange
        if (jBtEditSalvar.isEnabled() == true) {
            int selecionada = 0;
            for (int linha = 0; linha < jTableTotAutorizados.getRowCount(); linha++) {
                if (((boolean) jTableTotAutorizados.getValueAt(linha, 0)) == true) {
                    selecionada++;
                }
            }

            if (selecionada > 0) {
                jBtExcluirAutorizado.setEnabled(true);
            } else {
                jBtExcluirAutorizado.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jTableTotAutorizadosPropertyChange

    private void jFldEmtSenhaCertificadoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldEmtSenhaCertificadoKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldEmtSenhaCertificadoKeyPressed

  private void jFldCodFilialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldCodFilialActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_jFldCodFilialActionPerformed

  private void jFldTotNrLacresKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldTotNrLacresKeyPressed
    if(evt.getKeyCode() == KeyEvent.VK_ENTER){
      jBtIncluirLacre.requestFocus();
    }
  }//GEN-LAST:event_jFldTotNrLacresKeyPressed

  private void jFldTotDocumentoAutorizadoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldTotDocumentoAutorizadoKeyPressed
    if(evt.getKeyCode() == KeyEvent.VK_ENTER){
      jBtIncluirAutorizado.requestFocus();
    }
  }//GEN-LAST:event_jFldTotDocumentoAutorizadoKeyPressed

    private void jFldRdvCiotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldRdvCiotActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldRdvCiotActionPerformed

    private void jBtIncluirCIOTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIncluirCIOTActionPerformed
        if(VerificaCiot() == true){
            //Tipo do documento do ciot selecionado
            //1 - CPF, 2 - CNPJ
            String tipo = "";
            if(jRadioCpf.isSelected() == true){
                tipo = "1";
            }else if(jRadioCnpj.isSelected() == true){
                tipo = "2";
            }
            
            //Foi Tirado o codigo do ciot e deixado apenas o ciot e o numero da mdfe como chave
            InserirCiot(jFldDdNumero.getText(), jFldRdvCiot.getText(), jFldRdvResponsavelCiot.getText(), tipo);
            
            jFldRdvCiot.requestFocus();
        }
    }//GEN-LAST:event_jBtIncluirCIOTActionPerformed

    private void jBtExcluirCIOTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirCIOTActionPerformed
        
        int option = JOptionPane.showConfirmDialog(null, "Deseja excluir a(s) informaçao(ões) do(s) CIOT selecionado(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
        if(option == JOptionPane.YES_OPTION){
            DeletarCiot(jFldDdNumero.getText());
        }
        
    }//GEN-LAST:event_jBtExcluirCIOTActionPerformed

    private void jBtBuscaContratanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaContratanteActionPerformed
        TelaBuscaContratante telabuscacont = new TelaBuscaContratante();
        telabuscacont.setVisible(true);
        jFldRdvCodContratante.setText(telabuscacont.sCODIGO);
        jFldRdvNomeContratante.setText(telabuscacont.sNOME);
        jFldRdvCpfContratante.setText(telabuscacont.sCPF);
        jFldRdvCnpjContratante.setText(telabuscacont.sCNPJ);
        jFldRdvCodContratante.requestFocus();
    }//GEN-LAST:event_jBtBuscaContratanteActionPerformed

    private void jBtIncluirContratanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIncluirContratanteActionPerformed
        if(VerificaContratante() == true){
            InserirContratante(jFldDdNumero.getText(), jFldRdvCodContratante.getText(), jFldRdvNomeContratante.getText(), util.ExtraiNumeros(jFldRdvCpfContratante.getText()), util.ExtraiNumeros(jFldRdvCnpjContratante.getText()));
            
            jFldRdvCodContratante.requestFocus();
        }
        
    }//GEN-LAST:event_jBtIncluirContratanteActionPerformed

    private void jBtExcluirContratanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirContratanteActionPerformed
        
        int option = JOptionPane.showConfirmDialog(null, "Deseja excluir o(s) contratante(s) selecionado(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
        if(option == JOptionPane.YES_OPTION){
            DeletarContratante(jFldDdNumero.getText());
        }
        
    }//GEN-LAST:event_jBtExcluirContratanteActionPerformed

    private void jFldRdvCodContratanteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvCodContratanteKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            jBtIncluirContratante.requestFocus();
        }
        
        if(evt.getKeyCode() == KeyEvent.VK_F11){
            jBtBuscaContratante.doClick();
        }
    }//GEN-LAST:event_jFldRdvCodContratanteKeyPressed

    private void jFldRdvCodContratanteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldRdvCodContratanteFocusLost
        if(jFldRdvCodContratante.getText().length() > 0){
            BuscaContratante(jFldRdvCodContratante.getText());
        }
    }//GEN-LAST:event_jFldRdvCodContratanteFocusLost

    private void jFldRdvResponsavelCiotKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvResponsavelCiotKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
           jBtIncluirCIOT.requestFocus(); 
        }
        
    }//GEN-LAST:event_jFldRdvResponsavelCiotKeyPressed

    private void jRadioCpfCiotKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jRadioCpfCiotKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_RIGHT){
            jRadioCnpjCiot.setSelected(true);
            jRadioCnpjCiot.requestFocus();
        }else if(evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_LEFT){
            jRadioCnpjCiot.setSelected(true);
            jRadioCnpjCiot.requestFocus();
        }
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
           jFldRdvResponsavelCiot.requestFocus(); 
        }       
    }//GEN-LAST:event_jRadioCpfCiotKeyPressed

    private void jRadioCnpjCiotKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jRadioCnpjCiotKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_RIGHT){
            jRadioCpfCiot.setSelected(true);
            jRadioCpfCiot.requestFocus();
        }else if(evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_LEFT){
            jRadioCpfCiot.setSelected(true);
            jRadioCpfCiot.requestFocus();
        }
        
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
           jFldRdvResponsavelCiot.requestFocus(); 
        }
    }//GEN-LAST:event_jRadioCnpjCiotKeyPressed

    private void jTableRdvCIOTPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableRdvCIOTPropertyChange
        if(jBtEditSalvar.isEnabled() == true){
            if (jBtEditSalvar.isEnabled() == true) {
                int Selecionada = 0;
                for (int linha = 0; linha < jTableRdvCIOT.getRowCount(); linha++) {
                    if (((boolean) jTableRdvCIOT.getValueAt(linha, 0)) == true) {
                        Selecionada++;
                    }
                }

                if (Selecionada == 0) {
                    jBtExcluirCIOT.setEnabled(false);
                } else {
                    jBtExcluirCIOT.setEnabled(true);
                }
            }
        }
        
        
    }//GEN-LAST:event_jTableRdvCIOTPropertyChange

    private void jTableRdvContratantePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableRdvContratantePropertyChange
         int Selecionada = 0;
        for (int linha = 0; linha < jTableRdvContratante.getRowCount(); linha++) {
            if( ((boolean) jTableRdvContratante.getValueAt(linha, 0)) == true){
                Selecionada++;
            }
        }
        
        if(Selecionada == 0){
            jBtExcluirContratante.setEnabled(false);
        }else {
            jBtExcluirContratante.setEnabled(true);
        }
    }//GEN-LAST:event_jTableRdvContratantePropertyChange

    private void jFldRdvResponsavelCiotFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldRdvResponsavelCiotFocusLost
        if(jRadioCnpjCiot.getText().length() > 0){
            if (jRadioCnpjCiot.isSelected() == true) {
                if (util.VerificaCNPJ(jFldRdvResponsavelCiot.getText()) == false) {
                    JOptionPane.showMessageDialog(null, "CNPJ inválido!");
                    jFldRdvResponsavelCiot.requestFocus();
                }
            } else if (jRadioCpfCiot.isSelected() == true) {
                if (util.VerificaCPF(jFldRdvResponsavelCiot.getText()) == false) {
                    JOptionPane.showMessageDialog(null, "CPF inválido!");
                    jFldRdvResponsavelCiot.requestFocus();
                }
            }
        }
        
    }//GEN-LAST:event_jFldRdvResponsavelCiotFocusLost

    private void jFldRdvValorPedagioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldRdvValorPedagioFocusLost
        if(jFldRdvValorPedagio.getText().length() == 0){
            jFldRdvValorPedagio.setText("0,00");
        }else {
            jFldRdvValorPedagio.setText(new DecimalFormat("############0.00").format(Double.parseDouble(util.TrocaVirgulaPorPonto(jFldRdvValorPedagio.getText()))));
        }
    }//GEN-LAST:event_jFldRdvValorPedagioFocusLost

    private void jFldRdvValorPedagioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvValorPedagioKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jBtIncluirPedagio.requestFocus();
        }
    }//GEN-LAST:event_jFldRdvValorPedagioKeyPressed

    private void jFldRdvValorPedagioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvValorPedagioKeyTyped
        String Caracteres = ",0123456789";
        if(!Caracteres.contains(evt.getKeyChar() + "")){
            evt.consume();
        }
    }//GEN-LAST:event_jFldRdvValorPedagioKeyTyped

    private void jFldRdvNrLacreKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldRdvNrLacreKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            jBtIncluirLacresRod.requestFocus();
        }
    }//GEN-LAST:event_jFldRdvNrLacreKeyPressed

    private void jBtIncluirLacresRodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIncluirLacresRodActionPerformed
        if(VerificaRdvNrLacres() == true){
            InserirNrLacreRodoviario(jFldDdNumero.getText(), jFldRdvNrLacre.getText());
            jFldRdvNrLacre.setText("");
            jFldRdvNrLacre.requestFocus();
        }  
    }//GEN-LAST:event_jBtIncluirLacresRodActionPerformed

    private void jBtExcluirLacresRodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirLacresRodActionPerformed
        if(jBtEditSalvar.isEnabled() == true){
            Integer option = JOptionPane.showConfirmDialog(null, "Deseja excluir o(s) lacre(s) selecionado(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                DeletarNrLacreRodoviario(jFldDdNumero.getText());
            }
        }
    }//GEN-LAST:event_jBtExcluirLacresRodActionPerformed

    private void jTableRdvLacresPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableRdvLacresPropertyChange
        if(jBtEditSalvar.isEnabled() == true){
            int Selecionada = 0;
            for (int linha = 0; linha < jTableRdvLacres.getRowCount(); linha++) {
                if (((boolean) jTableRdvLacres.getValueAt(linha, 0)) == true) {
                    Selecionada++;
                }
            }

            if (Selecionada == 0) {
                jBtExcluirLacresRod.setEnabled(false);
            } else {
                jBtExcluirLacresRod.setEnabled(true);
            }
        }
        
    }//GEN-LAST:event_jTableRdvLacresPropertyChange

    private void jFldAquaNrViagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldAquaNrViagemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldAquaNrViagemActionPerformed

    private void jFldAquaNrViagemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldAquaNrViagemKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldAquaCodTermCarreg.requestFocus();
        }
    }//GEN-LAST:event_jFldAquaNrViagemKeyPressed
   

    private void jBtBuscaEmbarcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaEmbarcaActionPerformed
        // TODO add your handling code here:
        //Scrollbar da tela de busca adicionada
        TelaBuscaEmbarcacao Telabuscaembarcacao = new TelaBuscaEmbarcacao();
        Telabuscaembarcacao.setVisible(true);

        jFldAquaCodInterno.setText(Telabuscaembarcacao.sCOD.toString());
        jFldAquaIdEmb.setText(Telabuscaembarcacao.sCODEMB.toString());
        jLblAquaNomeEmbarcacao.setText(Telabuscaembarcacao.sNOMEEMB);
        jLblAquaTpEmb.setText(Telabuscaembarcacao.sTPEMB);
        jLblAquaIRIN.setText(Telabuscaembarcacao.sIRIN);
        jFldAquaCodPrtEmbarque.requestFocus();
        
    }//GEN-LAST:event_jBtBuscaEmbarcaActionPerformed

    private void jFldAquaIdEmbFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldAquaIdEmbFocusLost
        // TODO add your handling code here:
        if(jFldAquaIdEmb.getText().length() > 0){
            BuscaCodEmbarcacao(jFldAquaIdEmb.getText());
        }
    }//GEN-LAST:event_jFldAquaIdEmbFocusLost

    private void jFldAquaIdEmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldAquaIdEmbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldAquaIdEmbActionPerformed

    private void jFldAquaIdEmbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldAquaIdEmbKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldAquaCodPrtEmbarque.requestFocus();
        }

        if (evt.getKeyCode() == evt.VK_F11) {
            jBtBuscaEmbarca.doClick();
        }
    }//GEN-LAST:event_jFldAquaIdEmbKeyPressed

    private void jFldAquaCodPrtEmbarqueFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldAquaCodPrtEmbarqueFocusLost
        // TODO add your handling code here:
        if (jFldAquaCodPrtEmbarque.getText().length() > 0) {
            BuscaCodPorto(jFldAquaCodPrtEmbarque.getText(), "E");
        }
    }//GEN-LAST:event_jFldAquaCodPrtEmbarqueFocusLost

    private void jFldAquaCodPrtEmbarqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldAquaCodPrtEmbarqueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldAquaCodPrtEmbarqueActionPerformed

    private void jFldAquaCodPrtEmbarqueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldAquaCodPrtEmbarqueKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldAquaCodPrtDestino.requestFocus();
        }
    }//GEN-LAST:event_jFldAquaCodPrtEmbarqueKeyPressed

    private void jFldAquaCodPrtDestinoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldAquaCodPrtDestinoFocusLost
        // TODO add your handling code here:
        if (jFldAquaCodPrtDestino.getText().length() > 0) {
            BuscaCodPorto(jFldAquaCodPrtDestino.getText(), "D");
        }
    }//GEN-LAST:event_jFldAquaCodPrtDestinoFocusLost

    private void jFldAquaCodPrtDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldAquaCodPrtDestinoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldAquaCodPrtDestinoActionPerformed

    private void jFldAquaCodPrtDestinoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldAquaCodPrtDestinoKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jFldAquaNrViagem.requestFocus();
        }
    }//GEN-LAST:event_jFldAquaCodPrtDestinoKeyPressed

    private void jFldAquaCodTermCarregFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldAquaCodTermCarregFocusLost
        // TODO add your handling code here:
        if (jFldAquaCodTermCarreg.getText().length() > 0) {
            BuscaCodCarregamento(jFldAquaCodTermCarreg.getText());
        }

    }//GEN-LAST:event_jFldAquaCodTermCarregFocusLost

    private void jFldAquaCodTermCarregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldAquaCodTermCarregActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldAquaCodTermCarregActionPerformed

    private void jFldAquaCodTermCarregKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldAquaCodTermCarregKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jBtIncluirInfoTermCarreg.requestFocus();
        }

        if (evt.getKeyCode() == evt.VK_F11) {
            jBtBuscaTerminalCarreg.doClick();
        }
    }//GEN-LAST:event_jFldAquaCodTermCarregKeyPressed

    private void jBtBuscaTerminalCarregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaTerminalCarregActionPerformed
        // TODO add your handling code here:
        TelaBuscaTerminalCarregamento Telabuscaterminalcarregamento = new TelaBuscaTerminalCarregamento();
        Telabuscaterminalcarregamento.setVisible(true);

        jFldAquaCodTermCarreg.setText(Telabuscaterminalcarregamento.sCOD_TERMINAL.toString());
        jLblTerminalCarreg.setText(Telabuscaterminalcarregamento.sNOME_TERMINAL);

        jFldAquaCodTermCarreg.requestFocus();
    }//GEN-LAST:event_jBtBuscaTerminalCarregActionPerformed

    private void jTableAquaInfoTermCarregMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAquaInfoTermCarregMouseReleased

    }//GEN-LAST:event_jTableAquaInfoTermCarregMouseReleased

    private void jTableAquaInfoTermCarregPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableAquaInfoTermCarregPropertyChange
        if (jBtEditSalvar.isEnabled() == true) {
            int selecionada = 0;
            for (int linha = 0; linha < jTableAquaInfoTermCarreg.getRowCount(); linha++) {
                if (((boolean) jTableAquaInfoTermCarreg.getValueAt(linha, 0)) == true) {
                    selecionada++;
                }
            }

            if (selecionada > 0) {
                jBtExcluirInfoTermCarreg.setEnabled(true);
            } else {
                jBtExcluirInfoTermCarreg.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jTableAquaInfoTermCarregPropertyChange

    private void jBtIncluirInfoTermCarregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIncluirInfoTermCarregActionPerformed
        // TODO add your handling code here:

        if (jFldAquaCodTermCarreg.getText().length() > 0) {
            InserirTerminaisCarregamento(jFldAquaCodTermCarreg.getText(), jFldDdNumero.getText(), jLblTerminalCarreg.getText());
            CarregaTerminaisCarregamento(jFldDdNumero.getText());
        }
    }//GEN-LAST:event_jBtIncluirInfoTermCarregActionPerformed

    private void jBtExcluirInfoTermCarregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirInfoTermCarregActionPerformed
        if (jBtEditSalvar.isEnabled() == true) {
            if (jTableAquaInfoTermCarreg.getSelectedRow() > -1) {
                Integer option = JOptionPane.showConfirmDialog(null, "Deseja excluir o(s) terminal(s) selecionado(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    DeletarTerminalCarregamento(jFldDdNumero.getText());
                }
            } else {
                JOptionPane.showMessageDialog(null, "Selecione o item para deletar!");
            }
        }
    }//GEN-LAST:event_jBtExcluirInfoTermCarregActionPerformed

    private void jFldAquaCodTermDescarregFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldAquaCodTermDescarregFocusLost
        // TODO add your handling code here:

        if (jFldAquaCodTermDescarreg.getText().length() > 0) {
            BuscaCodDescarregamento(jFldAquaCodTermDescarreg.getText());
        }
    }//GEN-LAST:event_jFldAquaCodTermDescarregFocusLost

    private void jFldAquaCodTermDescarregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldAquaCodTermDescarregActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldAquaCodTermDescarregActionPerformed

    private void jFldAquaCodTermDescarregKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldAquaCodTermDescarregKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jBtIncluirInfoTermDescarreg.requestFocus();
        }

        if (evt.getKeyCode() == evt.VK_F11) {
            jBtBuscaTerminalDescarreg.doClick();
        }
    }//GEN-LAST:event_jFldAquaCodTermDescarregKeyPressed

    private void jBtBuscaTerminalDescarregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaTerminalDescarregActionPerformed
        // TODO add your handling code here:
        TelaBuscaTerminalDescarregamento Telaterminaldescarregamento = new TelaBuscaTerminalDescarregamento();
        Telaterminaldescarregamento.setVisible(true);

        jFldAquaCodTermDescarreg.setText(Telaterminaldescarregamento.sCOD_TERMINAL);
        jLblNomeTerminalDescarregamento.setText(Telaterminaldescarregamento.sNOME_TERMINAL);

        jFldAquaCodTermDescarreg.requestFocus();
    }//GEN-LAST:event_jBtBuscaTerminalDescarregActionPerformed

    private void jTableAquaInfoTermDescarregMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAquaInfoTermDescarregMouseReleased

    }//GEN-LAST:event_jTableAquaInfoTermDescarregMouseReleased

    private void jTableAquaInfoTermDescarregPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableAquaInfoTermDescarregPropertyChange
        if (jBtEditSalvar.isEnabled() == true) {
            int selecionada = 0;
            for (int linha = 0; linha < jTableAquaInfoTermDescarreg.getRowCount(); linha++) {
                if (((boolean) jTableAquaInfoTermDescarreg.getValueAt(linha, 0)) == true) {
                    selecionada++;
                }
            }

            if (selecionada > 0) {
                jBtExcluirInfoTermDescarreg.setEnabled(true);
            } else {
                jBtExcluirInfoTermDescarreg.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jTableAquaInfoTermDescarregPropertyChange

    private void jBtIncluirInfoTermDescarregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIncluirInfoTermDescarregActionPerformed
        // TODO add your handling code here:
        if (jFldAquaCodTermDescarreg.getText().length() > 0) {
            InserirTerminalDescarregamento(jFldAquaCodTermDescarreg.getText(), jFldDdNumero.getText(), jLblNomeTerminalDescarregamento.getText());
            CarregaTerminaisDescarregamento(jFldDdNumero.getText());
        }
    }//GEN-LAST:event_jBtIncluirInfoTermDescarregActionPerformed

    private void jBtExcluirInfoTermDescarregActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirInfoTermDescarregActionPerformed
        if (jTableAquaInfoTermDescarreg.getSelectedRow() > -1) {
            Integer option = JOptionPane.showConfirmDialog(null, "Deseja excluir o(s) terminal(s) selecionado(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                DeletarTerminalDescarregamento(jFldDdNumero.getText());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione o item para deletar!");
        }
    }//GEN-LAST:event_jBtExcluirInfoTermDescarregActionPerformed

    private void jFldAquaCodEmbComboioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldAquaCodEmbComboioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldAquaCodEmbComboioActionPerformed

    private void jFldAquaCodEmbComboioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldAquaCodEmbComboioKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jBtIncluirInfoEmbComboio.requestFocus();
        }
    }//GEN-LAST:event_jFldAquaCodEmbComboioKeyPressed

    private void jTableAquaInfoEmbComboioMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAquaInfoEmbComboioMouseReleased

    }//GEN-LAST:event_jTableAquaInfoEmbComboioMouseReleased

    private void jTableAquaInfoEmbComboioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableAquaInfoEmbComboioPropertyChange
        if (jBtEditSalvar.isSelected() == true) {
            int selecionada = 0;
            for (int linha = 0; linha < jTableAquaInfoEmbComboio.getRowCount(); linha++) {
                if (((boolean) jTableAquaInfoEmbComboio.getValueAt(linha, 0)) == true) {
                    selecionada++;
                }
            }

            if (selecionada > 0) {
                jBtExcluirInfoEmbComboio.setEnabled(true);
            } else {
                jBtExcluirInfoEmbComboio.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jTableAquaInfoEmbComboioPropertyChange

    private void jBtIncluirInfoEmbComboioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIncluirInfoEmbComboioActionPerformed
        // TODO add your handling code here:
        if (jFldAquaCodEmbComboio.getText().length() > 0) {
            InserirEmbComboio(jFldAquaCodEmbComboio.getText(), jFldDdNumero.getText(),jFldAquaCodBalsa.getText(),jLblAquaNomeBalsa.getText());
            CarregaEmbComboio(jFldDdNumero.getText());
        }
    }//GEN-LAST:event_jBtIncluirInfoEmbComboioActionPerformed

    private void jBtExcluirInfoEmbComboioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirInfoEmbComboioActionPerformed
        if (jBtEditSalvar.isEnabled() == true) {
            if (jTableAquaInfoEmbComboio.getSelectedRow() > -1) {
                Integer option = JOptionPane.showConfirmDialog(null, "Deseja excluir a(s) Comboio(s) selecionada(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    DeletarEmbComboio(jFldDdNumero.getText());
                }
            } else {
                JOptionPane.showMessageDialog(null, "Selecione o item para deletar!");
            }
        }
    }//GEN-LAST:event_jBtExcluirInfoEmbComboioActionPerformed

    private void jFldAquaCodBalsaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldAquaCodBalsaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldAquaCodBalsaActionPerformed

    private void jFldAquaCodBalsaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldAquaCodBalsaKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldAquaCodBalsaKeyPressed

    private void jBtBuscaBalsaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaBalsaActionPerformed
        // TODO add your handling code here:
        TelaBuscaBalsa telabuscabalsa = new TelaBuscaBalsa();
        telabuscabalsa.setVisible(true);

        jFldAquaCodBalsa.setText(telabuscabalsa.sIDBALSA.toString());
        jLblAquaNomeBalsa.setText(telabuscabalsa.sNOMEBALSA.toString());
    }//GEN-LAST:event_jBtBuscaBalsaActionPerformed

    private void jFldAquaIdentUnCargaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldAquaIdentUnCargaFocusLost
        // TODO add your handling code here:

        if (jFldAquaIdentUnCarga.getText().length() > 0) {
            BuscaCodUnCargaVazia(jFldAquaIdentUnCarga.getText());
        }
    }//GEN-LAST:event_jFldAquaIdentUnCargaFocusLost

    private void jFldAquaIdentUnCargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldAquaIdentUnCargaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldAquaIdentUnCargaActionPerformed

    private void jFldAquaIdentUnCargaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldAquaIdentUnCargaKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            jBtIncluirInfoUnCargaVazia.requestFocus();
        }

        if (evt.getKeyCode() == evt.VK_F11) {
            jBtBuscaUnCarga.doClick();
        }
    }//GEN-LAST:event_jFldAquaIdentUnCargaKeyPressed

    private void jBtBuscaUnCargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaUnCargaActionPerformed
        TelaBuscaUnidadeCargaVazia telaBuscaUnidadeCarga = new TelaBuscaUnidadeCargaVazia();
        telaBuscaUnidadeCarga.setVisible(true);

        jFldAquaIdentUnCarga.setText(telaBuscaUnidadeCarga.sID_CARGA);
        jLblAquaTpUnCarga.setText(telaBuscaUnidadeCarga.sTIPO);
    }//GEN-LAST:event_jBtBuscaUnCargaActionPerformed

    private void jTableAquanInfUnVaziaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAquanInfUnVaziaMouseReleased

    }//GEN-LAST:event_jTableAquanInfUnVaziaMouseReleased

    private void jBtIncluirInfoUnCargaVaziaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIncluirInfoUnCargaVaziaActionPerformed
        // TODO add your handling code here:
        if (jFldAquaIdentUnCarga.getText().length() > 0) {
            InserirTpUnCargaVazia(jFldAquaIdentUnCarga.getText(), jFldDdNumero.getText(), VerificaCodTipoCarga(jLblAquaTpUnCarga.getText()));
            CarregaTpUnCargaVazia(jFldDdNumero.getText());
        }
    }//GEN-LAST:event_jBtIncluirInfoUnCargaVaziaActionPerformed

    private void jBtExcluirInfoUnCargaVaziaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirInfoUnCargaVaziaActionPerformed
        if (jBtEditSalvar.isEnabled() == true) {
            if (jTableAquanInfUnVazia.getSelectedRow() > -1) {
                Integer option = JOptionPane.showConfirmDialog(null, "Deseja excluir a(s) unidade(s) selecionada(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    DeletarTpUnCargaVazia(jFldDdNumero.getText());
                }
            } else {
                JOptionPane.showMessageDialog(null, "Selecione o item para deletar!");
            }
        }
    }//GEN-LAST:event_jBtExcluirInfoUnCargaVaziaActionPerformed

    private void jFldAquaIdUnidTranspVaziaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldAquaIdUnidTranspVaziaFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldAquaIdUnidTranspVaziaFocusLost

    private void jFldAquaIdUnidTranspVaziaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldAquaIdUnidTranspVaziaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldAquaIdUnidTranspVaziaActionPerformed

    private void jFldAquaIdUnidTranspVaziaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldAquaIdUnidTranspVaziaKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldAquaIdUnidTranspVaziaKeyPressed

    private void jBtBuscaUnidTranspVaziaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaUnidTranspVaziaActionPerformed
        //Scrollbar da tela de busca adicionada
        TelaBuscaUnidadeTransVazia telabuscaunidadeTransVazia = new TelaBuscaUnidadeTransVazia();
        telabuscaunidadeTransVazia.setVisible(true);

        jFldAquaIdUnidTranspVazia.setText(telabuscaunidadeTransVazia.sID_TRANS.toString());
        jLblAquaTpUnidTranspVazia.setText(telabuscaunidadeTransVazia.sTIPO.toString());
    }//GEN-LAST:event_jBtBuscaUnidTranspVaziaActionPerformed

    private void jTableAquanInfUnidTranspVaziaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAquanInfUnidTranspVaziaMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableAquanInfUnidTranspVaziaMouseReleased

    private void jBtIncluirInfoUnidTranspVaziaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIncluirInfoUnidTranspVaziaActionPerformed
        // TODO add your handling code here:
        if (jFldAquaIdUnidTranspVazia.getText().length() > 0) {
            InserirUnTransVazia(jFldAquaIdUnidTranspVazia.getText(), jFldDdNumero.getText(), VerificaCodTipoTrans(jLblAquaTpUnidTranspVazia.getText()));
            CarregaUnTransVazia(jFldDdNumero.getText());
        }
    }//GEN-LAST:event_jBtIncluirInfoUnidTranspVaziaActionPerformed

    private void jBtExcluirInfoUnCargaVazia1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirInfoUnCargaVazia1ActionPerformed
        // TODO add your handling code here:
         if (jBtEditSalvar.isEnabled() == true) {
            if (jTableAquanInfUnidTranspVazia.getSelectedRow() > -1) {
                Integer option = JOptionPane.showConfirmDialog(null, "Deseja excluir a(s) unidade(s) selecionada(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    DeletarUnTransVazia(jFldDdNumero.getText());
                }
            } else {
                JOptionPane.showMessageDialog(null, "Selecione o item para deletar!");
            }
        }
    }//GEN-LAST:event_jBtExcluirInfoUnCargaVazia1ActionPerformed

    private void jBtBuscaPrtEmbarqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaPrtEmbarqueActionPerformed
        //Scrollbar da tela de busca adicionada
        TelaBuscaPorto telabuscaporto = new TelaBuscaPorto();
        telabuscaporto.setVisible(true);

        jFldAquaCodPrtEmbarque.setText(telabuscaporto.sIDPRT.toString());
        jLblAquaNomePrtEmbarque.setText(telabuscaporto.sNOMPRT.toString());

    }//GEN-LAST:event_jBtBuscaPrtEmbarqueActionPerformed

    private void jBtBuscaPrtDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaPrtDestinoActionPerformed
        //Scrollbar da tela de busca adicionada
        TelaBuscaPorto telabuscaporto = new TelaBuscaPorto();
        telabuscaporto.setVisible(true);

        jFldAquaCodPrtDestino.setText(telabuscaporto.sIDPRT.toString());
        jLblAquaNomePrtDestino.setText(telabuscaporto.sNOMPRT.toString());
    }//GEN-LAST:event_jBtBuscaPrtDestinoActionPerformed

    private void jFldAquaCodPrtTransFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldAquaCodPrtTransFocusLost
        // TODO add your handling code here:

        if (jFldAquaCodPrtTrans.getText().length() > 0) {
            BuscaCodPorto(jFldAquaCodPrtTrans.getText(), "T");
        }
    }//GEN-LAST:event_jFldAquaCodPrtTransFocusLost

    private void jFldAquaCodPrtTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldAquaCodPrtTransActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldAquaCodPrtTransActionPerformed

    private void jFldAquaCodPrtTransKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldAquaCodPrtTransKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldAquaCodPrtTransKeyPressed

    private void jBtBuscaPrtDestino2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaPrtDestino2ActionPerformed
        //Scrollbar da tela de busca adicionada
        TelaBuscaPorto telabuscaporto = new TelaBuscaPorto();
        telabuscaporto.setVisible(true);

        jFldAquaCodPrtTrans.setText(telabuscaporto.sIDPRT.toString());
        jLblAquaNomePrtTrans.setText(telabuscaporto.sNOMPRT.toString());
    }//GEN-LAST:event_jBtBuscaPrtDestino2ActionPerformed

    private void jFldAquaCodInternoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldAquaCodInternoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldAquaCodInternoActionPerformed

    private void jFldAquaCodInternoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldAquaCodInternoKeyPressed
         // TODO add your handling code here:
        
    }//GEN-LAST:event_jFldAquaCodInternoKeyPressed

  private void jFldAquaCodBalsaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldAquaCodBalsaFocusLost
    // TODO add your handling code here:
    if (jFldAquaCodBalsa.getText().length() > 0) {
       BuscaCodBalsa(jFldAquaCodBalsa.getText());         
    }
  }//GEN-LAST:event_jFldAquaCodBalsaFocusLost

  private void jBtExcluirSeguroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtExcluirSeguroActionPerformed
    int option = JOptionPane.showConfirmDialog(null, "Deseja excluir o(s) seguro(s) selecionado(s)?", "Confirmação", JOptionPane.YES_NO_OPTION);
    if(option == JOptionPane.YES_OPTION){
        DeletarSeguro(jFldDdNumero.getText());
    }
  }//GEN-LAST:event_jBtExcluirSeguroActionPerformed

  private void jBtDadosAverbacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtDadosAverbacaoActionPerformed
      for (int linha = 0; linha < jTableSeguro.getRowCount(); linha++) {
          if(((boolean) jTableSeguro.getValueAt(linha, 0)) == true){
              TelaAverbacao telaaverbacao = new TelaAverbacao(jFldDdNumero.getText(), jTableSeguro.getValueAt(linha, 1).toString());
              telaaverbacao.setVisible(true);
              
          }
      }
      
      CarregaTudoSeguro(jFldDdNumero.getText());
  }//GEN-LAST:event_jBtDadosAverbacaoActionPerformed

  private void jChckBxDdInformarResponsavelSeguroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jChckBxDdInformarResponsavelSeguroKeyPressed
    // TODO add your handling code here:
  }//GEN-LAST:event_jChckBxDdInformarResponsavelSeguroKeyPressed

  private void jChckBxDdInformarResponsavelSeguroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jChckBxDdInformarResponsavelSeguroItemStateChanged
    if(jChckBxDdInformarResponsavelSeguro.isSelected() == false){
        jFldCodRespSeguro.setText("");
        jLblNomeRespSeg.setText("");
        jLblRespSegCpf.setText("");
        jLblRespSegCnpj.setText("");
        jFldCodRespSeguro.setEnabled(false);
        jBtBuscaRespSeguro.setEnabled(false);
        jLblNomeRespSeg.setEnabled(false);
        jLblRespSegCpf.setEnabled(false);
        jLblRespSegCnpj.setEnabled(false);
        
    }else{
        jFldCodRespSeguro.setEnabled(true);
        jBtBuscaRespSeguro.setEnabled(true);
        jLblNomeRespSeg.setEnabled(true);
        jLblRespSegCpf.setEnabled(true);
        jLblRespSegCnpj.setEnabled(true);
    }
  }//GEN-LAST:event_jChckBxDdInformarResponsavelSeguroItemStateChanged

  private void jFldNrApoliceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldNrApoliceKeyPressed
      if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
          jBtIncluirSeguro.requestFocus();
      }
  }//GEN-LAST:event_jFldNrApoliceKeyPressed

  private void jBtBuscaSeguradoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaSeguradoraActionPerformed
    TelaBuscaSeguradora telabuscaseguradora = new TelaBuscaSeguradora();
    telabuscaseguradora.setVisible(true);
    jFldCodSeguradora.setText(telabuscaseguradora.sCOD_SEG);
    jLblNomeSeguradora.setText(telabuscaseguradora.sNOME_SEG);
    jLblCnpjSeguradora.setText(telabuscaseguradora.sCNPJ_SEG);
    jFldCodSeguradora.requestFocus();
  }//GEN-LAST:event_jBtBuscaSeguradoraActionPerformed

  private void jFldCodSeguradoraKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldCodSeguradoraKeyPressed
      if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
          jFldNrApolice.requestFocus();
      }

      if (evt.getKeyCode() == KeyEvent.VK_F11) {
          jBtBuscaSeguradora.doClick();
      }
  }//GEN-LAST:event_jFldCodSeguradoraKeyPressed

  private void jFldCodSeguradoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldCodSeguradoraActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_jFldCodSeguradoraActionPerformed

  private void jFldCodSeguradoraFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldCodSeguradoraFocusLost
    if(jFldCodSeguradora.getText().length() > 0){
        BuscaSeguradora(jFldCodSeguradora.getText());
    }
  }//GEN-LAST:event_jFldCodSeguradoraFocusLost

  private void jBtBuscaRespSeguroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtBuscaRespSeguroActionPerformed
      TelaBuscaContratante telabuscacontratante = new TelaBuscaContratante();
      telabuscacontratante.setVisible(true);
      jFldCodRespSeguro.setText(telabuscacontratante.sCODIGO);
      jLblNomeRespSeg.setText(telabuscacontratante.sNOME);
      jLblRespSegCpf.setText(telabuscacontratante.sCPF);
      jLblRespSegCnpj.setText(telabuscacontratante.sCNPJ);
      jFldCodRespSeguro.requestFocus();
  }//GEN-LAST:event_jBtBuscaRespSeguroActionPerformed

  private void jFldCodRespSeguroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldCodRespSeguroKeyPressed
      if(evt.getKeyCode() == KeyEvent.VK_ENTER){
          jFldCodSeguradora.requestFocus();
      }
      
      if(evt.getKeyCode() == KeyEvent.VK_F11){
          jBtBuscaRespSeguro.doClick();
      }
  }//GEN-LAST:event_jFldCodRespSeguroKeyPressed

  private void jFldCodRespSeguroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFldCodRespSeguroFocusLost
    if(jFldCodRespSeguro.getText().length() > 0){
        BuscaResponsavelSeguro(jFldCodRespSeguro.getText());
    }
  }//GEN-LAST:event_jFldCodRespSeguroFocusLost

  private void jTableSeguroPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableSeguroPropertyChange

    if (jBtEditSalvar.isEnabled() == true) {
        int Selecionada = 0;
        for (int linha = 0; linha < jTableSeguro.getRowCount(); linha++) {
            if (((boolean) jTableSeguro.getValueAt(linha, 0)) == true) {
                Selecionada++;
            }
        }

        if (Selecionada == 0) {
            jBtExcluirSeguro.setEnabled(false);
            jBtDadosAverbacao.setEnabled(false);
        } else if (Selecionada == 1) {
            jBtExcluirSeguro.setEnabled(true);
            jBtDadosAverbacao.setEnabled(true);
        } else {
            jBtExcluirSeguro.setEnabled(true);
            jBtDadosAverbacao.setEnabled(false);
        }
    }
      
  }//GEN-LAST:event_jTableSeguroPropertyChange

  private void jTableSeguroMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableSeguroMouseReleased
    // TODO add your handling code here:
  }//GEN-LAST:event_jTableSeguroMouseReleased

  private void jFldTotQtdMDFeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldTotQtdMDFeActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_jFldTotQtdMDFeActionPerformed

  private void jFldTotQtdMDFeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFldTotQtdMDFeKeyPressed
    // TODO add your handling code here:
  }//GEN-LAST:event_jFldTotQtdMDFeKeyPressed

    private void jFldCodRespSeguroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFldCodRespSeguroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFldCodRespSeguroActionPerformed

    private void jBtIncluirSeguroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtIncluirSeguroActionPerformed
        if(VerificaSeguro() == true){
            String TpResp = "";
            if(jChckBxDdInformarResponsavelSeguro.isSelected() == true){
                TpResp = "2";
            }else{
                TpResp = "1";
            }            
            InserirSeguro(BuscaCodMaxSeguro(jFldDdNumero.getText()), jFldDdNumero.getText(), TpResp, jFldCodRespSeguro.getText(), jLblNomeRespSeg.getText(), 
                    util.ExtraiNumeros(jLblRespSegCpf.getText()), util.ExtraiNumeros(jLblRespSegCnpj.getText()), jFldCodSeguradora.getText(), jLblNomeSeguradora.getText(), util.ExtraiNumeros(jLblCnpjSeguradora.getText()), 
                    jFldNrApolice.getText());
            
            if(jFldCodRespSeguro.isEnabled() == true){
                jFldCodRespSeguro.requestFocus();
            }else{
                jFldCodSeguradora.requestFocus();
            }
        }
    }//GEN-LAST:event_jBtIncluirSeguroActionPerformed

    private void jBtConsultarNaoEncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtConsultarNaoEncActionPerformed
        TelaConsNaoEncerrado telaconsnaoenc = new TelaConsNaoEncerrado(util.ExtraiNumeros(jFldEmtCNPJ.getText()), jFldEmtCamCertificado.getText(), jFldEmtSenhaCertificado.getText());
        telaconsnaoenc.setVisible(true);
    }//GEN-LAST:event_jBtConsultarNaoEncActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {

        try {
            javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.luna.LunaLookAndFeel");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new TelaMovimentacao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel TabAgReguladora;
    private javax.swing.JPanel TabAquaviario;
    private javax.swing.JPanel TabCTe;
    private javax.swing.JPanel TabDados;
    private javax.swing.JPanel TabEmbarcacaoComboio;
    private javax.swing.JPanel TabEmitente;
    private javax.swing.JPanel TabInfoAdicionais;
    private javax.swing.JPanel TabInfoAquaviario;
    private javax.swing.JPanel TabInformacoesDocumento;
    private javax.swing.JPanel TabLacresRodo;
    private javax.swing.JPanel TabMDFeReferenciado;
    private javax.swing.JPanel TabMunicipiosDescarreg;
    private javax.swing.JPanel TabNFe;
    private javax.swing.JPanel TabReboque;
    private javax.swing.JPanel TabRodoviario;
    private javax.swing.JPanel TabSeguroCarga;
    private javax.swing.JPanel TabTerminalCarregamento;
    private javax.swing.JPanel TabTerminalDescarregamento;
    private javax.swing.JPanel TabTotalizadores;
    private javax.swing.JPanel TabUnidTranspVazia;
    private javax.swing.JPanel TabUnidadeCargaVazia;
    private javax.swing.JPanel TabValePedagio;
    private javax.swing.JPanel TabVeiculoTracao;
    private javax.swing.JButton Transmitir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jBtAssinarXML;
    private javax.swing.JButton jBtBuscaBalsa;
    private javax.swing.JButton jBtBuscaChaveDeAcesso;
    private javax.swing.JButton jBtBuscaCondutor;
    private javax.swing.JButton jBtBuscaContratante;
    private javax.swing.JButton jBtBuscaDetalhar;
    private javax.swing.JButton jBtBuscaEmbarca;
    private javax.swing.JButton jBtBuscaExcluir;
    private javax.swing.JButton jBtBuscaFilial;
    private javax.swing.JButton jBtBuscaFornecedorVale;
    private javax.swing.JButton jBtBuscaImprimirDamdfe;
    private javax.swing.JButton jBtBuscaNovoMDFe;
    private javax.swing.JButton jBtBuscaPrtDestino;
    private javax.swing.JButton jBtBuscaPrtDestino2;
    private javax.swing.JButton jBtBuscaPrtEmbarque;
    private javax.swing.JButton jBtBuscaReboque;
    private javax.swing.JButton jBtBuscaRespPagamento;
    private javax.swing.JButton jBtBuscaRespSeguro;
    private javax.swing.JButton jBtBuscaSair;
    private javax.swing.JButton jBtBuscaSeguradora;
    private javax.swing.JButton jBtBuscaTerminalCarreg;
    private javax.swing.JButton jBtBuscaTerminalDescarreg;
    private javax.swing.JButton jBtBuscaUnCarga;
    private javax.swing.JButton jBtBuscaUnidTranspVazia;
    private javax.swing.JButton jBtBuscaVeiculo;
    private javax.swing.JButton jBtCancelaMDFe;
    private javax.swing.JButton jBtConsultarNaoEnc;
    private javax.swing.JButton jBtConsultarProtocolo;
    private javax.swing.JButton jBtConsultarStatusServico;
    private javax.swing.JButton jBtDadosAverbacao;
    private javax.swing.JButton jBtDdExcluirMunicipioLocalCarreg;
    private javax.swing.JButton jBtDdExcluirUfPercurso;
    private javax.swing.JButton jBtDdIncluirMunicipioLocalCarreg;
    private javax.swing.JButton jBtDdIncluirUfPercurso;
    private javax.swing.JButton jBtDocEditarCte;
    private javax.swing.JButton jBtDocEditarMDFe;
    private javax.swing.JButton jBtDocEditarNfe;
    private javax.swing.JButton jBtDocExcluirCte;
    private javax.swing.JButton jBtDocExcluirMDFe;
    private javax.swing.JButton jBtDocExcluirMunDescarreg;
    private javax.swing.JButton jBtDocExcluirNfe;
    private javax.swing.JButton jBtDocIncluirCte;
    private javax.swing.JButton jBtDocIncluirMDFe;
    private javax.swing.JButton jBtDocIncluirNfe;
    private javax.swing.JButton jBtDocIncuirMunDescarreg;
    private javax.swing.JButton jBtEditCancelarMDFe;
    private javax.swing.JButton jBtEditConsultarProtocolo;
    private javax.swing.JButton jBtEditEncerraMDFe;
    private javax.swing.JButton jBtEditExportar;
    private javax.swing.JButton jBtEditFechar;
    private javax.swing.JButton jBtEditImprimirDAMDFE;
    private javax.swing.JButton jBtEditSalvar;
    private javax.swing.JButton jBtEditTransmitir;
    private javax.swing.JButton jBtEditar;
    private javax.swing.JButton jBtEncerrar;
    private javax.swing.JButton jBtExcluirAutorizado;
    private javax.swing.JButton jBtExcluirCIOT;
    private javax.swing.JButton jBtExcluirCondutor;
    private javax.swing.JButton jBtExcluirContratante;
    private javax.swing.JButton jBtExcluirInfoEmbComboio;
    private javax.swing.JButton jBtExcluirInfoTermCarreg;
    private javax.swing.JButton jBtExcluirInfoTermDescarreg;
    private javax.swing.JButton jBtExcluirInfoUnCargaVazia;
    private javax.swing.JButton jBtExcluirInfoUnCargaVazia1;
    private javax.swing.JButton jBtExcluirLacre;
    private javax.swing.JButton jBtExcluirLacresRod;
    private javax.swing.JButton jBtExcluirPedagio;
    private javax.swing.JButton jBtExcluirReboque;
    private javax.swing.JButton jBtExcluirSeguro;
    private javax.swing.JButton jBtFecharPanelErro;
    private javax.swing.JButton jBtGeraXML;
    private javax.swing.JButton jBtIncCondutor;
    private javax.swing.JButton jBtIncluirAutorizado;
    private javax.swing.JButton jBtIncluirCIOT;
    private javax.swing.JButton jBtIncluirCondutor;
    private javax.swing.JButton jBtIncluirContratante;
    private javax.swing.JButton jBtIncluirInfoEmbComboio;
    private javax.swing.JButton jBtIncluirInfoTermCarreg;
    private javax.swing.JButton jBtIncluirInfoTermDescarreg;
    private javax.swing.JButton jBtIncluirInfoUnCargaVazia;
    private javax.swing.JButton jBtIncluirInfoUnidTranspVazia;
    private javax.swing.JButton jBtIncluirLacre;
    private javax.swing.JButton jBtIncluirLacresRod;
    private javax.swing.JButton jBtIncluirPedagio;
    private javax.swing.JButton jBtIncluirReboque;
    private javax.swing.JButton jBtIncluirSeguro;
    private javax.swing.JButton jBtMostrarChave;
    private javax.swing.JButton jBtNovaPesquisa;
    private javax.swing.JButton jBtPesquisar;
    private javax.swing.JButton jBtValidaXML;
    private javax.swing.JCheckBox jChckBxDdInformarCodNumerico;
    private javax.swing.JCheckBox jChckBxDdInformarEmitente;
    private javax.swing.JCheckBox jChckBxDdInformarResponsavelSeguro;
    private javax.swing.JCheckBox jChckBxRdvInformarEmitenteReboque;
    private javax.swing.JCheckBox jChckBxSelecionarTudo;
    private javax.swing.JComboBox<String> jCmbBxBuscaModalidade;
    private javax.swing.JComboBox<String> jCmbBxBuscaSituacao;
    private javax.swing.JComboBox<String> jCmbBxBuscaTpEmissao;
    private javax.swing.JComboBox<String> jCmbBxBuscaUfCarregamento;
    private javax.swing.JComboBox<String> jCmbBxBuscaUfDescarregamento;
    private javax.swing.JComboBox<String> jCmbBxBuscaUfPercurso;
    private javax.swing.JComboBox<String> jCmbBxDdFormaEmissao;
    private javax.swing.JComboBox<String> jCmbBxDdMDFeUf;
    private javax.swing.JComboBox<String> jCmbBxDdModalidade;
    private javax.swing.JComboBox<String> jCmbBxDdMunicipioLocalCarreg;
    private javax.swing.JComboBox<String> jCmbBxDdTpEmitente;
    private javax.swing.JComboBox<String> jCmbBxDdTpTransportador;
    private javax.swing.JComboBox<String> jCmbBxDdUfLocalCarreg;
    private javax.swing.JComboBox<String> jCmbBxDdUfLocalDescarreg;
    private javax.swing.JComboBox<String> jCmbBxDdUfPercurso;
    private javax.swing.JComboBox<String> jCmbBxDocMunDescarreg;
    private javax.swing.JComboBox<String> jCmbBxDocMunDocumento;
    private javax.swing.JComboBox<String> jCmbBxDocUfMunDescarreg;
    private javax.swing.JComboBox<String> jCmbBxDocUfMunDocumento;
    private javax.swing.JComboBox<String> jCmbBxTotCodUnMedidaPeso;
    private javax.swing.JComboBox<String> jCmbBxTpNavegacao;
    private javax.swing.JTextField jFldAquaCodBalsa;
    private javax.swing.JTextField jFldAquaCodEmbComboio;
    private javax.swing.JTextField jFldAquaCodInterno;
    private javax.swing.JTextField jFldAquaCodPrtDestino;
    private javax.swing.JTextField jFldAquaCodPrtEmbarque;
    private javax.swing.JTextField jFldAquaCodPrtTrans;
    private javax.swing.JTextField jFldAquaCodTermCarreg;
    private javax.swing.JTextField jFldAquaCodTermDescarreg;
    private javax.swing.JTextField jFldAquaIdEmb;
    private javax.swing.JTextField jFldAquaIdUnidTranspVazia;
    private javax.swing.JTextField jFldAquaIdentUnCarga;
    private javax.swing.JTextField jFldAquaNrViagem;
    private javax.swing.JTextField jFldBuscaChaveAcessoCTe;
    private javax.swing.JTextField jFldBuscaChaveAcessoNFe;
    private javax.swing.JTextField jFldBuscaNumeroInicial;
    private javax.swing.JTextField jFldBuscaPeriodoEmissaoFinal;
    private javax.swing.JTextField jFldBuscaPeriodoEmissaoInicial;
    private javax.swing.JTextField jFldBuscaSerie;
    private javax.swing.JTextField jFldCodFilial;
    private javax.swing.JTextField jFldCodRespSeguro;
    private javax.swing.JTextField jFldCodSeguradora;
    private javax.swing.JTextField jFldDdCodNumerico;
    private javax.swing.JTextField jFldDdDV;
    private javax.swing.JFormattedTextField jFldDdDataHoraEmissao;
    private javax.swing.JFormattedTextField jFldDdDataHoraInicioViagem;
    private javax.swing.JTextField jFldDdModelo;
    private javax.swing.JTextField jFldDdNumero;
    private javax.swing.JTextField jFldDdSerie;
    private javax.swing.JTextField jFldEmtBairro;
    private javax.swing.JTextField jFldEmtCNPJ;
    private javax.swing.JTextField jFldEmtCamCertificado;
    private javax.swing.JTextField jFldEmtCep;
    private javax.swing.JTextField jFldEmtCodMun;
    private javax.swing.JTextField jFldEmtComplemento;
    private javax.swing.JTextField jFldEmtEmail;
    private javax.swing.JTextField jFldEmtInscEstadual;
    private javax.swing.JTextField jFldEmtLogradouro;
    private javax.swing.JTextField jFldEmtMunicipio;
    private javax.swing.JTextField jFldEmtNomeFantasia;
    private javax.swing.JTextField jFldEmtNumero;
    private javax.swing.JTextField jFldEmtRNTRC;
    private javax.swing.JTextField jFldEmtRazaoSocial;
    private javax.swing.JTextField jFldEmtSenhaCertificado;
    private javax.swing.JTextField jFldEmtTelefone;
    private javax.swing.JTextField jFldEmtUf;
    private javax.swing.JTextField jFldNrApolice;
    private javax.swing.JTextField jFldRdvCiot;
    private javax.swing.JTextField jFldRdvCnpjContratante;
    private javax.swing.JTextField jFldRdvCodAgendamentoPorto;
    private javax.swing.JTextField jFldRdvCodCondutor;
    private javax.swing.JTextField jFldRdvCodContratante;
    private javax.swing.JTextField jFldRdvCodFornecedorVale;
    private javax.swing.JTextField jFldRdvCodProp;
    private javax.swing.JTextField jFldRdvCodPropReboque;
    private javax.swing.JTextField jFldRdvCodReboque;
    private javax.swing.JTextField jFldRdvCodRespPag;
    private javax.swing.JTextField jFldRdvCodVeic;
    private javax.swing.JTextField jFldRdvCpfContratante;
    private javax.swing.JTextField jFldRdvNomeContratante;
    private javax.swing.JTextField jFldRdvNrComprovante;
    private javax.swing.JTextField jFldRdvNrLacre;
    private javax.swing.JTextField jFldRdvResponsavelCiot;
    private javax.swing.JTextField jFldRdvRntrc;
    private javax.swing.JTextField jFldRdvValorPedagio;
    private javax.swing.JTextField jFldTotDocumentoAutorizado;
    private javax.swing.JTextField jFldTotNrLacres;
    private javax.swing.JTextField jFldTotQtdCte;
    private javax.swing.JTextField jFldTotQtdMDFe;
    private javax.swing.JTextField jFldTotQtdNFe;
    private javax.swing.JTextField jFldTotQtdPesoBrutoTotal;
    private javax.swing.JTextField jFldTotVlTotalMercadoria;
    private javax.swing.JTextField jFldtPais;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel100;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel102;
    private javax.swing.JLabel jLabel103;
    private javax.swing.JLabel jLabel104;
    private javax.swing.JLabel jLabel105;
    private javax.swing.JLabel jLabel106;
    private javax.swing.JLabel jLabel107;
    private javax.swing.JLabel jLabel108;
    private javax.swing.JLabel jLabel109;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel110;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel113;
    private javax.swing.JLabel jLabel114;
    private javax.swing.JLabel jLabel115;
    private javax.swing.JLabel jLabel116;
    private javax.swing.JLabel jLabel117;
    private javax.swing.JLabel jLabel118;
    private javax.swing.JLabel jLabel119;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel120;
    private javax.swing.JLabel jLabel121;
    private javax.swing.JLabel jLabel122;
    private javax.swing.JLabel jLabel123;
    private javax.swing.JLabel jLabel124;
    private javax.swing.JLabel jLabel125;
    private javax.swing.JLabel jLabel126;
    private javax.swing.JLabel jLabel127;
    private javax.swing.JLabel jLabel128;
    private javax.swing.JLabel jLabel129;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel130;
    private javax.swing.JLabel jLabel131;
    private javax.swing.JLabel jLabel132;
    private javax.swing.JLabel jLabel133;
    private javax.swing.JLabel jLabel134;
    private javax.swing.JLabel jLabel135;
    private javax.swing.JLabel jLabel136;
    private javax.swing.JLabel jLabel137;
    private javax.swing.JLabel jLabel138;
    private javax.swing.JLabel jLabel139;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel140;
    private javax.swing.JLabel jLabel141;
    private javax.swing.JLabel jLabel142;
    private javax.swing.JLabel jLabel143;
    private javax.swing.JLabel jLabel144;
    private javax.swing.JLabel jLabel145;
    private javax.swing.JLabel jLabel146;
    private javax.swing.JLabel jLabel147;
    private javax.swing.JLabel jLabel148;
    private javax.swing.JLabel jLabel149;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel150;
    private javax.swing.JLabel jLabel151;
    private javax.swing.JLabel jLabel152;
    private javax.swing.JLabel jLabel153;
    private javax.swing.JLabel jLabel156;
    private javax.swing.JLabel jLabel157;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel90;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JLabel jLabel94;
    private javax.swing.JLabel jLabel95;
    private javax.swing.JLabel jLabel96;
    private javax.swing.JLabel jLabel97;
    private javax.swing.JLabel jLabel98;
    private javax.swing.JLabel jLabel99;
    private javax.swing.JLabel jLblAquaIRIN;
    private javax.swing.JLabel jLblAquaNomeBalsa;
    private javax.swing.JLabel jLblAquaNomeEmbarcacao;
    private javax.swing.JLabel jLblAquaNomePrtDestino;
    private javax.swing.JLabel jLblAquaNomePrtEmbarque;
    private javax.swing.JLabel jLblAquaNomePrtTrans;
    private javax.swing.JLabel jLblAquaTpEmb;
    private javax.swing.JLabel jLblAquaTpUnCarga;
    private javax.swing.JLabel jLblAquaTpUnidTranspVazia;
    private javax.swing.JLabel jLblAviso;
    private javax.swing.JLabel jLblCNPJEmitente;
    private javax.swing.JLabel jLblChaveDeAcesso;
    private javax.swing.JLabel jLblCnpjSeguradora;
    private javax.swing.JLabel jLblCodNumerico;
    private javax.swing.JLabel jLblDV;
    private javax.swing.JLabel jLblFilial;
    private javax.swing.JLabel jLblFilialCNPJ;
    private javax.swing.JLabel jLblFilialIE;
    private javax.swing.JLabel jLblInscEstEmitente;
    private javax.swing.JLabel jLblNomeRespSeg;
    private javax.swing.JLabel jLblNomeSeguradora;
    private javax.swing.JLabel jLblNomeTerminalDescarregamento;
    private javax.swing.JLabel jLblNumeroMDFe;
    private javax.swing.JLabel jLblRazaoSocialEmitente;
    private javax.swing.JLabel jLblRdvCapacidadeKG;
    private javax.swing.JLabel jLblRdvCapacidadeKGReboque;
    private javax.swing.JLabel jLblRdvCapacidadeM3;
    private javax.swing.JLabel jLblRdvCapacidadeM3Reboque;
    private javax.swing.JLabel jLblRdvCnpjFornecedor;
    private javax.swing.JLabel jLblRdvCnpjProprietario;
    private javax.swing.JLabel jLblRdvCnpjProprietarioReboque;
    private javax.swing.JLabel jLblRdvCondutor;
    private javax.swing.JLabel jLblRdvCpfCondutor;
    private javax.swing.JLabel jLblRdvCpfProprietario;
    private javax.swing.JLabel jLblRdvCpfProprietarioReboque;
    private javax.swing.JLabel jLblRdvFornecedorVale;
    private javax.swing.JLabel jLblRdvInscEstProprietario;
    private javax.swing.JLabel jLblRdvInscEstProprietarioReboque;
    private javax.swing.JLabel jLblRdvPlaca;
    private javax.swing.JLabel jLblRdvPlacaReboque;
    private javax.swing.JLabel jLblRdvPropietario;
    private javax.swing.JLabel jLblRdvPropietarioReboque;
    private javax.swing.JLabel jLblRdvRenavam;
    private javax.swing.JLabel jLblRdvRenavamReboque;
    private javax.swing.JLabel jLblRdvResponsavelCnpj;
    private javax.swing.JLabel jLblRdvResponsavelCpf;
    private javax.swing.JLabel jLblRdvResponsavelPagamento;
    private javax.swing.JLabel jLblRdvRntrcProprietario;
    private javax.swing.JLabel jLblRdvRntrcProprietarioReboque;
    private javax.swing.JLabel jLblRdvRntrcReboque;
    private javax.swing.JLabel jLblRdvTaraKG;
    private javax.swing.JLabel jLblRdvTipoRodadoReboque;
    private javax.swing.JLabel jLblRdvTpCarroceria;
    private javax.swing.JLabel jLblRdvTpCarroceriaReboque;
    private javax.swing.JLabel jLblRdvTpProprietario;
    private javax.swing.JLabel jLblRdvTpProprietarioReboque;
    private javax.swing.JLabel jLblRdvTpRodado;
    private javax.swing.JLabel jLblRdvUFVeic;
    private javax.swing.JLabel jLblRdvUfProprietario;
    private javax.swing.JLabel jLblRdvUfReboque;
    private javax.swing.JLabel jLblRespSegCnpj;
    private javax.swing.JLabel jLblRespSegCpf;
    private javax.swing.JLabel jLblStatusMDFe;
    private javax.swing.JLabel jLblTerminalCarreg;
    private javax.swing.JLabel jLblVersaoXML;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPnlAquaInfoEmbComboio;
    private javax.swing.JPanel jPnlAquaInfoTermCarreg;
    private javax.swing.JPanel jPnlAquaInfoTermDescarreg;
    private javax.swing.JPanel jPnlAquaInfoUnCargaVazia;
    private javax.swing.JPanel jPnlAquaInfoUnCargaVazia1;
    private javax.swing.JPanel jPnlAquaviario;
    private javax.swing.JPanel jPnlBusca;
    private javax.swing.JPanel jPnlCentro;
    private javax.swing.JPanel jPnlContratante;
    private javax.swing.JPanel jPnlDadosEmitente;
    private javax.swing.JPanel jPnlDadosMDFe;
    private javax.swing.JPanel jPnlDadosSituacao;
    private javax.swing.JPanel jPnlDdIncluirUfPercurso;
    private javax.swing.JPanel jPnlDdLocalCarregamento;
    private javax.swing.JPanel jPnlDdLocalDescarregamento;
    private javax.swing.JPanel jPnlDdMunicipioLocalCarreg;
    private javax.swing.JPanel jPnlDdUfDePercurso;
    private javax.swing.JPanel jPnlDocCte;
    private javax.swing.JPanel jPnlDocMDFe;
    private javax.swing.JPanel jPnlDocMunDescarreg;
    private javax.swing.JPanel jPnlDocNFe;
    private javax.swing.JPanel jPnlDocQtdCte;
    private javax.swing.JPanel jPnlDocQtdMDFe;
    private javax.swing.JPanel jPnlDocQtdNFe;
    private javax.swing.JPanel jPnlDocUfMun;
    private javax.swing.JPanel jPnlDownload;
    private javax.swing.JPanel jPnlEdit;
    private javax.swing.JPanel jPnlEditCentro;
    private javax.swing.JPanel jPnlEditNorte;
    private javax.swing.JPanel jPnlEditSul;
    private javax.swing.JPanel jPnlEmitente;
    private javax.swing.JPanel jPnlEmtIdentidicaçãoEmitente;
    private javax.swing.JPanel jPnlErroMensagem;
    private javax.swing.JPanel jPnlFiltro;
    private javax.swing.JPanel jPnlInfCiot;
    private javax.swing.JPanel jPnlLacresRodo;
    private javax.swing.JPanel jPnlNorte;
    private javax.swing.JPanel jPnlPrincipal;
    private javax.swing.JPanel jPnlRdvCondutores;
    private javax.swing.JPanel jPnlRdvInfoSeguro;
    private javax.swing.JPanel jPnlRdvInfoValePedagio;
    private javax.swing.JPanel jPnlRdvInfoVeic;
    private javax.swing.JPanel jPnlRdvProprietário;
    private javax.swing.JPanel jPnlRdvVeiculoTracao;
    private javax.swing.JPanel jPnlReboque;
    private javax.swing.JPanel jPnlRespCiot;
    private javax.swing.JPanel jPnlSul;
    private javax.swing.JPanel jPnlTotLacres;
    private javax.swing.JPanel jPnlTotaisFornecimento;
    private javax.swing.JPanel jPnlUfMunDescarreg;
    private javax.swing.JRadioButton jRadioCnpj;
    private javax.swing.JRadioButton jRadioCnpjCiot;
    private javax.swing.JRadioButton jRadioCpf;
    private javax.swing.JRadioButton jRadioCpfCiot;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabEdit;
    private javax.swing.JTabbedPane jTabEditInfoAquaviario;
    private javax.swing.JTabbedPane jTabEditInfoCargaAquaviario;
    private javax.swing.JTabbedPane jTabEditInformacoesDocumento;
    private javax.swing.JTabbedPane jTabEditRodoviarios;
    private javax.swing.JTable jTableAquaInfoEmbComboio;
    private javax.swing.JTable jTableAquaInfoTermCarreg;
    private javax.swing.JTable jTableAquaInfoTermDescarreg;
    private javax.swing.JTable jTableAquanInfUnVazia;
    private javax.swing.JTable jTableAquanInfUnidTranspVazia;
    private javax.swing.JTable jTableDdMunicipioLocalCarreg;
    private javax.swing.JTable jTableDdUfPercurso;
    private javax.swing.JTable jTableDocCte;
    private javax.swing.JTable jTableDocMDFe;
    private javax.swing.JTable jTableDocMunDescarreg;
    private javax.swing.JTable jTableDocNFe;
    private javax.swing.JTable jTablePrincipal;
    private javax.swing.JTable jTableRdvCIOT;
    private javax.swing.JTable jTableRdvCondutores;
    private javax.swing.JTable jTableRdvContratante;
    private javax.swing.JTable jTableRdvInfoReboque;
    private javax.swing.JTable jTableRdvInfoValePedagio;
    private javax.swing.JTable jTableRdvLacres;
    private javax.swing.JTable jTableSeguro;
    private javax.swing.JTable jTableTotAutorizados;
    private javax.swing.JTable jTableTotNrLacre;
    private javax.swing.JTable jTblErroMsg;
    private javax.swing.JTextArea jTxtAreaInfoAdicionaisContribuinte;
    private javax.swing.JTextArea jTxtAreaInfoAdicionaisFisco;
    // End of variables declaration//GEN-END:variables

    public void DeletarUnTransporte(String CodDoc, String dadCodigo, String Tipo) {
        try {
            Conectar.ConectarBD();

            System.out.println("DELETE FROM MDFE_UN_TRANSPORTE WHERE "
                    + "CODDOC = '" + CodDoc + "' AND DAD_CODIGO = '" + dadCodigo + "' AND TP_DOC = '" + Tipo + "'"
            );

            Conectar.stam.executeUpdate("DELETE FROM MDFE_UN_TRANSPORTE WHERE "
                    + "CODDOC = '" + CodDoc + "' AND DAD_CODIGO = '" + dadCodigo + "' AND TP_DOC = '" + Tipo + "'"
            );

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao deletar...\n" + e.getLocalizedMessage());
        }
    }

    public void CarregaDocumento(Integer Dados_codigo, String TpDoc, String Cod_Mun, JTable tabela) {
        try {
            Conectar.ConectarBD();
            LimpaTabela(tabela);
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_DOCUMENTO WHERE DAD_CODIGO = " + Dados_codigo + " AND COD_MUN = '" + Cod_Mun + "' AND TP_DOC = '" + TpDoc + "'");
            DefaultTableModel dtm = (DefaultTableModel) tabela.getModel();
            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("CODDOC"),
                    Conectar.result.getString("CHAVE"),
                    Conectar.result.getString("COD_BARRAS"),
                    Conectar.result.getString("INDREENTREGA"),
                    Conectar.result.getString("QTD_UN_TRANP"),
                    Conectar.result.getString("UF"),
                    Conectar.result.getString("COD_MUN"),
                    Conectar.result.getString("MUNICIPIO")
                });
            }
            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar CarregaUnTransporte na tabela...\n" + e.getLocalizedMessage());
        }
    }

    /**
     * Método que define as propriedades do formulario. Ex: Tamanho do jFrame,
     * Localização, cor da tabela, layout das células da tabela, etc...
     */
    public void DefinirFormulario() {
        
        //permite o jFrame ser redimensionado
        setResizable(true);
        //Define oo tamanho minimo que o jFrame pode tomar
        setMinimumSize(new Dimension(1100, 610));
        //Define o tamanho do jFrame
        setSize(1100, 610);
        //Define o título do jFrame
        setTitle("Gerenciador de MDFe");
        //Seta o icone do formulario
        setIconImage(new ImageIcon(getClass().getResource("/imagens/mdfeIcone.png")).getImage());
        //deixar no centro
        setLocationRelativeTo(null);
        //
        setExtendedState(MAXIMIZED_BOTH);
        //Deixa a tab de MDFe referenciada desabilitada
        jTabEditInformacoesDocumento.setEnabledAt(3, false);

        //---------------TELA PRINCIPAL--------------------------------------------
        //Seta o renderizador personalizado no cabeçalho das seguintes tabelas
        for (int col = 0; col < jTablePrincipal.getColumnCount(); col++) {
            jTablePrincipal.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }
        /*
         "Série", "Número", "Data e Hora de Emissão", "UF's Carregamento", "UF's Descarregamneto", "UF's Percurso", "Tipo de Emissão", "Modalidade", "Situação"
        }*/

        //Permite que seja selecianada apenas uma linha por vez da jTable
        jTablePrincipal.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //Ativa o barra de rolagem horizontal
        jTablePrincipal.setAutoResizeMode(jTablePrincipal.AUTO_RESIZE_OFF);

        centro.setHorizontalAlignment(SwingConstants.CENTER);
        esquerda.setHorizontalAlignment(SwingConstants.LEFT);

        //Define o tamanho das colunas e posicoes das celulas
        jTablePrincipal.getColumnModel().getColumn(0).setMinWidth(50);
        jTablePrincipal.getColumnModel().getColumn(0).setMaxWidth(120);

        //Série 
        jTablePrincipal.getColumnModel().getColumn(1).setMinWidth(100);
        jTablePrincipal.getColumnModel().getColumn(1).setMaxWidth(80);
        jTablePrincipal.getColumnModel().getColumn(1).setCellRenderer(esquerda);

        //Número 
        jTablePrincipal.getColumnModel().getColumn(2).setMinWidth(150);
        jTablePrincipal.getColumnModel().getColumn(2).setMaxWidth(650);
        jTablePrincipal.getColumnModel().getColumn(2).setCellRenderer(esquerda);

        //Data e Hora de Emissão 
        jTablePrincipal.getColumnModel().getColumn(3).setMinWidth(150);
        jTablePrincipal.getColumnModel().getColumn(3).setMaxWidth(200);
        jTablePrincipal.getColumnModel().getColumn(3).setCellRenderer(esquerda);

        //UF's Carregamento 
        jTablePrincipal.getColumnModel().getColumn(4).setMinWidth(150);
        jTablePrincipal.getColumnModel().getColumn(4).setMaxWidth(200);
        jTablePrincipal.getColumnModel().getColumn(4).setCellRenderer(esquerda);

        //UF's Descarregamneto 
        jTablePrincipal.getColumnModel().getColumn(5).setMinWidth(150);
        jTablePrincipal.getColumnModel().getColumn(5).setMaxWidth(200);
        jTablePrincipal.getColumnModel().getColumn(5).setCellRenderer(esquerda);

        //UF's Percurso         
        jTablePrincipal.getColumnModel().getColumn(6).setMinWidth(150);
        jTablePrincipal.getColumnModel().getColumn(6).setMaxWidth(500);
        jTablePrincipal.getColumnModel().getColumn(6).setCellRenderer(esquerda);

        //Tipo de Emissão  
        jTablePrincipal.getColumnModel().getColumn(7).setMinWidth(280);
        jTablePrincipal.getColumnModel().getColumn(7).setMaxWidth(500);
        jTablePrincipal.getColumnModel().getColumn(7).setCellRenderer(esquerda);

        //Modalidade 
        jTablePrincipal.getColumnModel().getColumn(8).setMinWidth(200);
        jTablePrincipal.getColumnModel().getColumn(8).setMaxWidth(500);
        jTablePrincipal.getColumnModel().getColumn(8).setCellRenderer(esquerda);
        
        //Forma Emissão 
        jTablePrincipal.getColumnModel().getColumn(9).setMinWidth(150);
        jTablePrincipal.getColumnModel().getColumn(9).setMaxWidth(100);        
        jTablePrincipal.getColumnModel().getColumn(9).setCellRenderer(esquerda);

        //Situação
        jTablePrincipal.getColumnModel().getColumn(10).setMinWidth(150);
        jTablePrincipal.getColumnModel().getColumn(10).setMaxWidth(100);        
        jTablePrincipal.getColumnModel().getColumn(10).setCellRenderer(esquerda);

        //Chave
        jTablePrincipal.getColumnModel().getColumn(11).setMinWidth(500);
        jTablePrincipal.getColumnModel().getColumn(11).setMaxWidth(600);        
        jTablePrincipal.getColumnModel().getColumn(11).setCellRenderer(esquerda);

        //Nr Protocolo
        jTablePrincipal.getColumnModel().getColumn(12).setMinWidth(200);
        jTablePrincipal.getColumnModel().getColumn(12).setMaxWidth(250);        
        jTablePrincipal.getColumnModel().getColumn(12).setCellRenderer(esquerda);      
        
        //codigo 
        jTablePrincipal.getColumnModel().getColumn(13).setMinWidth(100);
        jTablePrincipal.getColumnModel().getColumn(13).setMaxWidth(150);        
        jTablePrincipal.getColumnModel().getColumn(13).setCellRenderer(esquerda);

        //usuario
        jTablePrincipal.getColumnModel().getColumn(14).setMinWidth(200);
        jTablePrincipal.getColumnModel().getColumn(14).setMaxWidth(250);        
        jTablePrincipal.getColumnModel().getColumn(14).setCellRenderer(esquerda);

         //data 
        jTablePrincipal.getColumnModel().getColumn(15).setMaxWidth(150);
        jTablePrincipal.getColumnModel().getColumn(15).setMinWidth(200);
        jTablePrincipal.getColumnModel().getColumn(15).setCellRenderer(esquerda);
        
        
        //rgevento
        jTablePrincipal.getColumnModel().getColumn(16).setMaxWidth(150);
        jTablePrincipal.getColumnModel().getColumn(16).setMinWidth(100);
        jTablePrincipal.getColumnModel().getColumn(16).setCellRenderer(esquerda);
        
        //Seta a tecla de atalho Alt + nos seguintes botoes
        jBtBuscaNovoMDFe.setMnemonic(KeyEvent.VK_N);
        jBtBuscaDetalhar.setMnemonic(KeyEvent.VK_D);
        jBtGeraXML.setMnemonic(KeyEvent.VK_T);
        jBtAssinarXML.setMnemonic(KeyEvent.VK_C);
        jBtValidaXML.setMnemonic(KeyEvent.VK_E);
        Transmitir.setMnemonic(KeyEvent.VK_P);
        jBtConsultarStatusServico.setMnemonic(KeyEvent.VK_O);
        jBtConsultarProtocolo.setMnemonic(KeyEvent.VK_A);
        jBtBuscaImprimirDamdfe.setMnemonic(KeyEvent.VK_M);
        jBtCancelaMDFe.setMnemonic(KeyEvent.VK_L);
         jBtEncerrar.setMnemonic(KeyEvent.VK_I);
        jBtIncCondutor.setMnemonic(KeyEvent.VK_X);
        jBtBuscaExcluir.setMnemonic(KeyEvent.VK_U);
        jBtBuscaChaveDeAcesso.setMnemonic(KeyEvent.VK_H);
        jBtBuscaSair.setMnemonic(KeyEvent.VK_S);
        jBtEditSalvar.setMnemonic(KeyEvent.VK_S);
        jBtEditar.setMnemonic(KeyEvent.VK_E);
        jBtEditTransmitir.setMnemonic(KeyEvent.VK_T);
        jBtEditCancelarMDFe.setMnemonic(KeyEvent.VK_C);
        jBtEditEncerraMDFe.setMnemonic(KeyEvent.VK_N);
        jBtEditConsultarProtocolo.setMnemonic(KeyEvent.VK_P);
        jBtEditImprimirDAMDFE.setMnemonic(KeyEvent.VK_M);
        jBtEditExportar.setMnemonic(KeyEvent.VK_X);
        jBtEditFechar.setMnemonic(KeyEvent.VK_F);

        //Desmarca o checkbox no panel edit para deixar os campos de codigo numerio invisiveis
        jChckBxDdInformarCodNumerico.setSelected(false);

        //------------------------- FIM TELA PRINCIPAL -----------------------------
        //------------------------ DADOS -------------------------------------------
        for (int col = 0; col < jTableDdMunicipioLocalCarreg.getColumnCount(); col++) {
            jTableDdMunicipioLocalCarreg.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        jTableDdMunicipioLocalCarreg.getColumnModel().getColumn(0).setMaxWidth(30);
        jTableDdMunicipioLocalCarreg.getColumnModel().getColumn(0).setMinWidth(30);

        jTableDdMunicipioLocalCarreg.getColumnModel().getColumn(1).setMaxWidth(300);
        jTableDdMunicipioLocalCarreg.getColumnModel().getColumn(1).setMinWidth(300);

        for (int col = 0; col < jTableDdUfPercurso.getColumnCount(); col++) {
            jTableDdUfPercurso.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        jTableDdUfPercurso.getColumnModel().getColumn(0).setMaxWidth(30);
        jTableDdUfPercurso.getColumnModel().getColumn(0).setMinWidth(30);

        //--------------------------------------erro msg------------------------
        jPnlErroMensagem.setVisible(false);
        for (int col = 0; col < jTblErroMsg.getColumnCount(); col++) {
            jTblErroMsg.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        //------------------------ EMITENTE -----------------------------]
        //jafoi carregado no inicio
        //------------------------ RODOVIARIO -----------------------------]
        
        for (int col = 0; col < jTableRdvCIOT.getColumnCount(); col++) {
            jTableRdvCIOT.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }
        
        jTableRdvCIOT.getColumnModel().getColumn(0).setMinWidth(30);
        jTableRdvCIOT.getColumnModel().getColumn(0).setMaxWidth(30);
        
        for (int col = 0; col < jTableRdvContratante.getColumnCount(); col++) {
            jTableRdvContratante.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }
        
        jTableRdvContratante.getColumnModel().getColumn(0).setMinWidth(30);
        jTableRdvContratante.getColumnModel().getColumn(0).setMaxWidth(30);
        
        jChckBxDdInformarEmitente.setEnabled(false);

        for (int col = 0; col < jTableRdvCondutores.getColumnCount(); col++) {
            jTableRdvCondutores.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        jTableRdvCondutores.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        jTableRdvCondutores.getColumnModel().getColumn(0).setMaxWidth(30);
        jTableRdvCondutores.getColumnModel().getColumn(0).setMinWidth(30);

        jTableRdvCondutores.getColumnModel().getColumn(1).setMaxWidth(70);
        jTableRdvCondutores.getColumnModel().getColumn(1).setMinWidth(70);

        jTableRdvCondutores.getColumnModel().getColumn(2).setMaxWidth(200);
        jTableRdvCondutores.getColumnModel().getColumn(2).setMinWidth(200);

        for (int col = 0; col < jTableRdvInfoReboque.getColumnCount(); col++) {
            jTableRdvInfoReboque.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        jTableRdvInfoReboque.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTableRdvInfoReboque.setAutoResizeMode(jTableRdvInfoReboque.AUTO_RESIZE_OFF);

        jTableRdvInfoReboque.getColumnModel().getColumn(0).setMaxWidth(30);
        jTableRdvInfoReboque.getColumnModel().getColumn(0).setMinWidth(30);
        //Código
        jTableRdvInfoReboque.getColumnModel().getColumn(1).setMaxWidth(60);
        jTableRdvInfoReboque.getColumnModel().getColumn(1).setMinWidth(60);
        //Placa
        jTableRdvInfoReboque.getColumnModel().getColumn(2).setMaxWidth(100);
        jTableRdvInfoReboque.getColumnModel().getColumn(2).setMinWidth(100);
        //Renavam
        jTableRdvInfoReboque.getColumnModel().getColumn(3).setMaxWidth(100);
        jTableRdvInfoReboque.getColumnModel().getColumn(3).setMinWidth(100);
        //Tipo de Carroceria
        jTableRdvInfoReboque.getColumnModel().getColumn(4).setMaxWidth(120);
        jTableRdvInfoReboque.getColumnModel().getColumn(4).setMinWidth(120);
        //UF de Licenciamento
        jTableRdvInfoReboque.getColumnModel().getColumn(5).setMaxWidth(170);
        jTableRdvInfoReboque.getColumnModel().getColumn(5).setMinWidth(170);
        //Tara(KG)
        jTableRdvInfoReboque.getColumnModel().getColumn(6).setMaxWidth(100);
        jTableRdvInfoReboque.getColumnModel().getColumn(6).setMinWidth(100);
        //Capacidade(KG)
        jTableRdvInfoReboque.getColumnModel().getColumn(7).setMaxWidth(100);
        jTableRdvInfoReboque.getColumnModel().getColumn(7).setMinWidth(100);
        //Capacidade(M3)
        jTableRdvInfoReboque.getColumnModel().getColumn(8).setMaxWidth(100);
        jTableRdvInfoReboque.getColumnModel().getColumn(8).setMinWidth(100);
        //RNTRC
        jTableRdvInfoReboque.getColumnModel().getColumn(9).setMaxWidth(100);
        jTableRdvInfoReboque.getColumnModel().getColumn(9).setMinWidth(100);
        //Código do Proprietario
        jTableRdvInfoReboque.getColumnModel().getColumn(10).setMaxWidth(120);
        jTableRdvInfoReboque.getColumnModel().getColumn(10).setMinWidth(120);
        //Nome do Proprietario
        jTableRdvInfoReboque.getColumnModel().getColumn(11).setMaxWidth(300);
        jTableRdvInfoReboque.getColumnModel().getColumn(11).setMinWidth(300);
        //Cpf do proprietario
        jTableRdvInfoReboque.getColumnModel().getColumn(12).setMaxWidth(100);
        jTableRdvInfoReboque.getColumnModel().getColumn(12).setMinWidth(100);
        //Inscricao estadual
        jTableRdvInfoReboque.getColumnModel().getColumn(13).setMaxWidth(120);
        jTableRdvInfoReboque.getColumnModel().getColumn(13).setMinWidth(120);
        //UF
        jTableRdvInfoReboque.getColumnModel().getColumn(14).setMaxWidth(30);
        jTableRdvInfoReboque.getColumnModel().getColumn(14).setMinWidth(30);
        //Tipo de proprietario
        jTableRdvInfoReboque.getColumnModel().getColumn(15).setMaxWidth(200);
        jTableRdvInfoReboque.getColumnModel().getColumn(15).setMinWidth(200);

        for (int col = 0; col < jTableRdvInfoValePedagio.getColumnCount(); col++) {
            jTableRdvInfoValePedagio.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        jTableRdvInfoValePedagio.getColumnModel().getColumn(0).setMinWidth(30);
        jTableRdvInfoValePedagio.getColumnModel().getColumn(0).setMaxWidth(30);

        jTableRdvInfoValePedagio.getColumnModel().getColumn(1).setMinWidth(60);
        jTableRdvInfoValePedagio.getColumnModel().getColumn(1).setMaxWidth(60);
        jTableRdvInfoValePedagio.getColumnModel().getColumn(1).setCellRenderer(centro);

        for (int col = 0; col < jTableRdvLacres.getColumnCount(); col++) {
            jTableRdvLacres.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }
        
        jTableRdvLacres.getColumnModel().getColumn(0).setMinWidth(30);
        jTableRdvLacres.getColumnModel().getColumn(0).setMaxWidth(30);
        
        //------------------------ AQUAVIARIO -----------------------------]
        for (int col = 0; col < jTableAquaInfoTermCarreg.getColumnCount(); col++) {
            jTableAquaInfoTermCarreg.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        jTableAquaInfoTermCarreg.getColumnModel().getColumn(0).setMaxWidth(30);
        jTableAquaInfoTermCarreg.getColumnModel().getColumn(0).setMinWidth(30);

        jTableAquaInfoTermCarreg.getColumnModel().getColumn(1).setMaxWidth(100);
        jTableAquaInfoTermCarreg.getColumnModel().getColumn(1).setMinWidth(100);

        //-----------------------------------------------------------------------------------
        for (int col = 0; col < jTableAquaInfoTermDescarreg.getColumnCount(); col++) {
            jTableAquaInfoTermDescarreg.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        jTableAquaInfoTermDescarreg.getColumnModel().getColumn(0).setMaxWidth(30);
        jTableAquaInfoTermDescarreg.getColumnModel().getColumn(0).setMinWidth(30);

        jTableAquaInfoTermDescarreg.getColumnModel().getColumn(1).setMaxWidth(100);
        jTableAquaInfoTermDescarreg.getColumnModel().getColumn(1).setMinWidth(100);

        //-----------------------------------------------------------------------------------
        for (int col = 0; col < jTableAquaInfoEmbComboio.getColumnCount(); col++) {
            jTableAquaInfoEmbComboio.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        jTableAquaInfoEmbComboio.getColumnModel().getColumn(0).setMaxWidth(80);
        jTableAquaInfoEmbComboio.getColumnModel().getColumn(0).setMinWidth(100);
        
        jTableAquaInfoEmbComboio.getColumnModel().getColumn(1).setMaxWidth(80);        
        jTableAquaInfoEmbComboio.getColumnModel().getColumn(1).setMinWidth(150);
        
        jTableAquaInfoEmbComboio.getColumnModel().getColumn(2).setMaxWidth(100);
        jTableAquaInfoEmbComboio.getColumnModel().getColumn(2).setMinWidth(100);

        //-----------------------------------------------------------------------------------
        for (int col = 0; col < jTableAquanInfUnVazia.getColumnCount(); col++) {
            jTableAquanInfUnVazia.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        jTableAquanInfUnVazia.getColumnModel().getColumn(0).setMaxWidth(30);
        jTableAquanInfUnVazia.getColumnModel().getColumn(0).setMinWidth(30);

        jTableAquanInfUnVazia.getColumnModel().getColumn(1).setMaxWidth(100);
        jTableAquanInfUnVazia.getColumnModel().getColumn(1).setMinWidth(100);

        //------------------------ INFORMAÇÕES DOCUMENTO -----------------------------
        jTableDocMunDescarreg.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        for (int col = 0; col < jTableDocMunDescarreg.getColumnCount(); col++) {
            jTableDocMunDescarreg.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        jTableDocMunDescarreg.getColumnModel().getColumn(0).setMinWidth(30);
        jTableDocMunDescarreg.getColumnModel().getColumn(0).setMaxWidth(30);

        //---------------------------------------------------------------------
        jTableDocCte.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        for (int col = 0; col < jTableDocCte.getColumnCount(); col++) {
            jTableDocCte.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        jTableDocCte.getColumnModel().getColumn(0).setMinWidth(30);
        jTableDocCte.getColumnModel().getColumn(0).setMaxWidth(30);

        jTableDocCte.getColumnModel().getColumn(1).setMinWidth(100);
        jTableDocCte.getColumnModel().getColumn(1).setMaxWidth(150);

        jTableDocNFe.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        for (int col = 0; col < jTableDocNFe.getColumnCount(); col++) {
            jTableDocNFe.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        jTableDocNFe.getColumnModel().getColumn(0).setMinWidth(30);
        jTableDocNFe.getColumnModel().getColumn(0).setMaxWidth(30);

        jTableDocNFe.getColumnModel().getColumn(1).setMinWidth(100);
        jTableDocNFe.getColumnModel().getColumn(1).setMaxWidth(150);

        jTableDocNFe.getColumnModel().getColumn(3).setMinWidth(0);
        jTableDocNFe.getColumnModel().getColumn(3).setMaxWidth(0);

        jTableDocMDFe.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        for (int col = 0; col < jTableDocMDFe.getColumnCount(); col++) {
            jTableDocMDFe.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        jTableDocMDFe.getColumnModel().getColumn(0).setMinWidth(30);
        jTableDocMDFe.getColumnModel().getColumn(0).setMaxWidth(30);

        jTableDocMDFe.getColumnModel().getColumn(1).setMinWidth(100);
        jTableDocMDFe.getColumnModel().getColumn(1).setMaxWidth(150);

        jTableDocMDFe.getColumnModel().getColumn(3).setMinWidth(0);
        jTableDocMDFe.getColumnModel().getColumn(3).setMaxWidth(0);
        
        
        
        
                
        for (int col = 0; col < jTableAquanInfUnidTranspVazia.getColumnCount(); col++) {
            jTableAquanInfUnidTranspVazia.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        jTableAquanInfUnidTranspVazia.getColumnModel().getColumn(0).setMinWidth(70);
        jTableAquanInfUnidTranspVazia.getColumnModel().getColumn(0).setMaxWidth(70);

        jTableAquanInfUnidTranspVazia.getColumnModel().getColumn(1).setMinWidth(200);
        jTableAquanInfUnidTranspVazia.getColumnModel().getColumn(1).setMaxWidth(250);

        //------------------------ TOTALIZADORES -----------------------------
        for (int col = 0; col < jTableTotNrLacre.getColumnCount(); col++) {
            jTableTotNrLacre.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        jTableTotNrLacre.getColumnModel().getColumn(0).setMinWidth(30);
        jTableTotNrLacre.getColumnModel().getColumn(0).setMaxWidth(30);

        jTableTotNrLacre.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        for (int col = 0; col < jTableTotAutorizados.getColumnCount(); col++) {
            jTableTotAutorizados.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }

        jTableTotAutorizados.getColumnModel().getColumn(0).setMinWidth(30);
        jTableTotAutorizados.getColumnModel().getColumn(0).setMaxWidth(30);

        jTableTotAutorizados.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        //------------------------ SEGURO -----------------------------
        
        for (int col = 0; col < jTableSeguro.getColumnCount(); col++) {
            jTableSeguro.getColumnModel().getColumn(col).setHeaderRenderer(new MeuRenderizador());
        }
        
        jTableSeguro.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        jTableSeguro.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        
        jTableSeguro.getColumnModel().getColumn(0).setMinWidth(30);
        jTableSeguro.getColumnModel().getColumn(0).setMaxWidth(30);
        
        //Codigo da seguro
        jTableSeguro.getColumnModel().getColumn(1).setMinWidth(60);
        jTableSeguro.getColumnModel().getColumn(1).setMaxWidth(60);
        
        //Numero da apólice
        jTableSeguro.getColumnModel().getColumn(2).setMinWidth(150);
        jTableSeguro.getColumnModel().getColumn(2).setMaxWidth(150);
        
        //Codigo da seguradora
        jTableSeguro.getColumnModel().getColumn(3).setMinWidth(100);
        jTableSeguro.getColumnModel().getColumn(3).setMaxWidth(100);
        
        //Nome da seguradora
        jTableSeguro.getColumnModel().getColumn(4).setMinWidth(300);
        jTableSeguro.getColumnModel().getColumn(4).setMaxWidth(300);
        
        //Cnpj da seguradora
        jTableSeguro.getColumnModel().getColumn(5).setMinWidth(200);
        jTableSeguro.getColumnModel().getColumn(5).setMaxWidth(200);
        
        //Codigo do responsavel
        jTableSeguro.getColumnModel().getColumn(6).setMinWidth(150);
        jTableSeguro.getColumnModel().getColumn(6).setMaxWidth(150);
        
        //Nome do Responsavel
        jTableSeguro.getColumnModel().getColumn(7).setMinWidth(300);
        jTableSeguro.getColumnModel().getColumn(7).setMaxWidth(300);
        
        //Cpf do Responsavel
        jTableSeguro.getColumnModel().getColumn(8).setMinWidth(200);
        jTableSeguro.getColumnModel().getColumn(8).setMaxWidth(200);
        
        //Cnpj do Responsavel
        jTableSeguro.getColumnModel().getColumn(9).setMinWidth(200);
        jTableSeguro.getColumnModel().getColumn(9).setMaxWidth(200);
        
        //Numero de Averbacoes
        jTableSeguro.getColumnModel().getColumn(10).setMinWidth(140);
        jTableSeguro.getColumnModel().getColumn(10).setMaxWidth(140);
        
    }

    /**
     * Método que carrega a lista de dados do banco para mostrar na tabela.
     */
    public void CarregaTudo() {
        try {
            Conectar.ConectarBD();
            LimpaTabela(jTablePrincipal);
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_DADOS  WHERE RGEVENTO <> '3'");
            DefaultTableModel dtm = (DefaultTableModel) jTablePrincipal.getModel();
            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("DAD_SERIE"),
                    Conectar.result.getString("DAD_NUMERO"),
                    util.FormataData(Conectar.result.getDate("DAD_DTEMISSAO")),
                    GridUFCarregamento(Conectar.result.getInt("DAD_NUMERO")),
                    GridUFPercurso(Conectar.result.getInt("DAD_NUMERO")),
                    Conectar.result.getString("DAD_LOCAL_DESCARREGAMENTO"),
                    CampoCalcTipoEmitente(Conectar.result.getString("DAD_TP_EMITENTE")),
                    CampoCalcModalidade(Conectar.result.getString("DAD_MODALIDADE")),                  
                    CampoCalcEmissao(Conectar.result.getString("DAD_FORMA_EMISSAO")),
                    Conectar.result.getString("DAD_SITUACAO"),
                    Conectar.result.getString("DAD_CHAVE"),
                    Conectar.result.getString("DAD_NR_PROT"),
                    Conectar.result.getString("RGCODUSU"),
                    Conectar.result.getString("RGUSUARIO"),
                    util.FormataData(Conectar.result.getDate("RGDATA")),
                    Conectar.result.getString("RGEVENTO")
                });
            }
            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }

    public void BuscaMDFePorParametro() {
        try {
            sql = "";
            if (!jFldCodFilial.getText().equals("")) {
                sql += "WHERE EMIT_CODFIL = " + jFldCodFilial.getText();
            } else {
                JOptionPane.showMessageDialog(null, "Não Existe Emitente Selecionado!");
            }

            if ((!jFldBuscaPeriodoEmissaoInicial.getText().equals("")) && (!jFldBuscaPeriodoEmissaoFinal.getText().equals(""))) {
                sql += " AND  DAD_DTEMISSAO BETWEEN " + jFldBuscaPeriodoEmissaoInicial.getText() + " AND " + jFldBuscaPeriodoEmissaoInicial.getText();
            }

            if (!jFldBuscaSerie.getText().equals("")) {
                sql += " AND DAD_SERIE = '" + jFldBuscaSerie.getText() + "'";
            }

            if (!jFldBuscaNumeroInicial.getText().equals("")) {
                sql += " AND DAD_NUMERO = '" + jFldBuscaNumeroInicial.getText() + "'";
            }

            if (jCmbBxBuscaSituacao.getSelectedIndex() > 0) {
                sql += " AND DAD_SITUACAO = '" + jCmbBxBuscaSituacao.getSelectedItem().toString() + "'";
            }

            if (jCmbBxBuscaTpEmissao.getSelectedIndex() == 1) {
                sql += " AND DAD_FORMA_EMISSAO = 1";
            } else if (jCmbBxBuscaTpEmissao.getSelectedIndex() == 2) {
                sql += " AND DAD_FORMA_EMISSAO = 2";
            }

            if (jCmbBxBuscaModalidade.getSelectedIndex() == 1) {//rodoviario                
                sql += " AND DAD_MODALIDADE = 1 ";
            } else if (jCmbBxBuscaModalidade.getSelectedIndex() == 2) {//aquaviario                
                sql += " AND DAD_MODALIDADE = 3 ";
            }

            if (jCmbBxBuscaUfCarregamento.getSelectedIndex() > 0) {
                sql += " AND  = '" + jCmbBxBuscaUfCarregamento.getSelectedItem().toString() + "'";
            }

            if (jCmbBxBuscaUfDescarregamento.getSelectedIndex() > 0) {
                sql += " AND  = '" + jCmbBxBuscaUfCarregamento.getSelectedItem().toString() + "'";
            }

            if (jCmbBxBuscaUfPercurso.getSelectedIndex() > 0) {
                sql += " AND  = '" + jCmbBxBuscaUfPercurso.getSelectedItem().toString() + "'";
            }

            if (!jFldBuscaChaveAcessoCTe.getText().equals("")) {
                sql += " AND DAD_CHAVE = '" + jFldBuscaChaveAcessoCTe.getText() + "'";
            }

            if (!jFldBuscaChaveAcessoNFe.getText().equals("")) {

            }

            ordnar = "DAD_CODIGO";

            Integer num = null;
            LimpaTabela(jTablePrincipal);
            Conectar.ConectarBD();//GridUFCarregamento( 1 )
            System.out.println("SELECT * FROM MDFE_DADOS, MDFE_DOCUMENTO " + sql + " AND RGEVENTO <> '3' ORDER BY " + ordnar + " ");
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_DADOS  " + sql + " AND RGEVENTO <> '3'  ORDER BY " + ordnar + " ");
            DefaultTableModel dtm = (DefaultTableModel) jTablePrincipal.getModel();
            while (Conectar.result.next()) {
                 
                
               
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("DAD_SERIE"),
                    Conectar.result.getString("DAD_NUMERO"),
                    util.FormataData(Conectar.result.getDate("DAD_DTEMISSAO")),
                    GridUFCarregamento(Conectar.result.getInt("DAD_NUMERO")),
                    GridUFPercurso(Conectar.result.getInt("DAD_NUMERO")),
                    Conectar.result.getString("DAD_LOCAL_DESCARREGAMENTO"),
                    CampoCalcTipoEmitente(Conectar.result.getString("DAD_TP_EMITENTE")),
                    CampoCalcModalidade(Conectar.result.getString("DAD_MODALIDADE")),                  
                    CampoCalcEmissao(Conectar.result.getString("DAD_FORMA_EMISSAO")),
                    Conectar.result.getString("DAD_SITUACAO"),
                    Conectar.result.getString("DAD_CHAVE"),
                    Conectar.result.getString("DAD_NR_PROT"),
                    Conectar.result.getString("RGCODUSU"),
                    Conectar.result.getString("RGUSUARIO"),
                    util.FormataData(Conectar.result.getDate("RGDATA")),
                    Conectar.result.getString("RGEVENTO")
                });
            }
            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar DADOS...\n" + e.getLocalizedMessage());
        }
    }

    public static String GridUFCarregamento(Integer DadosCodigo) {

        String ListaUf = "";

        try {
            Conectar.ConectarBD();
            Conectar.result2 = Conectar.stam.executeQuery("SELECT DISTINCT(UF) FROM MDFE_LOCAL_CARREGAMENTO WHERE DAD_CODIGO = " + DadosCodigo);
            while (Conectar.result2.next()) {
                if (Conectar.result2.isLast()) {
                    ListaUf = ListaUf + Conectar.result2.getString("UF");
                } else {
                    ListaUf = ListaUf + Conectar.result2.getString("UF") + ", ";
                }

            }
            // Conectar.DesconectarBD();
        } catch (Exception e) {

        }
        System.out.println(ListaUf);
        return ListaUf;

    }

    public static String GridUFPercurso(Integer DadosCodigo) {

        String ListaUf = "";

        try {
            Conectar.ConectarBD();
            Conectar.result2 = Conectar.stam.executeQuery("SELECT DISTINCT(UF) FROM MDFE_LOCAL_PERCURSO WHERE DAD_CODIGO = " + DadosCodigo);
            while (Conectar.result2.next()) {
                if (Conectar.result2.isLast()) {
                    ListaUf = ListaUf + Conectar.result2.getString("UF");
                } else {
                    ListaUf = ListaUf + Conectar.result2.getString("UF") + ", ";
                }
            }
            // Conectar.DesconectarBD();
        } catch (Exception e) {

        }

        System.out.println(ListaUf);
        return ListaUf;

    }

    /**
     * Método responsável por incrementar o próximo número do código.
     */
    public void BuscaCodMax() {
        try {
            Conectar.ConectarBD();
            Conectar.result = Conectar.stam.executeQuery("SELECT MAX(DAD_CODIGO) + 1 FROM MDFE_DADOS  ");
            while (Conectar.result.next()) {
                if (Conectar.result.getString(1) == null) {
                    codmax = 1;
                } else {
                    codmax = Integer.parseInt(Conectar.result.getString(1));
                }
//                jFldCodigo.setText(codmax.toString());
            }
            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao gerar código...\n" + e.getLocalizedMessage());
        }
    }

    public void BuscaNomeFilial(String codfil) {
        String NomFil = "";
        String Cnpj = "";
        String IE = "";
        try {
            if (codfil.length() > 0) {
                Conectar.ConectarBD();
                Conectar.result = Conectar.stam.executeQuery("select NOMFIL, FANFIL, ENDFIL, NUMERO, COMPFIL, BAIFIL, CEPFIL, UFFIL, CIDFIL, TELFIL, EMAILFIL, CNPJFIL, IEFIL, RNTRC, CODMUNFIL, PATHSERIECERT, SENHACERT from TABFIL where CODFIL = '" + codfil + "' and RGEVENTO <> '3'");
                while (Conectar.result.next()) {
                    jFldEmtCamCertificado.setText(Conectar.result.getString("PATHSERIECERT"));
                    jFldEmtSenhaCertificado.setText(Conectar.result.getString("SENHACERT"));
                    
                    //Campo Pesquisa
                    jFldCodFilial.setText(codfil);
                    jLblFilial.setText(Conectar.result.getString("NOMFIL"));
                    jLblFilialCNPJ.setText(Conectar.result.getString("CNPJFIL"));
                    jLblFilialIE.setText(Conectar.result.getString("IEFIL"));

                    //informação topo
                    jLblRazaoSocialEmitente.setText(Conectar.result.getString("NOMFIL"));
                    jLblCNPJEmitente.setText(Conectar.result.getString("CNPJFIL"));
                    jLblInscEstEmitente.setText(Conectar.result.getString("IEFIL"));

                    //Aba do emitente
                    jFldEmtRazaoSocial.setText(Conectar.result.getString("NOMFIL"));
                    jFldEmtNomeFantasia.setText(Conectar.result.getString("FANFIL"));
                    jFldEmtLogradouro.setText(Conectar.result.getString("ENDFIL"));
                    jFldEmtNumero.setText(Conectar.result.getString("NUMERO"));
                    jFldEmtCNPJ.setText(Conectar.result.getString("CNPJFIL"));
                    jFldEmtInscEstadual.setText(Conectar.result.getString("IEFIL"));
                    jFldEmtComplemento.setText(Conectar.result.getString("COMPFIL"));
                    jFldEmtBairro.setText(Conectar.result.getString("BAIFIL"));
                    jFldEmtCep.setText(Conectar.result.getString("CEPFIL"));
                    jFldEmtUf.setText(Conectar.result.getString("UFFIL"));
                    jFldEmtMunicipio.setText(Conectar.result.getString("CIDFIL"));
                    jFldEmtCodMun.setText(Conectar.result.getString("CODMUNFIL"));
                    jFldEmtTelefone.setText(Conectar.result.getString("TELFIL"));
                    jFldEmtEmail.setText(Conectar.result.getString("EMAILFIL"));
                    jFldEmtRNTRC.setText(Conectar.result.getString("RNTRC"));

                    jFldEmtEmail.setText(Conectar.result.getString("EMAILFIL"));
                    jFldEmtRNTRC.setText(Conectar.result.getString("RNTRC"));
                    
                    jFldEmtCodMun.setText(Conectar.result.getString("CODMUNFIL"));
                    
                    if (jFldEmtCodMun.getText().length() == 0) {
                      jFldEmtMunicipio.setText( BuscaNomeMun(jFldEmtCodMun.getText()));
                    }
                    //JOptionPane.showMessageDialog(null, Conectar.result.getString("RNTRC"));*/

                }
                Conectar.DesconectarBD();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error...\n" + e.getLocalizedMessage());
        }
    }

    /**
     * *******************************************FIM PAINEL
     * BUSCA*******************************************************
     */
    public void LimpaTabela(JTable tabela) {
        DefaultTableModel dtm = (DefaultTableModel) tabela.getModel();
        dtm.setNumRows(0);
    }

    /**
     * *****************************************************INICIO
     * DADOS*******************************************************
     */
    //Carrega as dos Uf's no jComboBox da Aba de Dados
    public void CarregaComboBoxDados() {
        try {
            Conectar.ConectarBD();

            Conectar.result = Conectar.stam.executeQuery("select SIGLA from ESTADOS");
            while (Conectar.result.next()) {
                jCmbBxDdMDFeUf.addItem(Conectar.result.getString("SIGLA"));
                jCmbBxDdUfLocalCarreg.addItem(Conectar.result.getString("SIGLA"));
                jCmbBxDdUfLocalDescarreg.addItem(Conectar.result.getString("SIGLA"));
                jCmbBxDdUfPercurso.addItem(Conectar.result.getString("SIGLA"));

                //Carrega os combobox do jPanel de Busca
                jCmbBxBuscaUfCarregamento.addItem(Conectar.result.getString("SIGLA"));
                jCmbBxBuscaUfPercurso.addItem(Conectar.result.getString("SIGLA"));
                jCmbBxBuscaUfDescarregamento.addItem(Conectar.result.getString("SIGLA"));
            }

            jCmbBxBuscaUfPercurso.setSelectedIndex(0);
            jCmbBxBuscaUfDescarregamento.setSelectedIndex(0);
            /* jCmbBxDdMDFeUf.setSelectedIndex(-1);
            jCmbBxDdUfLocalCarreg.setSelectedIndex(-1);
            jCmbBxDdUfLocalDescarreg.setSelectedIndex(-1);
            jCmbBxDdUfPercurso.setSelectedIndex(-1);*/

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error...\n" + e.getLocalizedMessage());
        }
    }

    //Carrega todos os municipios dos estados de acordo com a sigla do mesmo que entra como parametro
    public void BuscaMunicipio(Object sigla, JComboBox jcombobox) {
        //Inicia a variavel ResultSet
        ResultSet rs = null;
        //Inicia a variavel Statement
        Statement st = null;

        //Remove todos os item do jComboBox do Municipio
        jcombobox.removeAllItems();
        //Inicia a variavel que irá receber o codigo do estado
        String codEst = "";
        try {
            if (sigla != null) {
                Conectar.ConectarBD();
                st = Conectar.con.createStatement(rs.TYPE_SCROLL_SENSITIVE, rs.CONCUR_UPDATABLE);
                //Faz a query para buscar codigo do estado selecionado no jComboBox de UF
                rs = st.executeQuery("select CODIGO from ESTADOS where SIGLA = '" + sigla + "' ");
                while (rs.next()) {
                    //Seta o valor na variável
                    codEst = rs.getString("CODIGO");
                }
                //Faz a query buscando os Municipios do estado
                rs = st.executeQuery("select NOME from MUNICIPIOS where CODEST = '" + codEst + "' ");
                while (rs.next()) {
                    //Popula a lista de Municipios
                    jcombobox.addItem(rs.getString("NOME"));
                }

                Conectar.DesconectarBD();
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados...\n" + e.getLocalizedMessage());
        }

    }

    public String BuscaCodMunicipio(String Nome) {
        String codest = "15", cod = null;
        try {
            Conectar.ConectarBD();
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MUNICIPIOS WHERE CODEST = '" + codest + "' AND NOME = '" + Nome + "'");
            while (Conectar.result.next()) {

                cod = Conectar.result.getString("CODMUN");

            }
            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao gerar código...\n" + e.getLocalizedMessage());
        }

        return cod;
    }

    public void CarregaTudoLocalCarregamento(String dadCodigo) {
        try {
            Conectar.ConectarBD();
            LimpaTabela(jTableDdMunicipioLocalCarreg);
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_LOCAL_CARREGAMENTO WHERE DAD_CODIGO = '" + dadCodigo + "' ");
            DefaultTableModel dtm = (DefaultTableModel) jTableDdMunicipioLocalCarreg.getModel();
            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("MUNICIPIO"),
                    Conectar.result.getString("UF")
                });
            }
            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }

    public void InserirLocalDeCarregamento(String dadCodigo, String uf, String codMun, String municipio) {
        try {
            Conectar.ConectarBD();

            System.out.println("INSERT INTO MDFE_LOCAL_CARREGAMENTO "
                    + "(DAD_CODIGO, UF, COD_MUNICIPIO, MUNICIPIO) "
                    + "VALUES('" + dadCodigo + "', '" + uf + "', '" + codMun + "', '" + municipio + "')"
            );

            Conectar.stam.executeUpdate("INSERT INTO MDFE_LOCAL_CARREGAMENTO "
                    + "(DAD_CODIGO, UF, COD_MUNICIPIO, MUNICIPIO) "
                    + "VALUES('" + dadCodigo + "', '" + uf + "', '" + codMun + "', '" + municipio + "')"
            );

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }

    public void DeletarLocalDeCarregamento(String dadCodigo) {
        try {
            //Se Tabela tiver mais de 0 carregamento
            if (jTableDdMunicipioLocalCarreg.getRowCount() > 0) {
                //Dá um loop com a quantidade de linhas da Tabela
                for (int linha = 0; linha < jTableDdMunicipioLocalCarreg.getRowCount(); linha++) {
                    //Percorre todas as linhas verificando quais tem o CheckBox marcado (True)
                    if (((boolean) jTableDdMunicipioLocalCarreg.getValueAt(linha, 0)) == true) {
                        //A que estiver marcado, será deletada usando o codigo, Municipio e Dados
                        Conectar.ConectarBD();

                        System.out.println("DELETE FROM MDFE_LOCAL_CARREGAMENTO WHERE DAD_CODIGO = '" + dadCodigo + "' "
                                + "AND MUNICIPIO = '" + jTableDdMunicipioLocalCarreg.getValueAt(linha, 1) + "' "
                                + "AND UF = '" + jTableDdMunicipioLocalCarreg.getValueAt(linha, 2) + "' "
                        );

                        Conectar.stam.executeUpdate("DELETE FROM MDFE_LOCAL_CARREGAMENTO WHERE DAD_CODIGO = '" + dadCodigo + "' "
                                + "AND MUNICIPIO = '" + jTableDdMunicipioLocalCarreg.getValueAt(linha, 1) + "' "
                                + "AND UF = '" + jTableDdMunicipioLocalCarreg.getValueAt(linha, 2) + "' "
                        );

                        Conectar.DesconectarBD();
                    }
                }

                CarregaTudoLocalCarregamento(dadCodigo);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao deletar...\n" + e.getLocalizedMessage());
        }
    }

    public String VerificaDataHoraInicioViagem() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        String data = null;
        if (util.ExtraiNumeros(jFldDdDataHoraInicioViagem.getText()).length() > 0) {
            try {
                data = "'" + util.FormataDataBanco(sdf.parse(jFldDdDataHoraInicioViagem.getText())) + "'";
            } catch (ParseException ex) {
                Logger.getLogger(TelaMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return data;
    }

    public boolean VerificaDdLocalCarregamento() {

        if (jCmbBxDdUfLocalCarreg.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecine um Estado!");
            return false;
        } else if (jCmbBxDdMunicipioLocalCarreg.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecine um Município!");
            return false;
        }

        //Dá o loop na tabela e verifica se não será inserido dados repetidos
        if (jTableDdMunicipioLocalCarreg.getRowCount() <= 50) {
            for (int linha = 0; linha < jTableDdMunicipioLocalCarreg.getRowCount(); linha++) {
                if (jTableDdMunicipioLocalCarreg.getValueAt(linha, 1).equals(jCmbBxDdMunicipioLocalCarreg.getSelectedItem())
                        && jTableDdMunicipioLocalCarreg.getValueAt(linha, 2).equals(jCmbBxDdUfLocalCarreg.getSelectedItem())) {
                    JOptionPane.showMessageDialog(null, "Local de Carregamento já Inserido!");
                    return false;
                }
            }
        }

        if (jTableDdMunicipioLocalCarreg.getRowCount() > 0) {
            for (int linha = 0; linha < jTableDdMunicipioLocalCarreg.getRowCount(); linha++) {
                if (jTableDdMunicipioLocalCarreg.getValueAt(linha, 2).equals(jCmbBxDdUfLocalCarreg.getSelectedItem()) == false) {
                    JOptionPane.showMessageDialog(null, "Município de UF diferente da inserida anteriormente!");
                    return false;
                }
            }
        }

        if (jTableDdMunicipioLocalCarreg.getRowCount() > 50) {
            JOptionPane.showMessageDialog(null, "Limite de 50 Municipios Atingido!");
            return false;
        } else {
            return true;
        }
    }

    public Integer BuscaCodDdMaxLocalCarregamento() {
        Integer codmax = null;
        try {
            Conectar.ConectarBD();
            Conectar.result = Conectar.stam.executeQuery("SELECT MAX(CODIGO)+ 1 FROM MDFE_LOCAL_CARREGAMENTO WHERE DAD_CODIGO = '" + jFldDdNumero.getText() + "' ");
            while (Conectar.result.next()) {
                if (Conectar.result.getString(1) == null) {
                    codmax = 1;
                } else {
                    codmax = Conectar.result.getInt(1);
                }
            }
            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao gerar código...\n" + e.getLocalizedMessage());
        }

        return codmax;
    }

    public String BuscaCodMunicipio(String Municipio, String uf) {
        String codMun = "";
        try {
            Conectar.ConectarBD();
            Conectar.stam = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, ResultSet.HOLD_CURSORS_OVER_COMMIT);
            Conectar.result = Conectar.stam.executeQuery("SELECT CODMUN FROM MUNICIPIOS WHERE NOME = '" + Municipio + "' AND  CODEST = (SELECT CODEST FROM ESTADOS WHERE SIGLA = '" + uf + "')");
            while (Conectar.result.next()) {
                codMun = Conectar.result.getString("CODMUN");
            }
            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados...\n" + e.getLocalizedMessage());
        }

        return codMun;
    }

    public String BuscaNomeMun(String cod) {
        String codMun = "";
        try {
            Conectar.ConectarBD();
            Conectar.stam = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, ResultSet.HOLD_CURSORS_OVER_COMMIT);
            Conectar.result = Conectar.stam.executeQuery("SELECT CODMUN FROM MUNICIPIOS WHERE CODMUN = '" + cod + "'");
            while (Conectar.result.next()) {
                codMun = Conectar.result.getString("NOME");
            }
            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados...\n" + e.getLocalizedMessage());
        }

        return codMun;
    }

    public String BuscaCodUf(String uf) {
        String codEst = "";
        Statement stam = null;
        Connection con = null;
        try {
            Conectar.ConectarBD();
            con = Conectar.con;
            stam = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, ResultSet.HOLD_CURSORS_OVER_COMMIT);
            ResultSet result = stam.executeQuery("SELECT CODIGO FROM ESTADOS WHERE SIGLA = '" + uf + "' ");
            while (result.next()) {
                codEst = result.getString("CODIGO");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados...\n" + e.getLocalizedMessage());
        }
        return codEst;
    }

    public void CarregaTudoUfPercurso(String dadCodigo) {
        try {
            Conectar.ConectarBD();
            LimpaTabela(jTableDdUfPercurso);
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_LOCAL_PERCURSO WHERE DAD_CODIGO = '" + dadCodigo + "' ");
            DefaultTableModel dtm = (DefaultTableModel) jTableDdUfPercurso.getModel();
            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("UF")
                });
            }
            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }

    public void InserirUfPercurso(String codigo, String dadCodigo, String uf) {
        try {
            Conectar.ConectarBD();

            System.out.println("INSERT INTO MDFE_LOCAL_PERCURSO"
                    + "(CODEST, DAD_CODIGO, UF)"
                    + "values('" + codigo + "', '" + dadCodigo + "', '" + uf + "')"
            );

            Conectar.stam.executeUpdate("INSERT INTO MDFE_LOCAL_PERCURSO"
                    + "(CODEST, DAD_CODIGO, UF)"
                    + "values('" + codigo + "', '" + dadCodigo + "', '" + uf + "')"
            );

            Conectar.DesconectarBD();

            CarregaTudoUfPercurso(jFldDdNumero.getText());

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }

    public void DeletarUfPercurso(String dadCodigo) {
        try {
            //Se Tabela tiver mais de 0 carregamento
            if (jTableDdUfPercurso.getRowCount() > 0) {
                //Dá um loop com a quantidade de linhas da Tabela
                for (int linha = 0; linha < jTableDdUfPercurso.getRowCount(); linha++) {
                    //Percorre todas as linhas verificando quais tem o CheckBox marcado (True)
                    if (((boolean) jTableDdUfPercurso.getValueAt(linha, 0)) == true) {
                        //A que estiver marcado, será deletada usando o codigo, Municipio e Dados
                        Conectar.ConectarBD();

                        System.out.println("DELETE FROM MDFE_LOCAL_PERCURSO "
                                + "WHERE DAD_CODIGO = '" + dadCodigo + "' AND UF = '" + jTableDdUfPercurso.getValueAt(linha, 1) + "' "
                        );

                        Conectar.stam.executeUpdate("DELETE FROM MDFE_LOCAL_PERCURSO "
                                + "WHERE DAD_CODIGO = '" + dadCodigo + "' AND UF = '" + jTableDdUfPercurso.getValueAt(linha, 1) + "' "
                        );

                        Conectar.DesconectarBD();

                    }
                }

                CarregaTudoUfPercurso(jFldDdNumero.getText());
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }

    public boolean VerificaDdLocalPercurso() {

        if (jCmbBxDdUfPercurso.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione o Estado!");
            return false;
        }

        //Dá o loop na tabela e verifica se não será inserido dados repetidos
        if (jTableDdUfPercurso.getRowCount() <= 50) {
            for (int linha = 0; linha < jTableDdUfPercurso.getRowCount(); linha++) {
                if (jTableDdUfPercurso.getValueAt(linha, 1).equals(jCmbBxDdUfPercurso.getSelectedItem())) {
                    JOptionPane.showMessageDialog(null, "Estado já Inserido no Percurso!");
                    return false;
                }
            }
        }

        if (jTableDdMunicipioLocalCarreg.getRowCount() > 50) {
            JOptionPane.showMessageDialog(null, "Limite de 25 Estados Atingido!");
            return false;
        } else {
            return true;
        }

    }

    public Integer BuscaCodMaxDdUfPercurso() {
        Integer codmax = 0;
        try {
            Conectar.ConectarBD();
            Conectar.result = Conectar.stam.executeQuery("SELECT MAX(CODIGO) FROM MDFE_LOCAL_PERCURSO");
            while (Conectar.result.next()) {
                if (Conectar.result.getString(1) == null) {
                    codmax = 1;
                } else {
                    codmax = Conectar.result.getInt(1) + 1;
                }
            }
            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao gerar código...\n" + e.getLocalizedMessage());
        }

        return codmax;
    }

    public String TipoEmitente() {
        String tipo = "";
        if (jCmbBxDdTpEmitente.getSelectedIndex() == 0) {
            tipo = "1";
        } else if (jCmbBxDdTpEmitente.getSelectedIndex() == 1) {
            tipo = "2";
        }

        return tipo;
    }

    public String Modalidade() {
        String modal = "";
        if (jCmbBxDdModalidade.getSelectedIndex() == 0) {
            modal = "1";
        } else if (jCmbBxDdModalidade.getSelectedIndex() == 1) {
            modal = "3";
        }

        return modal;
    }

    public String FormaEmissao() {
        String forma = "";
        if (jCmbBxDdFormaEmissao.getSelectedIndex() == 0) {
            forma = "1";
        } else if (jCmbBxDdFormaEmissao.getSelectedIndex() == 1) {
            forma = "2";
        }

        return forma;
    }

    public String TipoTranspotador(){
        String tipo = "";
        if(jCmbBxDdTpTransportador.getSelectedIndex() == 0){
            tipo = "1";
        }else if(jCmbBxDdTpTransportador.getSelectedIndex() == 1){
            tipo = "2";
        }else if(jCmbBxDdTpTransportador.getSelectedIndex() == 2){
            tipo = "3";
        }
        
        return tipo;
    }
    
    public String TipoNavegacao(){
        String tipo = "";
        
        if(jCmbBxTpNavegacao.getSelectedIndex() == 0){
            tipo = "0";
        }else if(jCmbBxTpNavegacao.getSelectedIndex() == 1){
            tipo = "1";
        }
        
        return tipo;
    }
    
    public String TipoNavegacaoEdit(String TpNavegacao){
      String tipo = "";

      if (TpNavegacao.equals("0")) {
        tipo = "0";
      } else if (TpNavegacao.equals("1")) {
        tipo = "1";
      }

      return tipo;
  }
    
    public String FormaEmissaoBusca() {
        String forma = "";
        if (jCmbBxBuscaTpEmissao.getSelectedIndex() == 0) {
            forma = "1";
        } else if (jCmbBxBuscaTpEmissao.getSelectedIndex() == 1) {
            forma = "2";
        }

        return forma;
    }

    public void InserirDados(String dadCodigo, String dadNumero, String dadCodNumerico, String dadDtEmissao, String dadChave, String dadSituacao, Integer codusu,
            String usuario, String data, String rgevento, Integer EMIT_CODFIL, String EMIT_CNPJ, String EMIT_IE, String EMIT_RAZAOSOC, String EMIT_FANTASIA, String EMIT_LOGRADOURO,
            String EMIT_NR, String EMIT_COMP, String EMIT_BAIRRO, String EMIT_CEP, String EMIT_PAIS, String EMIT_UF, String EMIT_MUN, String EMIT_TEL, String EMIT_EMAIL, String EMIT_RNTRC, String EMIT_COD_MUN) {
        try {
            Conectar.ConectarBD();

            System.out.println("INSERT INTO MDFE_DADOS "
                    + "(DAD_CODIGO, DAD_NUMERO, DAD_CODNUMERICO, DAD_DTEMISSAO, DAD_CHAVE, DAD_SITUACAO, RGCODUSU, RGUSUARIO, RGDATA, RGEVENTO,"
                    + "EMIT_CODFIL, EMIT_CNPJ, EMIT_IE, EMIT_RAZAOSOC, EMIT_FANTASIA, EMIT_LOGRADOURO, EMIT_NR, EMIT_COMP, EMIT_BAIRRO, "
                    + "EMIT_CEP, EMIT_PAIS, EMIT_UF, EMIT_MUN, EMIT_TEL, EMIT_EMAIL, EMIT_RNTRC, EMIT_COD_MUN)"
                    + "values('" + dadCodigo + "', '" + dadNumero + "', '" + dadCodNumerico + "', '" + dadDtEmissao + "', '" + dadChave + "', "
                    + " '" + dadSituacao + "', '" + codusu + "', '" + usuario + "', '" + data + "', '" + rgevento + "', "
                    + " " + EMIT_CODFIL + ", '" + EMIT_CNPJ + "', '" + EMIT_IE + "', '" + EMIT_RAZAOSOC + "', '" + EMIT_FANTASIA + "', "
                    + " '" + EMIT_LOGRADOURO + "', '" + EMIT_NR + "', '" + EMIT_COMP + "', '" + EMIT_BAIRRO + "', '" + EMIT_CEP + "', "
                    + " '" + EMIT_PAIS + "', '" + EMIT_UF + "', '" + EMIT_MUN + "', '" + EMIT_TEL + "', '" + EMIT_EMAIL + "', '" + EMIT_RNTRC + "', '" + EMIT_COD_MUN + "' )"
            );

            Conectar.stam.executeUpdate("INSERT INTO MDFE_DADOS "
                    + "(DAD_CODIGO, DAD_NUMERO, DAD_CODNUMERICO, DAD_DTEMISSAO, DAD_CHAVE, DAD_SITUACAO, RGCODUSU, RGUSUARIO, RGDATA, RGEVENTO,"
                    + "EMIT_CODFIL, EMIT_CNPJ, EMIT_IE, EMIT_RAZAOSOC, EMIT_FANTASIA, EMIT_LOGRADOURO, EMIT_NR, EMIT_COMP, EMIT_BAIRRO, "
                    + "EMIT_CEP, EMIT_PAIS, EMIT_UF, EMIT_MUN, EMIT_TEL, EMIT_EMAIL, EMIT_RNTRC, EMIT_COD_MUN)"
                    + "values('" + dadCodigo + "', '" + dadNumero + "', '" + dadCodNumerico + "', '" + dadDtEmissao + "', '" + dadChave + "', "
                    + " '" + dadSituacao + "', '" + codusu + "', '" + usuario + "', '" + data + "', '" + rgevento + "', "
                    + " " + EMIT_CODFIL + ", '" + EMIT_CNPJ + "', '" + EMIT_IE + "', '" + EMIT_RAZAOSOC + "', '" + EMIT_FANTASIA + "', "
                    + " '" + EMIT_LOGRADOURO + "', '" + EMIT_NR + "', '" + EMIT_COMP + "', '" + EMIT_BAIRRO + "', '" + EMIT_CEP + "', "
                    + " '" + EMIT_PAIS + "', '" + EMIT_UF + "', '" + EMIT_MUN + "', '" + EMIT_TEL + "', '" + EMIT_EMAIL + "', '" + EMIT_RNTRC + "', '" + EMIT_COD_MUN + "' )"
            );

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir dados...\n" + e.getLocalizedMessage());
        }
    }

    /*
    public void Inserir(String dadCodigo, String dadNumero, String dadModelo, String dadSerie, String dadDtEmissao, String dadDtInicio, String dadCodNumerico, String dadDV,
            String dadUf, String dadTpEmitente, String dadModalidade, String dadFormaEmissao, String dadChave, String dadLocalDescarregamento, String dadSituacao,
            Integer codusu, String usuario, String data, String rgevento, Integer EMIT_CODFIL, String EMIT_CNPJ, String EMIT_IE, String EMIT_RAZAOSOC, String EMIT_FANTASIA, String EMIT_LOGRADOURO,
            String EMIT_NR, String EMIT_COMP, String EMIT_BAIRRO, String EMIT_CEP, String EMIT_PAIS, String EMIT_UF, String EMIT_COD_MUN, String EMIT_MUN, String EMIT_TEL, String EMIT_EMAIL,
            String rodRntrc, String rodCiot, String rodAgPorto, String rodCodIntVeic, String RodTpCarroceria, String rodPlaca, Double rodTara, String rodRenavam,
            String rodUf, String rodTpRodado, Double rodCapacidadeKg, Double rodCapacidadeM3, String pptNome, String proprietario, String pptCpf, String pptCnpj,
            String pptRntrc, String pptIe, String pptUf,
            Integer AQU_COD_AGENCIA, String AQU_NOME_AGENCIA, String AQU_CNPJ_AGENCIA_NAV,
            Integer AQU_COD_INT_EMB, String AQU_COD_EMB, String AQU_COD_TP_EMB, String AQU_NOME_EMB,
            String AQU_NR_VIAGEM, String AQU_COD_PORTO_EMB, String AQU_COD_PORTO_DES,
            String totQtdCte, String totQtdNfe, Double totMercTransportada, String totUndMedida, Double totPesoBruto,
            String infFisco, String infContr) {
        try {
            Conectar.ConectarBD();
            System.out.println("INSERT INTO MDFE_DADOS"
                    //Dados
                    + "(DAD_CODIGO, DAD_NUMERO, DAD_MODELO, DAD_SERIE, DAD_DTEMISSAO, DAD_DTINICIO, DAD_CODNUMERICO, "
                    + "DAD_DV, DAD_UF, DAD_TP_EMITENTE, DAD_MODALIDADE, DAD_FORMA_EMISSAO, DAD_CHAVE, DAD_LOCAL_DESCARREGAMENTO, DAD_SITUACAO,  "
                    + "RGCODUSU, RGUSUARIO, RGDATA, RGEVENTO, "
                    + ""//Emitente
                    + "EMIT_CODFIL, EMIT_CNPJ, EMIT_IE, EMIT_RAZAOSOC, EMIT_FANTASIA, EMIT_LOGRADOURO, EMIT_NR, EMIT_COMP, EMIT_BAIRRO, EMIT_CEP, EMIT_PAIS, EMIT_UF, EMIT_COD_MUN, EMIT_MUN, EMIT_TEL, EMIT_EMAIL, "
                    + ""//Rodoviario
                    + "ROD_RNTRC, ROD_CIOT, ROD_COD_AG_PORTO, ROD_COD_INT_VEIC, ROD_TP_CARROCERIA, ROD_PLACA, ROD_TARA, ROD_RENAVAM, ROD_UF, ROD_TP_RODADO, "
                    + " ROD_CAPACIDADE_KG, ROD_CAPACIDADE_M3, "
                    + "PPT_NOME, PROPIETARIO, PPT_CPF, PPT_CNPJ, PPT_RNTRC, PPT_IE, PPT_UF,"
                    + ""//aquaviario
                    + " AQU_COD_AGENCIA, AQU_NOME_AGENCIA, AQU_CNPJ_AGENCIA_NAV, AQU_COD_INT_EMB, AQU_COD_EMB, AQU_COD_TP_EMB, AQU_NOME_EMB, AQU_NR_VIAGEM, AQU_COD_PORTO_EMB, AQU_COD_PORTO_DES, "
                    + ""//totalizadores
                    + " TOT_QTD_CTE, TOT_QTD_NFE, TOT_TOT_MERC_TRANSPORTADA, TOT_UN_MEDIDA_PESO, TOT_PESO_BRUTO, "
                    + ""//informacoes adicionais
                    + " INF_FISCO, INF_CONTR)"
                    + "values('" + dadCodigo + "', '" + dadNumero + "', '" + dadModelo + "', '" + dadSerie + "', '" + dadDtEmissao + "', " + dadDtInicio + ", '" + dadCodNumerico + "', "
                    + " '" + dadDV + "', '" + dadUf + "', '" + dadTpEmitente + "', '" + dadModalidade + "', '" + dadFormaEmissao + "', '" + dadChave + "', '" + dadLocalDescarregamento + "', "
                    + " '" + dadSituacao + "','" + codusu + "', '" + usuario + "', '" + data + "', '" + rgevento + "', "
                    + ""
                    + " " + EMIT_CODFIL + ", '" + EMIT_CNPJ + "', '" + EMIT_IE + "', '" + EMIT_RAZAOSOC + "', '" + EMIT_FANTASIA + "', '" + EMIT_LOGRADOURO + "', '" + EMIT_NR + "', '" + EMIT_COMP + "', '" + EMIT_BAIRRO + "', '" + EMIT_CEP + "', '" + EMIT_PAIS + "', '" + EMIT_UF + "', '" + EMIT_COD_MUN + "', '" + EMIT_MUN + "', '" + EMIT_TEL + "', '" + EMIT_EMAIL + "', "
                    + ""
                    + " '" + rodRntrc + "', '" + rodCiot + "', '" + rodAgPorto + "', '" + rodCodIntVeic + "', '" + RodTpCarroceria + "', '" + rodPlaca + "', " + rodTara + ", '" + rodRenavam + "', '" + rodUf + "', "
                    + " '" + rodTpRodado + "', " + rodCapacidadeKg + ", " + rodCapacidadeM3 + ", "
                    + ""
                    + " '" + pptNome + "', '" + proprietario + "', '" + pptCpf + "', '" + pptCnpj + "', '" + pptRntrc + "', '" + pptIe + "', '" + pptUf + "' , "
                    + ""
                    + " " + AQU_COD_AGENCIA + " , '" + AQU_NOME_AGENCIA + "' , '" + AQU_CNPJ_AGENCIA_NAV + "' , '" + AQU_COD_INT_EMB + "' , " + AQU_COD_EMB + " , '" + AQU_COD_TP_EMB + "' , '" + AQU_NOME_EMB + "' , '" + AQU_NR_VIAGEM + "' , '" + AQU_COD_PORTO_EMB + "', '" + AQU_COD_PORTO_DES + "', "
                    + ""
                    + " '" + totQtdCte + "', '" + totQtdNfe + "', '" + totMercTransportada + "', '" + totUndMedida + "', '" + totPesoBruto + "', "
                    + ""
                    + " '" + infFisco + "', '" + infContr + "' )"
            );

            //     , 
            Conectar.stam.executeUpdate("INSERT INTO MDFE_DADOS"
                    //Dados
                    + "(DAD_CODIGO, DAD_NUMERO, DAD_MODELO, DAD_SERIE, DAD_DTEMISSAO, DAD_DTINICIO, DAD_CODNUMERICO, "
                    + "DAD_DV, DAD_UF, DAD_TP_EMITENTE, DAD_MODALIDADE, DAD_FORMA_EMISSAO, DAD_CHAVE, DAD_LOCAL_DESCARREGAMENTO, DAD_SITUACAO,  "
                    + "RGCODUSU, RGUSUARIO, RGDATA, RGEVENTO, "
                    + ""//Emitente
                    + "EMIT_CODFIL, EMIT_CNPJ, EMIT_IE, EMIT_RAZAOSOC, EMIT_FANTASIA, EMIT_LOGRADOURO, EMIT_NR, EMIT_COMP, EMIT_BAIRRO, EMIT_CEP, EMIT_PAIS, EMIT_UF, EMIT_COD_MUN, EMIT_MUN, EMIT_TEL, EMIT_EMAIL, "
                    + ""//Rodoviario
                    + "ROD_RNTRC, ROD_CIOT, ROD_COD_AG_PORTO, ROD_COD_INT_VEIC, ROD_TP_CARROCERIA, ROD_PLACA, ROD_TARA, ROD_RENAVAM, ROD_UF, ROD_TP_RODADO, "
                    + " ROD_CAPACIDADE_KG, ROD_CAPACIDADE_M3, "
                    + "PPT_NOME, PROPIETARIO, PPT_CPF, PPT_CNPJ, PPT_RNTRC, PPT_IE, PPT_UF,"
                    + ""//aquaviario
                    + " AQU_COD_AGENCIA, AQU_NOME_AGENCIA, AQU_CNPJ_AGENCIA_NAV, AQU_COD_INT_EMB, AQU_COD_EMB, AQU_COD_TP_EMB, AQU_NOME_EMB, AQU_NR_VIAGEM, AQU_COD_PORTO_EMB, AQU_COD_PORTO_DES, "
                    + ""//totalizadores
                    + " TOT_QTD_CTE, TOT_QTD_NFE, TOT_TOT_MERC_TRANSPORTADA, TOT_UN_MEDIDA_PESO, TOT_PESO_BRUTO, "
                    + ""//informacoes adicionais
                    + " INF_FISCO, INF_CONTR)"
                    + "values('" + dadCodigo + "', '" + dadNumero + "', '" + dadModelo + "', '" + dadSerie + "', '" + dadDtEmissao + "', " + dadDtInicio + ", '" + dadCodNumerico + "', "
                    + " '" + dadDV + "', '" + dadUf + "', '" + dadTpEmitente + "', '" + dadModalidade + "', '" + dadFormaEmissao + "', '" + dadChave + "', '" + dadLocalDescarregamento + "', "
                    + " '" + dadSituacao + "','" + codusu + "', '" + usuario + "', '" + data + "', '" + rgevento + "', "
                    + ""
                    + " " + EMIT_CODFIL + ", '" + EMIT_CNPJ + "', '" + EMIT_IE + "', '" + EMIT_RAZAOSOC + "', '" + EMIT_FANTASIA + "', '" + EMIT_LOGRADOURO + "', '" + EMIT_NR + "', '" + EMIT_COMP + "', '" + EMIT_BAIRRO + "', '" + EMIT_CEP + "', '" + EMIT_PAIS + "', '" + EMIT_UF + "', '" + EMIT_COD_MUN + "', '" + EMIT_MUN + "', '" + EMIT_TEL + "', '" + EMIT_EMAIL + "', "
                    + ""
                    + " '" + rodRntrc + "', '" + rodCiot + "', '" + rodAgPorto + "', '" + rodCodIntVeic + "', '" + RodTpCarroceria + "', '" + rodPlaca + "', " + rodTara + ", '" + rodRenavam + "', '" + rodUf + "', "
                    + " '" + rodTpRodado + "', " + rodCapacidadeKg + ", " + rodCapacidadeM3 + ", "
                    + ""
                    + " '" + pptNome + "', '" + proprietario + "', '" + pptCpf + "', '" + pptCnpj + "', '" + pptRntrc + "', '" + pptIe + "', '" + pptUf + "' , "
                    + ""
                    + " " + AQU_COD_AGENCIA + " , '" + AQU_NOME_AGENCIA + "' , '" + AQU_CNPJ_AGENCIA_NAV + "' , " + AQU_COD_INT_EMB + " , '" + AQU_COD_EMB + "' , '" + AQU_COD_TP_EMB + "' , '" + AQU_NOME_EMB + "' , '" + AQU_NR_VIAGEM + "' , '" + AQU_COD_PORTO_EMB + "', '" + AQU_COD_PORTO_DES + "', "
                    + ""
                    + " '" + totQtdCte + "', '" + totQtdNfe + "', '" + totMercTransportada + "', '" + totUndMedida + "', '" + totPesoBruto + "', "
                    + ""
                    + " '" + infFisco + "', '" + infContr + "' )"
            );

          //  JOptionPane.showMessageDialog(null, "MDF-e Salvo Com Sucesso!");
            

           
            
             Integer option = JOptionPane.showConfirmDialog(null, "MDF-e Salvo Com Sucesso! \n Deseja Continuar Editando?", "Confirmação", JOptionPane.YES_NO_OPTION);
             if (option == JOptionPane.YES_OPTION) {
       
             }else{
                jPnlEdit.setVisible(false);
                jPnlBusca.setVisible(true);

                CarregaTudo();
             }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }
     */
    public void AlterarDados(String dadCodigo, String dadModelo, String dadSerie, String dadNumero, String dadDtEmissao, String dadDtInicio, String dadCodNumerico, String dadDV,
            String dadUf, String dadTpEmitente, String dadModalidade, String dadFormaEmissao, String dadTipoTrans, String dadChave, String dadLocalDescarregamento, String dadSituacao,
            Integer codusu, String usuario, String data, String rgevento, Integer EMIT_CODFIL, String EMIT_CNPJ, String EMIT_IE, String EMIT_RAZAOSOC, String EMIT_FANTASIA, String EMIT_LOGRADOURO,
            String EMIT_NR, String EMIT_COMP, String EMIT_BAIRRO, String EMIT_CEP, String EMIT_PAIS, String EMIT_UF, String EMIT_COD_MUN, String EMIT_MUN, String EMIT_TEL, String EMIT_EMAIL, String EMIT_RNTRC,
            String rodRntrc, String rodAgPorto, String rodCodIntVeic, String rodTpCarroceria, String rodPlaca, Integer rodTara, String rodRenavam,
            String rodUf, String rodTpRodado, Integer rodCapacidadeKg, Integer rodCapacidadeM3, Integer pptCodigo, String pptNome, String proprietario, String pptCpf, String pptCnpj,
            String pptRntrc, String pptIe, String pptUf,
            Integer AQU_COD_INT_EMB, String AQU_COD_EMB, String AQU_NOME_EMB, String AQU_COD_TP_EMB, String AQU_IRIN_EMB, String AQU_COD_PORTO_EMB, String AQU_NOME_PORTO_EMB,
            String AQU_COD_PORTO_DES, String AQU_NOME_PORTO_DES, String AQU_COD_PORT_TRANS, String AQU_NOME_PORT_TRANS, String AQU_TP_NAVEGACAO, String AQU_NR_VIAGEM, 
            String totQtdCte, String totQtdNfe, String totQtdMDFe, Double totMercTransportada, String totUndMedida, Double totPesoBruto,
            String infFisco, String infContr) {
        try {
            Conectar.ConectarBD();

            if (rodUf == null) {
                rodUf = "";
            }

            if (AQU_COD_TP_EMB == null) {
                AQU_COD_TP_EMB = "";
            }

            System.out.println("UPDATE MDFE_DADOS SET "
                    + "DAD_MODELO        = '" + dadModelo + "', "
                    + "DAD_SERIE         = '" + dadSerie + "', "
                    + "DAD_NUMERO        = '" + dadNumero + "', "
                    + "DAD_DTEMISSAO     = '" + dadDtEmissao + "', "
                    + "DAD_DTINICIO      = " + dadDtInicio + ", "
                    + "DAD_CODNUMERICO   = '" + dadCodNumerico + "', "
                    + "DAD_DV            = '" + dadDV + "', "
                    + "DAD_UF            = '" + dadUf + "', "
                    + "DAD_TP_EMITENTE   = '" + dadTpEmitente + "', "
                    + "DAD_MODALIDADE    = '" + dadModalidade + "', "
                    + "DAD_FORMA_EMISSAO = '" + dadFormaEmissao + "', "
                    + "DAD_TP_TRANSPORTADOR = '"+ dadTipoTrans +"', "        
                    + "DAD_CHAVE         = '" + dadChave + "', "
                    + "DAD_LOCAL_DESCARREGAMENTO = '" + dadLocalDescarregamento + "', "
                    + "DAD_SITUACAO      = '" + dadSituacao + "', "
                    + "RGCODUSU          = '" + codusu + "', "
                    + "RGUSUARIO         = '" + usuario + "', "
                    + "RGDATA            = '" + data + "', "
                    + "RGEVENTO          = '" + rgevento + "', "
                    + "EMIT_CODFIL       =  " + EMIT_CODFIL + ", "
                    + "EMIT_CNPJ         = '" + EMIT_CNPJ + "', "
                    + "EMIT_IE           = '" + EMIT_IE + "', "
                    + "EMIT_RAZAOSOC     = '" + EMIT_RAZAOSOC + "', "
                    + "EMIT_FANTASIA     = '" + EMIT_FANTASIA + "', "
                    + "EMIT_LOGRADOURO   = '" + EMIT_LOGRADOURO + "', "
                    + "EMIT_NR           = '" + EMIT_NR + "', "
                    + "EMIT_COMP         = '" + EMIT_COMP + "', "
                    + "EMIT_BAIRRO       = '" + EMIT_BAIRRO + "', "
                    + "EMIT_CEP          = '" + EMIT_CEP + "', "
                    + "EMIT_PAIS         = '" + EMIT_PAIS + "', "
                    + "EMIT_UF           = '" + EMIT_UF + "', "
                    + "EMIT_COD_MUN      = '" + EMIT_COD_MUN + "', "
                    + "EMIT_MUN          = '" + EMIT_MUN + "', "
                    + "EMIT_TEL          = '" + EMIT_TEL + "', "
                    + "EMIT_EMAIL        = '" + EMIT_EMAIL + "', "
                    + "EMIT_RNTRC        = '" + EMIT_RNTRC + "', "
                    + "ROD_RNTRC         = '" + rodRntrc + "', "
                    + "ROD_COD_AG_PORTO  = '" + rodAgPorto + "', "
                    + "ROD_COD_INT_VEIC  = '" + rodCodIntVeic + "', "
                    + "ROD_TP_CARROCERIA = '" + rodTpCarroceria + "', "
                    + "ROD_PLACA         = '" + rodPlaca + "', "
                    + "ROD_TARA          = " + rodTara + ", "
                    + "ROD_RENAVAM       = '" + rodRenavam + "', "
                    + "ROD_UF            = '" + rodUf + "', "
                    + "ROD_TP_RODADO     = '" + rodTpRodado + "', "
                    + "ROD_CAPACIDADE_KG       = " + rodCapacidadeKg + ", "
                    + "ROD_CAPACIDADE_M3       = " + rodCapacidadeM3 + ", "
                    + "PPT_CODPROP             = " + pptCodigo + ", "
                    + "PPT_NOME                = '" + pptNome + "', "
                    + "PROPIETARIO             = '" + proprietario + "', "
                    + "PPT_CPF                 = '" + pptCpf + "', "
                    + "PPT_CNPJ                = '" + pptCnpj + "', "
                    + "PPT_RNTRC               = '" + pptRntrc + "', "
                    + "PPT_IE                  = '" + pptIe + "', "
                    + "PPT_UF                  = '" + pptUf + "', "
                    + "AQU_COD_INT_EMB         = "  + AQU_COD_INT_EMB + ", "
                    + "AQU_COD_EMB             = '" + AQU_COD_EMB + "', "
                    + "AQU_COD_TP_EMB          = '" + AQU_COD_TP_EMB + "', "
                    + "AQU_NOME_EMB            = '" + AQU_NOME_EMB + "', "  
                    + "AQU_IRIN_EMB            = '" + AQU_IRIN_EMB +"', "        
                    + "AQU_COD_PORTO_EMB       = '" + AQU_COD_PORTO_EMB + "', "
                    + "AQU_NOME_PORTO_EMB      = '" + AQU_NOME_PORTO_EMB +"', "        
                    + "AQU_COD_PORTO_DES       = '" + AQU_COD_PORTO_DES + "', "
                    + "AQU_NOME_PORTO_DES      = '" + AQU_NOME_PORTO_DES +"', "  
                    
                    + "AQU_COD_PORTO_TRANS      = '" +AQU_COD_PORT_TRANS  +"', "  
                    + "AQU_NOME_PORTO_TRANS     = '" +AQU_NOME_PORT_TRANS +"', "  
                            
                    
                    
                            
                    + "AQU_TP_NAVEGACAO        = '" + AQU_TP_NAVEGACAO +"', "        
                    + "AQU_NR_VIAGEM           = '" + AQU_NR_VIAGEM + "', "
                    + "TOT_QTD_CTE             = '" + totQtdCte + "', "
                    + "TOT_QTD_NFE             = '" + totQtdNfe + "', "
                    + "TOT_QTD_MDFE             = '" + totQtdMDFe + "', "        
                    + "TOT_TOT_MERC_TRANSPORTADA = " + totMercTransportada + ", "
                    + "TOT_UN_MEDIDA_PESO      = '" + totUndMedida + "', "
                    + "TOT_PESO_BRUTO          = " + totPesoBruto + ", "
                    + "INF_FISCO               = '" + infFisco + "', "
                    + "INF_CONTR               = '" + infContr + "' "
                    + "WHERE DAD_CODIGO = '" + dadNumero + "' "
            );

            Conectar.stam.executeUpdate("UPDATE MDFE_DADOS SET "
                    + "DAD_MODELO        = '" + dadModelo + "', "
                    + "DAD_SERIE         = '" + dadSerie + "', "
                    + "DAD_NUMERO        = '" + dadNumero + "', "
                    + "DAD_DTEMISSAO     = '" + dadDtEmissao + "', "
                    + "DAD_DTINICIO      = " + dadDtInicio + ", "
                    + "DAD_CODNUMERICO   = '" + dadCodNumerico + "', "
                    + "DAD_DV            = '" + dadDV + "', "
                    + "DAD_UF            = '" + dadUf + "', "
                    + "DAD_TP_EMITENTE   = '" + dadTpEmitente + "', "
                    + "DAD_MODALIDADE    = '" + dadModalidade + "', "
                    + "DAD_FORMA_EMISSAO = '" + dadFormaEmissao + "', "
                    + "DAD_TP_TRANSPORTADOR = '"+ dadTipoTrans +"', "        
                    + "DAD_CHAVE         = '" + dadChave + "', "
                    + "DAD_LOCAL_DESCARREGAMENTO = '" + dadLocalDescarregamento + "', "
                    + "DAD_SITUACAO      = '" + dadSituacao + "', "
                    + "RGCODUSU          = '" + codusu + "', "
                    + "RGUSUARIO         = '" + usuario + "', "
                    + "RGDATA            = '" + data + "', "
                    + "RGEVENTO          = '" + rgevento + "', "
                    + "EMIT_CODFIL       =  " + EMIT_CODFIL + ", "
                    + "EMIT_CNPJ         = '" + EMIT_CNPJ + "', "
                    + "EMIT_IE           = '" + EMIT_IE + "', "
                    + "EMIT_RAZAOSOC     = '" + EMIT_RAZAOSOC + "', "
                    + "EMIT_FANTASIA     = '" + EMIT_FANTASIA + "', "
                    + "EMIT_LOGRADOURO   = '" + EMIT_LOGRADOURO + "', "
                    + "EMIT_NR           = '" + EMIT_NR + "', "
                    + "EMIT_COMP         = '" + EMIT_COMP + "', "
                    + "EMIT_BAIRRO       = '" + EMIT_BAIRRO + "', "
                    + "EMIT_CEP          = '" + EMIT_CEP + "', "
                    + "EMIT_PAIS         = '" + EMIT_PAIS + "', "
                    + "EMIT_UF           = '" + EMIT_UF + "', "
                    + "EMIT_COD_MUN      = '" + EMIT_COD_MUN + "', "
                    + "EMIT_MUN          = '" + EMIT_MUN + "', "
                    + "EMIT_TEL          = '" + EMIT_TEL + "', "
                    + "EMIT_EMAIL        = '" + EMIT_EMAIL + "', "
                    + "EMIT_RNTRC        = '" + EMIT_RNTRC + "', "
                    + "ROD_RNTRC         = '" + rodRntrc + "', "
                    + "ROD_COD_AG_PORTO  = '" + rodAgPorto + "', "
                    + "ROD_COD_INT_VEIC  = '" + rodCodIntVeic + "', "
                    + "ROD_TP_CARROCERIA = '" + rodTpCarroceria + "', "
                    + "ROD_PLACA         = '" + rodPlaca + "', "
                    + "ROD_TARA          = " + rodTara + ", "
                    + "ROD_RENAVAM       = '" + rodRenavam + "', "
                    + "ROD_UF            = '" + rodUf + "', "
                    + "ROD_TP_RODADO     = '" + rodTpRodado + "', "
                    + "ROD_CAPACIDADE_KG       = " + rodCapacidadeKg + ", "
                    + "ROD_CAPACIDADE_M3       = " + rodCapacidadeM3 + ", "
                    + "PPT_CODPROP             = " + pptCodigo + ", "
                    + "PPT_NOME                = '" + pptNome + "', "
                    + "PROPIETARIO             = '" + proprietario + "', "
                    + "PPT_CPF                 = '" + pptCpf + "', "
                    + "PPT_CNPJ                = '" + pptCnpj + "', "
                    + "PPT_RNTRC               = '" + pptRntrc + "', "
                    + "PPT_IE                  = '" + pptIe + "', "
                    + "PPT_UF                  = '" + pptUf + "', "
                    + "AQU_COD_INT_EMB         = "  + AQU_COD_INT_EMB + ", "
                    + "AQU_COD_EMB             = '" + AQU_COD_EMB + "', "
                    + "AQU_COD_TP_EMB          = '" + AQU_COD_TP_EMB + "', "
                    + "AQU_NOME_EMB            = '" + AQU_NOME_EMB + "', "  
                    + "AQU_IRIN_EMB            = '" + AQU_IRIN_EMB +"', "        
                    + "AQU_COD_PORTO_EMB       = '" + AQU_COD_PORTO_EMB + "', "
                    + "AQU_NOME_PORTO_EMB      = '" + AQU_NOME_PORTO_EMB +"', "        
                    + "AQU_COD_PORTO_DES       = '" + AQU_COD_PORTO_DES + "', "
                    + "AQU_NOME_PORTO_DES      = '" + AQU_NOME_PORTO_DES +"', " 
                    + "AQU_COD_PORTO_TRANS      = '" +AQU_COD_PORT_TRANS  +"', "  
                    + "AQU_NOME_PORTO_TRANS     = '" +AQU_NOME_PORT_TRANS +"', "  
                            
                    + "AQU_TP_NAVEGACAO        = '" + AQU_TP_NAVEGACAO +"', "        
                    + "AQU_NR_VIAGEM           = '" + AQU_NR_VIAGEM + "', "
                    + "TOT_QTD_CTE             = '" + totQtdCte + "', "
                    + "TOT_QTD_NFE             = '" + totQtdNfe + "', "
                    + "TOT_QTD_MDFE             = '" + totQtdMDFe + "', "        
                    + "TOT_TOT_MERC_TRANSPORTADA = " + totMercTransportada + ", "
                    + "TOT_UN_MEDIDA_PESO      = '" + totUndMedida + "', "
                    + "TOT_PESO_BRUTO          = " + totPesoBruto + ", "
                    + "INF_FISCO               = '" + infFisco + "', "
                    + "INF_CONTR               = '" + infContr + "' "
                    + "WHERE DAD_CODIGO = '" + dadNumero + "' "
            );

            Conectar.DesconectarBD();

            Integer option = 0;
            if (tag_acao == "1") {
                option = JOptionPane.showConfirmDialog(null, "MDF-e Inserido Com Sucesso! \n Deseja Continuar Editando?", "Confirmação", JOptionPane.YES_NO_OPTION);
            } else if (tag_acao == "2") {
                option = JOptionPane.showConfirmDialog(null, "MDF-e Alterado Com Sucesso! \n Deseja Continuar Editando?", "Confirmação", JOptionPane.YES_NO_OPTION);
            }

            if (option == JOptionPane.YES_OPTION) {

                jLblStatusMDFe.setText("Salvo");

            } else {
                jPnlEdit.setVisible(false);
                jPnlBusca.setVisible(true);

                CarregaTudo();
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao alterar...\n" + e.getLocalizedMessage());
        }

    }

    public void AlterarDadosSituacao(String dadNumero, String dadSituacao) {

        try {

            Conectar.ConectarBD();

            System.out.println("UPDATE MDFE_DADOS SET "
                    + "DAD_SITUACAO      = '" + dadSituacao + "' "
                    + "WHERE DAD_CODIGO = '" + dadNumero + "' "
            );

            Conectar.stam.executeUpdate("UPDATE MDFE_DADOS SET "
                    + "DAD_SITUACAO      = '" + dadSituacao + "' "
                    + "WHERE DAD_CODIGO = '" + dadNumero + "' "
            );

            Conectar.DesconectarBD();

            System.out.println("Situação Alterada!");

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao alterar situação...\n" + e.getLocalizedMessage());
        }
    }

    public void AlterarDadosProtocolo(String dadNumero, String dadProtocolo) {

        try {

            Conectar.ConectarBD();

            System.out.println("UPDATE MDFE_DADOS SET "
                    + "DAD_NR_PROT      = '" + dadProtocolo + "' "
                    + "WHERE DAD_CODIGO = '" + dadNumero + "' "
            );

            Conectar.stam.executeUpdate("UPDATE MDFE_DADOS SET "
                    + "DAD_NR_PROT      = '" + dadProtocolo + "' "
                    + "WHERE DAD_CODIGO = '" + dadNumero + "' "
            );

            Conectar.DesconectarBD();

            System.out.println("Situação Alterada!");

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao alterar situação...\n" + e.getLocalizedMessage());
        }
    }
    
    public void DeletarDados(Integer codusu, String usuario, String data, String rgevento) {
        try {

            for (int linha = 0; linha < jTablePrincipal.getRowCount(); linha++) {
                if (((boolean) jTablePrincipal.getValueAt(linha, 0)) == true) {

                    Conectar.ConectarBD();

                    System.out.println("UPDATE MDFE_DADOS set "
                            + "RGCODUSU  = '" + codusu + "', "
                            + "RGUSUARIO = '" + usuario + "', "
                            + "RGDATA    = '" + data + "', "
                            + "RGEVENTO  = '" + rgevento + "' "
                            + "WHERE DAD_CODIGO = '" + jTablePrincipal.getValueAt(linha, 2) + "' "
                    );

                    Conectar.stam.executeUpdate("UPDATE MDFE_DADOS set "
                            + "RGCODUSU  = '" + codusu + "', "
                            + "RGUSUARIO = '" + usuario + "', "
                            + "RGDATA    = '" + data + "', "
                            + "RGEVENTO  = '" + rgevento + "' "
                            + "WHERE DAD_CODIGO = '" + jTablePrincipal.getValueAt(linha, 2) + "' "
                    );
                }

                Conectar.DesconectarBD();
            }

            JOptionPane.showMessageDialog(null, "MDF-e(s) Deletado(s) Com Sucesso");

            CarregaTudo();

            jBtBuscaExcluir.setEnabled(false);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao deletar...\n " + e.getLocalizedMessage());
        }
    }

    public void CarregaCampoEditDados(String dadCodigo) {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        try {
            Conectar.ConectarBD();
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_DADOS WHERE DAD_CODIGO = '" + dadCodigo + "' ");
            while (Conectar.result.next()) {
                jLblStatusMDFe.setText(Conectar.result.getString("DAD_SITUACAO"));
                jLblChaveDeAcesso.setText(Conectar.result.getString("DAD_CHAVE"));
                jLblNumeroMDFe.setText(Conectar.result.getString("DAD_NUMERO"));
                jFldDdSerie.setText(Conectar.result.getString("DAD_SERIE"));
                jFldDdNumero.setText(Conectar.result.getString("DAD_NUMERO"));
                jFldDdDataHoraEmissao.setText(sdf.format(Conectar.result.getDate("DAD_DTEMISSAO")));
                if (Conectar.result.getDate("DAD_DTINICIO") != null) {
                    jFldDdDataHoraInicioViagem.setText(sdf.format(Conectar.result.getDate("DAD_DTINICIO")));
                }
                jFldDdCodNumerico.setText(Conectar.result.getString("DAD_CODNUMERICO"));
                jFldDdDV.setText(Conectar.result.getString("DAD_DV"));
                jCmbBxDdMDFeUf.setSelectedItem(Conectar.result.getString("DAD_UF"));

                if (Conectar.result.getString("DAD_TP_EMITENTE") != null) {
                    if (Conectar.result.getString("DAD_TP_EMITENTE").equals("1")) {
                        jCmbBxDdTpEmitente.setSelectedIndex(0);
                        jTabEdit.setEnabledAt(2, true);
                        jTabEdit.setEnabledAt(3, false);
                    } else if(Conectar.result.getString("DAD_TP_EMITENTE").equals("2")){
                        jCmbBxDdTpEmitente.setSelectedIndex(1);
                        jTabEdit.setEnabledAt(2, false);
                        jTabEdit.setEnabledAt(3, true);
                    }
                }

                if (Conectar.result.getString("DAD_MODALIDADE") != null) {
                    if (Conectar.result.getString("DAD_MODALIDADE").equals("1")) {
                        jCmbBxDdModalidade.setSelectedIndex(0);
                    } else if(Conectar.result.getString("DAD_MODALIDADE").equals("3")){
                        jCmbBxDdModalidade.setSelectedIndex(1);
                    }
                }

                if (Conectar.result.getString("DAD_FORMA_EMISSAO") != null) {
                    if (Conectar.result.getString("DAD_FORMA_EMISSAO").equals("1")) {
                        jCmbBxDdFormaEmissao.setSelectedIndex(0);
                    } else if(Conectar.result.getString("DAD_FORMA_EMISSAO").equals("2")){
                        jCmbBxDdFormaEmissao.setSelectedIndex(1);
                    }
                }
                
                if(Conectar.result.getString("DAD_TP_TRANSPORTADOR") != null){
                    if(Conectar.result.getString("DAD_TP_TRANSPORTADOR").equals("1")){
                        jCmbBxDdTpTransportador.setSelectedIndex(0);
                    }else if(Conectar.result.getString("DAD_TP_TRANSPORTADOR").equals("2")){
                        jCmbBxDdTpTransportador.setSelectedIndex(1);
                    }else if(Conectar.result.getString("DAD_TP_TRANSPORTADOR").equals("3")){
                        jCmbBxDdTpTransportador.setSelectedIndex(2);
                    }
                }

                jCmbBxDdUfLocalDescarreg.setSelectedItem(Conectar.result.getString("DAD_LOCAL_DESCARREGAMENTO"));

                //--------------------------emissor-----------------------------
                //--------------------------rodoviario-----------------------------
                jFldRdvRntrc.setText(Conectar.result.getString("ROD_RNTRC"));
                //jFldRdvCiot.setText(Conectar.result.getString("ROD_CIOT"));
                jFldRdvCodAgendamentoPorto.setText(Conectar.result.getString("ROD_COD_AG_PORTO"));
                jFldRdvCodVeic.setText(Conectar.result.getString("ROD_COD_INT_VEIC"));
                jLblRdvTpCarroceria.setText(TipoCarroceria(Conectar.result.getString("ROD_TP_CARROCERIA")));
                jLblRdvPlaca.setText(Conectar.result.getString("ROD_PLACA"));
                jLblRdvTaraKG.setText(Conectar.result.getInt("ROD_TARA") + " KG");
                jLblRdvRenavam.setText(Conectar.result.getString("ROD_RENAVAM"));
                jLblRdvUFVeic.setText(Conectar.result.getString("ROD_UF"));
                jLblRdvCapacidadeKG.setText(Conectar.result.getInt("ROD_CAPACIDADE_KG") + " KG");
                jLblRdvCapacidadeM3.setText(Conectar.result.getInt("ROD_CAPACIDADE_M3") + " M3");
                jLblRdvTpRodado.setText(TipoProprietario(Conectar.result.getString("ROD_TP_RODADO")));
      
                jChckBxDdInformarEmitente.setEnabled(false);
                
                
                if (Conectar.result.getString("ROD_COD_INT_VEIC") != null && Conectar.result.getString("ROD_COD_INT_VEIC").length() > 0) {
                    BuscaProprietarioTipo(BuscaVeiculoEdit(Conectar.result.getString("ROD_COD_INT_VEIC")), "V");
                }
                
                if (jFldRdvCodVeic.getText().length() > 0) {
                  BuscaVeiculoTracao(jFldRdvCodVeic.getText());
                  if (jFldRdvCodProp.getText().length() > 0) {
                    BuscaProprietario(jFldRdvCodProp.getText());
                    jChckBxDdInformarEmitente.setEnabled(false);
                  }

                }
                

                //--------------------------aquaviario-----------------------------
                
                
                jFldAquaIdEmb.setText(Conectar.result.getString("AQU_COD_EMB"));
                if(jFldAquaIdEmb.getText().length() > 0){
                    BuscaCodEmbarcacao(jFldAquaIdEmb.getText());
                }
                
                jFldAquaCodPrtEmbarque.setText(Conectar.result.getString("AQU_COD_PORTO_EMB"));
                if (jFldAquaCodPrtEmbarque.getText().length() > 0) {
                    BuscaCodPorto(jFldAquaCodPrtEmbarque.getText(), "E");
                }
                                
                jFldAquaCodPrtDestino.setText(Conectar.result.getString("AQU_COD_PORTO_DES"));
                if (jFldAquaCodPrtDestino.getText().length() > 0) {
                   BuscaCodPorto(jFldAquaCodPrtDestino.getText(), "D");
                }
                
                jFldAquaCodPrtTrans.setText(Conectar.result.getString("AQU_COD_PORTO_TRANS"));                
                if (jFldAquaCodPrtTrans.getText().length() > 0) {
                   BuscaCodPorto(jFldAquaCodPrtTrans.getText(), "T");
                }
                
                jFldAquaNrViagem.setText( Conectar.result.getString("AQU_NR_VIAGEM")); 
                
                if(Conectar.result.getString("AQU_TP_NAVEGACAO") != null && Conectar.result.getString("AQU_TP_NAVEGACAO").length() > 0){
                  jCmbBxTpNavegacao.setSelectedIndex( Integer.parseInt(TipoNavegacaoEdit(Conectar.result.getString("AQU_TP_NAVEGACAO"))));
                }
                
                  
                
                //--------------------------totalizadores-----------------------------
                jFldTotQtdCte.setText(Conectar.result.getString("TOT_QTD_CTE"));
                jFldTotQtdNFe.setText(Conectar.result.getString("TOT_QTD_NFE"));
                jFldTotVlTotalMercadoria.setText(util.TrocaPontoPorVirgula(Conectar.result.getFloat("TOT_TOT_MERC_TRANSPORTADA")));

                if (Conectar.result.getString("TOT_UN_MEDIDA_PESO") != null) {
                    if (Conectar.result.getString("TOT_UN_MEDIDA_PESO").equals("01")) {
                        jCmbBxTotCodUnMedidaPeso.setSelectedIndex(0);
                    } else if (Conectar.result.getString("TOT_UN_MEDIDA_PESO").equals("02")) {
                        jCmbBxTotCodUnMedidaPeso.setSelectedIndex(1);
                    }
                }

                jFldTotQtdPesoBrutoTotal.setText(util.TrocaPontoPorVirgula(Conectar.result.getFloat("TOT_UN_MEDIDA_PESO")));

                //--------------------------informacaoes adicionais-------------------------
                jTxtAreaInfoAdicionaisFisco.setText(Conectar.result.getString("INF_FISCO"));
                jTxtAreaInfoAdicionaisContribuinte.setText(Conectar.result.getString("INF_CONTR"));
            }
            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar campos para edição...\n" + e.getLocalizedMessage());
        }
    }

    public String GerarChaveDeAcesso() {
        String chave = "";
        try {
            //Pega o codigo da UF selecionado no panel de dados do MDFe
            String codUf = BuscaCodUf(jCmbBxDdMDFeUf.getSelectedItem().toString());
            //Faz um format de data padrão
            SimpleDateFormat formataData = new SimpleDateFormat("dd/MM/yyyy HH:mm");
            //Faz um format de data com ano e mês
            SimpleDateFormat formataMesAno = new SimpleDateFormat("yy/MM");
            //Pega apenas os numeros do ano e mes (nessa ordem) da data de emissao
            String dtEmissao = util.ExtraiNumeros(formataMesAno.format(formataData.parse(jFldDdDataHoraEmissao.getText())));
            //Pega o cnpj do emitente
            String emitCNPJ = util.ExtraiNumeros(jFldEmtCNPJ.getText());
            //Pega o numero do modelo
            String modelo = jFldDdModelo.getText();
            //Pega o numero de serie
            String serie = jFldDdSerie.getText();
            //Pega o numero do MDFe
            String numero = jFldDdNumero.getText();
            //Pega o codigo da forma de emissao
            String formaEmissao = FormaEmissao();
            //Pega o codigo numerico
            String codNumerico = jFldDdCodNumerico.getText();
            //Concatena tudo na ordem
            chave = codUf + dtEmissao + emitCNPJ + modelo + serie + numero + formaEmissao + codNumerico;
            //Gera o digito verificador
            String dv = util.GerarDigitoVerificador(chave).toString();
            //Seta na jtextfield
            jFldDdDV.setText(dv);
            //Concatena a chave com o digito verifidor
            chave = chave + dv;

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao gerar chave de acesso...\n" + e.getLocalizedMessage());
        }

        return chave;
    }

    /*
    public boolean VerificaDadosChave(){
        if(jFldDdSerie.getText().length() == 0){
            return false;
        }else if(jFldDdNumero.getText().length() == 0){
            return false;
        }else if(util.ExtraiNumeros(jFldDdDataHoraEmissao.getText()).length() == 0){
            return false;
        }else if(jFldDdCodNumerico.getText().length() == 0){
            return false;
        }else if(jCmbBxDdMDFeUf.getSelectedIndex() == -1){
            return false;
        }else if(jCmbBxDdTpEmitente.getSelectedIndex() == -1){
            return false;
        }else if(jCmbBxDdModalidade.getSelectedIndex() == -1){
            return false;
        }else if(jCmbBxDdFormaEmissao.getSelectedIndex() == -1){
            return false;
        }else{
            return true;
        }
    }
     */
    /**
     * *********************************************FIM
     * DADOS*********************************************************************
     */
    /**
     * *********************************************INICIO
     * EMITENTE*********************************************************************
     *
     *
     * /**
     * *********************************************FIM
     * EMITENTE*********************************************************************
     */
    
    /**
     * *********************************************INICIO
     * RODOVIÁRIO*********************************************************************
     */
    public String TipoCarroceria(String codigo) {
        String tipo = "";
        if (codigo != null) {
            if (codigo.equals("00")) {
                tipo = "Não Aplicável";
            } else if (codigo.equals("01")) {
                tipo = "Aberta";
            } else if (codigo.equals("02")) {
                tipo = "Fechada/Baú";
            } else if (codigo.equals("03")) {
                tipo = "Granela";
            } else if (codigo.equals("04")) {
                tipo = "Porta Container";
            } else if (codigo.equals("05")){
                tipo = "Sider";
            }
        }

        return tipo;
    }

    public String BuscaCodTipoCarroceria(String tipo) {
        String codigo = "";

        if (tipo != null) {
            if (tipo.equals("Não Aplicável")) {
                codigo = "00";
            } else if (tipo.equals("Aberta")) {
                codigo = "01";
            } else if (tipo.equals("Fechada/Baú")) {
                codigo = "02";
            } else if (tipo.equals("Granela")) {
                codigo = "03";
            } else if (tipo.equals("Porta Container")) {
                codigo = "04";
            } else if (tipo.equals("Sider")) {
                codigo = "05";
            }
        }

        return codigo;
    }

    public String TipoRodado(String codigo) {
        String tipo = "";

        if (codigo != null) {
            if (codigo.equals("01")) {
                tipo = "Truck";
            } else if (codigo.equals("02")) {
                tipo = "Toco";
            } else if (codigo.equals("03")) {
                tipo = "Cavalo Mecânico";
            } else if (codigo.equals("04")) {
                tipo = "VAN";
            } else if (codigo.equals("05")) {
                tipo = "Utilitários";
            } else if (codigo.equals("06")) {
                tipo = "Outros";
            }
        }

        return tipo;
    }

    public String BuscaCodTipoRodado(String tipo) {
        String codigo = "";
        if (tipo != null) {
            if (tipo.equals("Truck")) {
                codigo = "01";
            } else if (tipo.equals("Toco")) {
                codigo = "02";
            } else if (tipo.equals("Cavalo Mecânico")) {
                codigo = "03";
            } else if (tipo.equals("VAN")) {
                codigo = "04";
            } else if (tipo.equals("Utilitários")) {
                codigo = "05";
            } else if (tipo.equals("Outros")) {
                codigo = "06";
            }
        }

        return codigo;
    }

    public String TipoProprietario(String codigo) {
        String tipo = "";
        if (codigo != null) {
            if (codigo.equals("0")) {
                tipo = "TAC Agregrado";
            } else if (codigo.equals("1")) {
                tipo = "TAC Independente";
            } else {
                tipo = "Outros";
            }
        }

        return tipo;

    }

    public String BuscaCodTipoProprietario(String tipo) {
        String codigo = "";

        if (tipo != null) {
            if (tipo.equals("TAC Agregrado")) {
                codigo = "0";
            } else if (tipo.equals("TAC Independente")) {
                codigo = "1";
            } else if (tipo.equals("Outros")) {
                codigo = "2";
            }
        }

        return codigo;
    }
    
    public void CarregaTudoCiot(String dadCodigo){
        try{
            Conectar.ConectarBD();
            LimpaTabela(jTableRdvCIOT);
            Conectar.result = Conectar.stam.executeQuery("select * from MDFE_CIOT where DAD_CODIGO = '"+ dadCodigo +"' ");
            DefaultTableModel dtm = (DefaultTableModel) jTableRdvCIOT.getModel();
            while(Conectar.result.next()){
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("CIOT"),
                    Conectar.result.getString("DOCUMENTO")
                });
            }
            
            Conectar.DesconectarBD();
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }
    
    public void InserirCiot(String DadCodigo, String Ciot, String Documento, String Tipo){
        try{
            Conectar.ConectarBD();
            
            System.out.println("INSERT INTO MDFE_CIOT "
                    + "(DAD_CODIGO, CIOT, DOCUMENTO, TIPO)"
                    + "values('"+ DadCodigo +"', '"+ Ciot +"', '"+ Documento +"', '"+ Tipo +"')"
            );
            
            Conectar.stam.executeUpdate("INSERT INTO MDFE_CIOT "
                    + "(DAD_CODIGO, CIOT, DOCUMENTO, TIPO)"
                    + "values('"+ DadCodigo +"', '"+ Ciot +"', '"+ Documento +"', '"+ Tipo +"')"
            );
            
            jFldRdvCiot.setText("");
            jFldRdvResponsavelCiot.setText("");
            
            CarregaTudoCiot(DadCodigo);
            
            Conectar.DesconectarBD();
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }
    
    public void DeletarCiot(String DadCodigo){
        try{
            Conectar.ConectarBD();
            
            for (int linha = 0; linha < jTableRdvCIOT.getRowCount(); linha++) {
                if(((boolean) jTableRdvCIOT.getValueAt(linha, 0)) == true){
                    Conectar.ConectarBD();
                    
                    System.out.println("DELETE FROM MDFE_CIOT "
                            + "WHERE DAD_CODIGO = '"+ DadCodigo +"' AND CIOT = '"+ jTableRdvCIOT.getValueAt(linha, 1) +"' "
                    );
                    
                    Conectar.stam.executeUpdate("DELETE FROM MDFE_CIOT "
                            + "WHERE DAD_CODIGO = '"+ DadCodigo +"' AND CIOT = '"+ jTableRdvCIOT.getValueAt(linha, 1) +"' "
                    );
                    
                    Conectar.DesconectarBD();
                }
            }
            
            CarregaTudoCiot(DadCodigo);
            
            Conectar.DesconectarBD();
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao deletar...\n" + e.getLocalizedMessage());
        }
    }
    
    public String BuscaCodMaxCiot(String DadCodigo){
        String codmax = "";
        try{
            Conectar.ConectarBD();
            
            Conectar.result = Conectar.stam.executeQuery("SELECT MAX(COD_CIOT) + 1 FROM MDFE_CIOT WHERE DAD_CODIGO = '"+ DadCodigo +"' ");
            while(Conectar.result.next()){
                if(Conectar.result.getString(1) == null){
                    codmax = "1";
                }else{
                    codmax = Conectar.result.getString(1);
                }
            }
            
            Conectar.DesconectarBD();
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao gerar código...\n" + e.getLocalizedMessage());
        }
        
        return codmax;
    }
    
    public boolean VerificaCiot(){
        
        for (int linha = 0; linha < jTableRdvCIOT.getRowCount(); linha++) {
            if(jFldRdvCiot.getText().equals(jTableRdvCIOT.getValueAt(linha, 1).toString())){
                JOptionPane.showMessageDialog(null, "CIOT já inserido!");
                jFldRdvCiot.requestFocus();
                return false;
            }
        }
        
        if(jFldRdvCiot.getText().length() == 0){
            JOptionPane.showMessageDialog(null, "Insira o CIOT!");
            jFldRdvCiot.requestFocus();
            return false;    
        }else if(jFldRdvResponsavelCiot.getText().length() == 0){
            JOptionPane.showMessageDialog(null, "Insira o responsável pela geração do CIOT!");
            jFldRdvResponsavelCiot.requestFocus();
            return false;
        }else{
            return true;
        }
    }
    
    
    public void CarregaTudoContratante(String DadCodigo){
        try{
            Conectar.ConectarBD();
            
            LimpaTabela(jTableRdvContratante);
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_CONTRATANTE WHERE DAD_CODIGO = '"+ DadCodigo +"' ");
            DefaultTableModel dtm = (DefaultTableModel) jTableRdvContratante.getModel();
            while(Conectar.result.next()){
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("COD_CONTRATANTE"),
                    Conectar.result.getString("CONT_NOME"),
                    Conectar.result.getString("CONT_CPF"),
                    Conectar.result.getString("CONT_CNPJ")
                });
            }
                    
            Conectar.DesconectarBD();
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }
    
    
    public void InserirContratante(String DadCodigo, String CodContratante, String NomeContratante, String CpfContratante, String CnpjContratante){
        try{
            Conectar.ConectarBD();
            
            System.out.println("INSERT INTO MDFE_CONTRATANTE "
                    + "(DAD_CODIGO, COD_CONTRATANTE, CONT_NOME, CONT_CPF, CONT_CNPJ)"
                    + "values('"+ DadCodigo +"', '"+ CodContratante +"', '"+ NomeContratante +"', '"+ CpfContratante +"', '"+ CnpjContratante +"')"
            );
            
            Conectar.stam.executeUpdate("INSERT INTO MDFE_CONTRATANTE "
                    + "(DAD_CODIGO, COD_CONTRATANTE, CONT_NOME, CONT_CPF, CONT_CNPJ)"
                    + "values('"+ DadCodigo +"', '"+ CodContratante +"', '"+ NomeContratante +"', '"+ CpfContratante +"', '"+ CnpjContratante +"')"
            );
            
            jFldRdvCodContratante.setText("");
            jFldRdvNomeContratante.setText("");
            jFldRdvCpfContratante.setText("");
            jFldRdvCnpjContratante.setText("");
                    
            Conectar.DesconectarBD();
            
            CarregaTudoContratante(DadCodigo);
            
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }
    
    public void DeletarContratante(String DadCodigo){
        try{
            Conectar.ConectarBD();
            
            for (int linha = 0; linha < jTableRdvContratante.getRowCount(); linha++) {
                
                if(((boolean) jTableRdvContratante.getValueAt(linha, 0)) == true){
                    
                    System.out.println("DELETE FROM MDFE_CONTRATANTE WHERE DAD_CODIGO = '"+ DadCodigo +"' "
                            + "AND COD_CONTRATANTE = '"+ jTableRdvContratante.getValueAt(linha, 1) +"' "
                    );
                    
                    Conectar.stam.executeUpdate("DELETE FROM MDFE_CONTRATANTE WHERE DAD_CODIGO = '"+ DadCodigo +"' "
                            + "AND COD_CONTRATANTE = '"+ jTableRdvContratante.getValueAt(linha, 1) +"' "
                    );
                    
                }
                
            }
            
            Conectar.DesconectarBD();
            
            CarregaTudoContratante(DadCodigo);
            
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }
    
    public void BuscaContratante(String CodContratante){
        try{
            Conectar.ConectarBD();
            
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_CONTRATANTE WHERE COD_CONTRATANTE = '"+ CodContratante +"' AND RGEVENTO <> '3' ");
            if(Conectar.result.first()){
                jFldRdvNomeContratante.setText(Conectar.result.getString("CONT_NOME"));
                jFldRdvCpfContratante.setText(util.FormataCpf(Conectar.result.getString("CONT_CPF")));
                jFldRdvCnpjContratante.setText(util.FormataCnpj(Conectar.result.getString("CONT_CNPJ")));
            }else{
                JOptionPane.showMessageDialog(null, "Contratante não cadastrado no sistema");
                jFldRdvCodContratante.setText("");
                jFldRdvNomeContratante.setText("");
                jFldRdvCpfContratante.setText("");
                jFldRdvCnpjContratante.setText("");
                jFldRdvCodContratante.requestFocus();
            }
            
            Conectar.DesconectarBD();
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados...\n" + e.getLocalizedMessage());
        }
    }
    
    public boolean VerificaContratante(){
        for (int linha = 0; linha < jTableRdvContratante.getRowCount(); linha++) {
            if(jFldRdvCodContratante.getText().equals(jTableRdvContratante.getValueAt(linha, 1).toString())){
                JOptionPane.showMessageDialog(null, "Contratante já inserido!");
                jFldRdvCodContratante.requestFocus();
                return false;
            }
        }
    
        if(jFldRdvCodContratante.getText().length() == 0){
            JOptionPane.showMessageDialog(null, "Insira o código do Contratante!");
            jFldRdvCodContratante.requestFocus();
            return false;
        }else{
            return true;
        }
    }
    
    /*CONTRATANTE - **/
    
    public void CarregaTudoCondutor(String dadCodigo) {
        try {
            Conectar.ConectarBD();
            LimpaTabela(jTableRdvCondutores);
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_CONDUTORES WHERE DAD_CODIGO = '" + dadCodigo + "' ");
            DefaultTableModel dtm = (DefaultTableModel) jTableRdvCondutores.getModel();

            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("CODIGO"),
                    Conectar.result.getString("CPF"),
                    Conectar.result.getString("NOME")
                });
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }

    public void InserirCondutor(String codigo, String dadCodigo, String nome, String cpf) {
        try {
            Conectar.ConectarBD();

            System.out.println("INSERT INTO MDFE_CONDUTORES "
                    + "(CODIGO, DAD_CODIGO, NOME, CPF)"
                    + "values('" + codigo + "', '" + dadCodigo + "', '" + nome + "', '" + cpf + "')"
            );

            Conectar.stam.executeUpdate("INSERT INTO MDFE_CONDUTORES "
                    + "(CODIGO, DAD_CODIGO, NOME, CPF)"
                    + "values('" + codigo + "', '" + dadCodigo + "', '" + nome + "', '" + cpf + "')"
            );

            jFldRdvCodCondutor.setText("");
            jLblRdvCondutor.setText("");
            jLblRdvCpfCondutor.setText("");

            CarregaTudoCondutor(dadCodigo);

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }

    public void DeletarCondutor(String dadCodigo) {
        try {
            //Se Tabela tiver mais de 0 carregamento
            if (jTableRdvCondutores.getRowCount() > 0) {
                //Dá um loop com a quantidade de linhas da Tabela
                for (int linha = 0; linha < jTableRdvCondutores.getRowCount(); linha++) {
                    //Percorre todas as linhas verificando quais tem o CheckBox marcado (True)
                    if (((boolean) jTableRdvCondutores.getValueAt(linha, 0)) == true) {
                        //A que estiver marcado, será deletada usando o codigo, Municipio e Dados
                        Conectar.ConectarBD();

                        System.out.println("DELETE FROM MDFE_CONDUTORES WHERE CODIGO = '" + jTableRdvCondutores.getValueAt(linha, 1).toString() + "' "
                                + "AND DAD_CODIGO = '" + dadCodigo + "' "
                        );

                        Conectar.stam.executeUpdate("DELETE FROM MDFE_CONDUTORES WHERE CODIGO = '" + jTableRdvCondutores.getValueAt(linha, 1).toString() + "' "
                                + "AND DAD_CODIGO = '" + dadCodigo + "' "
                        );

                        Conectar.DesconectarBD();
                    }
                }

                CarregaTudoCondutor(dadCodigo);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao deletar...\n" + e.getLocalizedMessage());
        }
    }

    public void CarregaTudoReboque(String dadCodigo) {
        try {
            Conectar.ConectarBD();
            LimpaTabela(jTableRdvInfoReboque);
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_REBOQUE WHERE DAD_CODIGO = '" + dadCodigo + "' ");
            DefaultTableModel dtm = (DefaultTableModel) jTableRdvInfoReboque.getModel();
            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("CODVEIC"),
                    Conectar.result.getString("PLACA"),
                    Conectar.result.getString("RENAVAM"),
                    TipoCarroceria(Conectar.result.getString("TP_CARROCERIA")),
                    Conectar.result.getString("ESTADO"),
                    Conectar.result.getString("TARA"),
                    Conectar.result.getFloat("CAPACIDADE_KG"),
                    Conectar.result.getFloat("CAPACIDADE_M3"),
                    Conectar.result.getString("PROP_RNTC"),
                    Conectar.result.getString("COD_PROPIETARIO"),
                    Conectar.result.getString("PROP_NOME"),
                    Conectar.result.getString("PROP_CPF"),
                    Conectar.result.getString("PROP_IE"),
                    Conectar.result.getString("PROP_UF"),
                    TipoProprietario(Conectar.result.getString("PROP_TIPO"))
                });
            }

            jFldRdvCodReboque.setText("");
            jLblRdvPlacaReboque.setText("");
            jLblRdvTpCarroceriaReboque.setText("");
            jLblRdvRenavamReboque.setText("");
            jLblRdvRntrcReboque.setText("");
            jLblRdvUfReboque.setText("");

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }

    public void CarregaTudoValePedagio(String dadCodigo) {
        try {
            Conectar.ConectarBD();

            LimpaTabela(jTableRdvInfoValePedagio);
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_PEDAGIO WHERE DAD_CODIGO = '" + dadCodigo + "' ");
            DefaultTableModel dtm = (DefaultTableModel) jTableRdvInfoValePedagio.getModel();
            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("CODIGO"),
                    Conectar.result.getString("RAZ_SOC_EMP_FOR_PED"),
                    util.FormataCnpj(Conectar.result.getString("CNPJ_EMP_FOR_PED")),
                    Conectar.result.getString("RAZ_SOC_RESP_PAG_PED"),
                    util.FormataCpf(Conectar.result.getString("CPF_RESP_PAG_PED")),
                    util.FormataCnpj(Conectar.result.getString("CNPJ_RESP_PAG_PED")),
                    Conectar.result.getString("NR_COMPROVANTE"),
                    util.TrocaPontoPorVirgula(Conectar.result.getFloat("VALOR_VALE"))
                });
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }

    /*
    Recebe 3 parametros:
    O codigo gerado para para Tabela MDF-e_Reboque
    O numero do MDF-e
    E o codigo do reboque vindo da tabela MDF-e_Cad_Reboque
     */
    public void InserirReboque(String codigo, String dadCodigo, Integer codProprietario, String nomeProprietario) {
        try {
            Conectar.ConectarBD();

            Conectar.stam = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, ResultSet.HOLD_CURSORS_OVER_COMMIT);

            //Faz a busca do Reboque atravez do codigo pega no field do codigo do reboque
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_REBOQUE WHERE CODREBOQUE = '" + codigo + "' ");
            //Se o result for valido, insere os dados da pesquisa na tabela MDFE_REBOQUE
            if (Conectar.result.first()) {

                System.out.println("INSERT INTO MDFE_REBOQUE "
                        + "(DAD_CODiGO, CODVEIC, PLACA, ESTADO, TARA, CAPACIDADE_KG, CAPACIDADE_M3, RENAVAM, TP_RODADO, TP_CARROCERIA, COD_PROPIETARIO, "
                        + " PROP_NOME)"
                        + "values('" + dadCodigo + "', '" + codigo + "', '" + Conectar.result.getString("PLACA") + "', '" + Conectar.result.getString("ESTADO") + "', "
                        + " " + Integer.parseInt( Conectar.result.getString("TARA")) + ", " + Integer.parseInt(Conectar.result.getString("CAPACIDADE_KG")) + ", " + Integer.parseInt(Conectar.result.getString("CAPACIDADE_M3")) + ", "
                        + " '" + Conectar.result.getString("RENAVAM") + "', '" + Conectar.result.getString("TP_RODADO") + "', '" + Conectar.result.getString("TP_CARROCERIA") + "', "
                        + " " + codProprietario + ", '" + nomeProprietario + "') "          );

                Conectar.stam.executeUpdate("INSERT INTO MDFE_REBOQUE "
                        + "(DAD_CODiGO, CODVEIC, PLACA, ESTADO, TARA, CAPACIDADE_KG, CAPACIDADE_M3, RENAVAM, TP_RODADO, TP_CARROCERIA, COD_PROPIETARIO, "
                        + " PROP_NOME)"
                        + "values('" + dadCodigo + "', '" + codigo + "', '" + Conectar.result.getString("PLACA") + "', '" + Conectar.result.getString("ESTADO") + "', "
                        + " " + Integer.parseInt( Conectar.result.getString("TARA")) + ", " + Integer.parseInt(Conectar.result.getString("CAPACIDADE_KG")) + ", " + Integer.parseInt(Conectar.result.getString("CAPACIDADE_M3")) + ", "
                        + " '" + Conectar.result.getString("RENAVAM") + "', '" + Conectar.result.getString("TP_RODADO") + "', '" + Conectar.result.getString("TP_CARROCERIA") + "', "
                        + " " + codProprietario + ", '" + nomeProprietario + "') "  );

            }

            if (jChckBxRdvInformarEmitenteReboque.isSelected() == true) {
                System.out.println("Aqui");
                Conectar.stam = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, ResultSet.HOLD_CURSORS_OVER_COMMIT);
                //Pega os dados da proprietario pelo codigo cadastrado no reboque
                Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_PROPRIETARIO WHERE COD_PROPRIETARIO IN (SELECT COD_PROPIETARIO FROM MDFE_REBOQUE WHERE CODVEIC = '" + codigo + "') ");
                //Se o result for valido, altera os dados do proprietario 
                if (Conectar.result.first()) {

                    System.out.println("UPDATE MDFE_REBOQUE SET "
                            + "COD_PROPIETARIO = '" + Conectar.result.getString("COD_PROPRIETARIO") + "',"
                            + "PROP_NOME       = '" + Conectar.result.getString("PROP_NOME") + "', "
                            + "PROP_RNTC       = '" + Conectar.result.getString("PROP_RNTRC") + "', "
                            + "PROP_TIPO       = '" + Conectar.result.getString("PROP_CODTP") + "', "
                            + "PROP_UF         = '" + Conectar.result.getString("PROP_UF") + "', "
                            + "PROP_CPF        = '" + Conectar.result.getString("PROP_CPF") + "', "
                            + "PROP_CNPJ       = '" + Conectar.result.getString("PROP_CNPJ") + "', "
                            + "PROP_IE         = '" + Conectar.result.getString("PROP_IE") + "' "
                            + "WHERE CODVEIC = '" + codigo + "' AND DAD_CODIGO = '" + dadCodigo + "' "
                    );

                    Conectar.stam.executeUpdate("UPDATE MDFE_REBOQUE SET "
                            + "COD_PROPIETARIO = '" + Conectar.result.getString("COD_PROPRIETARIO") + "',"
                            + "PROP_NOME       = '" + Conectar.result.getString("PROP_NOME") + "', "
                            + "PROP_RNTC       = '" + Conectar.result.getString("PROP_RNTRC") + "', "
                            + "PROP_TIPO       = '" + Conectar.result.getString("PROP_CODTP") + "', "
                            + "PROP_UF         = '" + Conectar.result.getString("PROP_UF") + "', "
                            + "PROP_CPF        = '" + Conectar.result.getString("PROP_CPF") + "', "
                            + "PROP_CNPJ       = '" + Conectar.result.getString("PROP_CNPJ") + "', "
                            + "PROP_IE         = '" + Conectar.result.getString("PROP_IE") + "' "
                            + "WHERE CODVEIC = '" + codigo + "' AND DAD_CODIGO = '" + dadCodigo + "' "
                    );
                }
            }

            jFldRdvCodReboque.setText("");
            jLblRdvPlacaReboque.setText("");
            jLblRdvTpCarroceriaReboque.setText("");
            jLblRdvRenavamReboque.setText("");
            jLblRdvRntrcReboque.setText("");
            jLblRdvUfReboque.setText("");
            jFldRdvCodPropReboque.setText("");
            jLblRdvPropietarioReboque.setText("");
            jLblRdvTpProprietarioReboque.setText("");
            jLblRdvCpfProprietarioReboque.setText("");
            jLblRdvCnpjProprietarioReboque.setText("");
            jLblRdvRntrcProprietarioReboque.setText("");
            jLblRdvInscEstProprietarioReboque.setText("");

            CarregaTudoReboque(dadCodigo);

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }

    public void InserirValePedagio(String codigo, String dadCodigo, String razaoSocialFornecedor, String cnpjFornecedor,
            String razaoSocialResponsavel, String cpfResponsavel, String cnpjResponsavel, String nrComprovante, Double valorPedagio) {
        try {
            Conectar.ConectarBD();

            System.out.println("INSERT INTO MDFE_PEDAGIO "
                    + "(CODIGO, DAD_CODIGO, RAZ_SOC_EMP_FOR_PED, CNPJ_EMP_FOR_PED, RAZ_SOC_RESP_PAG_PED, CPF_RESP_PAG_PED, "
                    + "CNPJ_RESP_PAG_PED, NR_COMPROVANTE, VALOR_VALE)"
                    + "values('" + codigo + "', '" + dadCodigo + "', '" + razaoSocialFornecedor + "', '" + cnpjFornecedor + "', "
                    + " '" + razaoSocialResponsavel + "', '"+ cpfResponsavel +"', '" + cnpjResponsavel + "', '" + nrComprovante + "', "+ valorPedagio +" )"
            );

            Conectar.stam.executeUpdate("INSERT INTO MDFE_PEDAGIO "
                    + "(CODIGO, DAD_CODIGO, RAZ_SOC_EMP_FOR_PED, CNPJ_EMP_FOR_PED, RAZ_SOC_RESP_PAG_PED, CPF_RESP_PAG_PED, "
                    + "CNPJ_RESP_PAG_PED, NR_COMPROVANTE, VALOR_VALE)"
                    + "values('" + codigo + "', '" + dadCodigo + "', '" + razaoSocialFornecedor + "', '" + cnpjFornecedor + "', "
                    + " '" + razaoSocialResponsavel + "', '"+ cpfResponsavel +"', '" + cnpjResponsavel + "', '" + nrComprovante + "', "+ valorPedagio +" )"
            );

            jFldRdvCodRespPag.setText("");
            jLblRdvResponsavelPagamento.setText("");
            jLblRdvResponsavelCnpj.setText("");
            jFldRdvCodFornecedorVale.setText("");
            jLblRdvFornecedorVale.setText("");
            jLblRdvCnpjFornecedor.setText("");
            jFldRdvNrComprovante.setText("");
            jFldRdvValorPedagio.setText("0,00");

            CarregaTudoValePedagio(dadCodigo);

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }

    public void DeletarReboque(String dadCodigo) {
        try {
            //Se Tabela tiver mais de 0 carregamento
            if (jTableRdvInfoReboque.getRowCount() > 0) {
                //Dá um loop com a quantidade de linhas da Tabela
                for (int linha = 0; linha < jTableRdvInfoReboque.getRowCount(); linha++) {
                    //Percorre todas as linhas verificando quais tem o CheckBox marcado (True)
                    if (((boolean) jTableRdvInfoReboque.getValueAt(linha, 0)) == true) {
                        //A que estiver marcado, será deletada usando o codigo, Municipio e Dados
                        Conectar.ConectarBD();

                        System.out.println("DELETE FROM MDFE_REBOQUE WHERE CODVEIC = '" + jTableRdvInfoReboque.getValueAt(linha, 1).toString() + "' "
                                + "AND DAD_CODIGO = '" + dadCodigo + "' "
                        );

                        Conectar.stam.executeUpdate("DELETE FROM MDFE_REBOQUE WHERE CODVEIC = '" + jTableRdvInfoReboque.getValueAt(linha, 1).toString() + "' "
                                + "AND DAD_CODIGO = '" + dadCodigo + "' "
                        );

                        Conectar.DesconectarBD();
                    }
                }
            }

            CarregaTudoReboque(dadCodigo);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao deletar...\n" + e.getLocalizedMessage());
        }
    }

    public void DeletarValePedagio(String dadCodigo) {
        try {
            //Se Tabela tiver mais de 0 carregamento
            if (jTableRdvInfoValePedagio.getRowCount() > 0) {
                //Dá um loop com a quantidade de linhas da Tabela
                for (int linha = 0; linha < jTableRdvInfoValePedagio.getRowCount(); linha++) {
                    //Percorre todas as linhas verificando quais tem o CheckBox marcado (True)
                    if (((boolean) jTableRdvInfoValePedagio.getValueAt(linha, 0)) == true) {
                        //A que estiver marcado, será deletada usando o codigo, Municipio e Dados
                        Conectar.ConectarBD();

                        System.out.println("DELETE FROM MDFE_PEDAGIO WHERE CODIGO = '" + jTableRdvInfoValePedagio.getValueAt(linha, 1).toString() + "' "
                                + "AND DAD_CODIGO = '" + dadCodigo + "' "
                        );

                        Conectar.stam.executeUpdate("DELETE FROM MDFE_PEDAGIO WHERE CODIGO = '" + jTableRdvInfoValePedagio.getValueAt(linha, 1).toString() + "' "
                                + "AND DAD_CODIGO = '" + dadCodigo + "' "
                        );

                        Conectar.DesconectarBD();
                    }
                }
            }

            CarregaTudoValePedagio(dadCodigo);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao deletar...\n" + e.getLocalizedMessage());
        }
    }

    public Integer BuscaCodMaxCondutor() {
        Integer codmax = 0;
        try {
            Conectar.ConectarBD();

            Conectar.result = Conectar.stam.executeQuery("SELECT MAX(CODIGO) FROM MDFE_CONDUTORES");
            while (Conectar.result.next()) {
                if (Conectar.result.getString(1) == null) {
                    codmax = 1;
                } else {
                    codmax = Conectar.result.getInt(1) + 1;
                }
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao gerar código...\n" + e.getLocalizedMessage());
        }

        return codmax;
    }

    public Integer BuscaCodMaxReboque() {
        Integer codmax = 0;
        try {
            Conectar.ConectarBD();

            Conectar.result = Conectar.stam.executeQuery("SELECT MAX(CODVEIC) FROM MDFE_REBOQUE");
            while (Conectar.result.next()) {
                if (Conectar.result.getString(1) == null) {
                    codmax = 1;
                } else {
                    codmax = Conectar.result.getInt(1) + 1;
                }
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao gerar código...\n" + e.getLocalizedMessage());
        }

        return codmax;
    }

    public Integer BuscaCodMaxValePedagio(String dadCodigo) {
        Integer codmax = 0;
        try {
            Conectar.ConectarBD();

            Conectar.result = Conectar.stam.executeQuery("SELECT MAX(CODIGO) FROM MDFE_PEDAGIO WHERE DAD_CODIGO = '"+ dadCodigo +"' ");
            while (Conectar.result.next()) {
                if (Conectar.result.getString(1) == null) {
                    codmax = 1;
                } else {
                    codmax = Conectar.result.getInt(1) + 1;
                }
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao gerar código...\n" + e.getLocalizedMessage());
        }

        return codmax;
    }

    public void BuscaVeiculoTracao(String codveic) {
        try {
            Conectar.ConectarBD();
            System.out.println("SELECT * FROM TABVEIC WHERE CODVEIC = '" + codveic + "' AND RGEVENTO <> '3'");
            Conectar.result4 = Conectar.stam.executeQuery("SELECT * FROM TABVEIC WHERE CODVEIC = '" + codveic + "' AND RGEVENTO <> '3'");

            if (Conectar.result4.first() == true) {
                jLblRdvTpCarroceria.setText(TipoCarroceria(Conectar.result4.getString("TP_CARROCERIA")));
                jLblRdvPlaca.setText(Conectar.result4.getString("PLACA"));
                jLblRdvTaraKG.setText(Conectar.result4.getString("TARA") + " KG");
                jLblRdvRenavam.setText(Conectar.result4.getString("RENAVAM"));
                jLblRdvUFVeic.setText(Conectar.result4.getString("ESTADO"));
                jLblRdvTpRodado.setText(TipoRodado(Conectar.result4.getString("TP_RODADO")));
                jLblRdvCapacidadeKG.setText(Conectar.result4.getString("CAPACIDADE_KG") + " KG");
                jLblRdvCapacidadeM3.setText(Conectar.result4.getString("CAPACIDADE_M3") + " M3");
                jFldRdvCodProp.setText(Conectar.result4.getString("CODPROP"));
                jChckBxDdInformarEmitente.setEnabled(false);
                if (Conectar.result4.getString("PROPTERC").equals("P")) {
                    jChckBxDdInformarEmitente.setSelected(false);
                    //jFldRdvRntrc.setText(jFldEmtRNTRC.getText());

                } else {
                    jChckBxDdInformarEmitente.setSelected(true);
                    //jFldRdvRntrc.setText("");
                }

            } else {
                JOptionPane.showMessageDialog(null, "Veículo não cadastrado no sistema!");
                jLblRdvTpCarroceria.setText("");
                jLblRdvPlaca.setText("");
                jLblRdvTaraKG.setText("0 KG");
                jLblRdvRenavam.setText("");
                jLblRdvUFVeic.setText("");
                jLblRdvTpRodado.setText("");
                jLblRdvCapacidadeKG.setText("0 KG");
                jLblRdvCapacidadeM3.setText("0 M3");
                jFldRdvCodProp.setText("");
                jLblRdvPropietario.setText("");
                jLblRdvTpProprietario.setText("");
                jLblRdvCpfProprietario.setText("");
                jLblRdvCnpjProprietario.setText("");
                jLblRdvRntrcProprietario.setText("");
                jLblRdvUfProprietario.setText("");
                jLblRdvInscEstProprietario.setText("");
                jFldRdvRntrc.setText("");
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados...\n" + e.getLocalizedMessage());
        }
    }

    public String BuscaVeiculoEdit(String codveic) {
        String codprop = "";
        try {
            Conectar.ConectarBD();
            System.out.println("SELECT * FROM TABVEIC WHERE CODVEIC = '" + codveic + "' AND RGEVENTO <> '3'");
            Conectar.result2 = Conectar.stam.executeQuery("SELECT * FROM TABVEIC WHERE CODVEIC = '" + codveic + "' AND RGEVENTO <> '3'");

            if (Conectar.result2.first() == true) {

                codprop = Conectar.result2.getString("CODPROP");

            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados...\n" + e.getLocalizedMessage());
        }
        return codprop;
    }

    public void BuscaProprietario(String codigo) {
        try {

            if (codigo != null && codigo.length() > 0) {
                Conectar.ConectarBD();

                Conectar.result3 = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_PROPRIETARIO WHERE COD_PROPRIETARIO = '" + codigo + "' AND RGEVENTO <> '3' ");

                if (Conectar.result3.first() == true) {
                    if (TabVeiculoTracao.isShowing() == true) {
                        jFldRdvCodProp.setText(Conectar.result3.getString("COD_PROPRIETARIO"));
                        jLblRdvPropietario.setText(Conectar.result3.getString("PROP_NOME"));
                        jLblRdvTpProprietario.setText(TipoProprietario((Conectar.result3.getString("PROP_CODTP"))));
                        jLblRdvCpfProprietario.setText(util.FormataCpf(Conectar.result3.getString("PROP_CPF")));
                        jLblRdvCnpjProprietario.setText(util.FormataCnpj(Conectar.result3.getString("PROP_CNPJ")));
                        jLblRdvRntrcProprietario.setText(Conectar.result3.getString("PROP_RNTRC"));
                        jLblRdvUfProprietario.setText(Conectar.result3.getString("PROP_UF"));
                        jLblRdvInscEstProprietario.setText(Conectar.result3.getString("PROP_IE"));
                    }/* else if (TabReboque.isShowing() == true) {
                        jFldRdvCodPropReboque.setText(Conectar.result3.getString("COD_PROPRIETARIO"));
                        jLblRdvPropietarioReboque.setText(Conectar.result3.getString("PROP_NOME"));
                        jLblRdvTpProprietarioReboque.setText(TipoProprietario((Conectar.result3.getString("PROP_CODTP"))));
                        jLblRdvCpfProprietarioReboque.setText(util.FormataCpf(Conectar.result3.getString("PROP_CPF")));
                        jLblRdvCnpjProprietarioReboque.setText(util.FormataCnpj(Conectar.result3.getString("PROP_CNPJ")));
                        jLblRdvRntrcProprietarioReboque.setText(Conectar.result3.getString("PROP_RNTRC"));
                        jLblRdvInscEstProprietarioReboque.setText(Conectar.result3.getString("PROP_IE"));
                    }*/

                } else {
                    JOptionPane.showMessageDialog(null, "Proprietário não cadastrado no sistema.");
                    if (TabVeiculoTracao.isShowing() == true) {
                        jFldRdvCodProp.setText("");
                        jLblRdvPropietario.setText("");
                        jLblRdvTpProprietario.setText("");
                        jLblRdvCpfProprietario.setText("");
                        jLblRdvCnpjProprietario.setText("");
                        jLblRdvRntrcProprietario.setText("");
                        jLblRdvUfProprietario.setText("");
                        jLblRdvInscEstProprietario.setText("");
                        jFldRdvCodProp.requestFocus();
                    } else if (TabReboque.isShowing() == true) {
                        jFldRdvCodPropReboque.setText("");
                        jLblRdvPropietarioReboque.setText("");
                        jLblRdvTpProprietarioReboque.setText("");
                        jLblRdvCpfProprietarioReboque.setText("");
                        jLblRdvCnpjProprietarioReboque.setText("");
                        jLblRdvRntrcProprietarioReboque.setText("");
                        jLblRdvInscEstProprietarioReboque.setText("");
                    }

                }

                Conectar.DesconectarBD();
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados...\n" + e.getLocalizedMessage());
        }
    }
    
    
    
     public void BuscaProprietarioTipo(String codigo, String Tp) {
        try {

            if (codigo != null && codigo.length() > 0) {
                Conectar.ConectarBD();

                Conectar.result3 = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_PROPRIETARIO WHERE COD_PROPRIETARIO = '" + codigo + "' AND RGEVENTO <> '3' ");

                if (Conectar.result3.first() == true) {
                    if (Tp.equals("V")) {
                        jFldRdvCodProp.setText(Conectar.result3.getString("COD_PROPRIETARIO"));
                        jLblRdvPropietario.setText(Conectar.result3.getString("PROP_NOME"));
                        jLblRdvTpProprietario.setText(TipoProprietario((Conectar.result3.getString("PROP_CODTP"))));
                        jLblRdvCpfProprietario.setText(util.FormataCpf(Conectar.result3.getString("PROP_CPF")));
                        jLblRdvCnpjProprietario.setText(util.FormataCnpj(Conectar.result3.getString("PROP_CNPJ")));
                        jLblRdvRntrcProprietario.setText(Conectar.result3.getString("PROP_RNTRC"));
                        jLblRdvUfProprietario.setText(Conectar.result3.getString("PROP_UF"));
                        jLblRdvInscEstProprietario.setText(Conectar.result3.getString("PROP_IE"));
                        jChckBxDdInformarEmitente.setSelected(true);
                        jChckBxDdInformarEmitente.setEnabled(false);
                    } else if (Tp.equals("R")) {
                        jFldRdvCodPropReboque.setText(Conectar.result3.getString("COD_PROPRIETARIO"));
                        jLblRdvPropietarioReboque.setText(Conectar.result3.getString("PROP_NOME"));
                        jLblRdvTpProprietarioReboque.setText(TipoProprietario((Conectar.result3.getString("PROP_CODTP"))));
                        jLblRdvCpfProprietarioReboque.setText(util.FormataCpf(Conectar.result3.getString("PROP_CPF")));
                        jLblRdvCnpjProprietarioReboque.setText(util.FormataCnpj(Conectar.result3.getString("PROP_CNPJ")));
                        jLblRdvRntrcProprietarioReboque.setText(Conectar.result3.getString("PROP_RNTRC"));
                        jLblRdvInscEstProprietarioReboque.setText(Conectar.result3.getString("PROP_IE"));
                        jChckBxRdvInformarEmitenteReboque.setSelected(true);
                        jChckBxRdvInformarEmitenteReboque.setEnabled(false);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Proprietário não cadastrado no sistema.");
                    if (Tp.equals("V")) {
                        jFldRdvCodProp.setText("");
                        jLblRdvPropietario.setText("");
                        jLblRdvTpProprietario.setText("");
                        jLblRdvCpfProprietario.setText("");
                        jLblRdvCnpjProprietario.setText("");
                        jLblRdvRntrcProprietario.setText("");
                        jLblRdvUfProprietario.setText("");
                        jLblRdvInscEstProprietario.setText("");
                        jFldRdvCodProp.requestFocus();
                        jChckBxDdInformarEmitente.setEnabled(false);
                     } else if (Tp.equals("R")) {
                        jFldRdvCodPropReboque.setText("");
                        jLblRdvPropietarioReboque.setText("");
                        jLblRdvTpProprietarioReboque.setText("");
                        jLblRdvCpfProprietarioReboque.setText("");
                        jLblRdvCnpjProprietarioReboque.setText("");
                        jLblRdvRntrcProprietarioReboque.setText("");
                        jLblRdvInscEstProprietarioReboque.setText("");
                        jChckBxRdvInformarEmitenteReboque.setEnabled(false);
                    }

                }

                Conectar.DesconectarBD();
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados...\n" + e.getLocalizedMessage());
        }
    }

    public void BuscaCondutor(String codigo) {
        try {

            Conectar.ConectarBD();

            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM TABPROF WHERE CODPROF = '" + codigo + "' AND RGEVENTO <> '3' ");
            if (Conectar.result.first() == true) {
                jFldRdvCodCondutor.setText(Conectar.result.getString("CODPROF"));
                jLblRdvCondutor.setText(Conectar.result.getString("NOMPROF"));
                jLblRdvCpfCondutor.setText(Conectar.result.getString("CPFPROF"));
            } else {
                JOptionPane.showMessageDialog(null, "Condutor não cadastrado no sistema.");
                jFldRdvCodCondutor.setText("");
                jLblRdvCondutor.setText("");
                jLblRdvCpfCondutor.setText("");
                jFldRdvCodCondutor.requestFocus();
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados...\n" + e.getLocalizedMessage());
        }
    }

    public void BuscaReboque(String codigo) {
        try {
            Conectar.ConectarBD();

            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_REBOQUE WHERE CODREBOQUE = '" + codigo + "' AND RGEVENTO <> '3' ");
            if (Conectar.result.first()) {
                jFldRdvCodReboque.setText(Conectar.result.getString("CODREBOQUE"));
                jLblRdvPlacaReboque.setText(Conectar.result.getString("PLACA"));
                jLblRdvTpCarroceriaReboque.setText(TipoCarroceria(Conectar.result.getString("TP_CARROCERIA")));
                jLblRdvRenavamReboque.setText(Conectar.result.getString("RENAVAM"));
                jLblRdvRntrcReboque.setText(Conectar.result.getString("RNTC"));
                jLblRdvUfReboque.setText(Conectar.result.getString("ESTADO"));
                jLblRdvCapacidadeKGReboque.setText(Conectar.result.getString("CAPACIDADE_KG") + " KG");
                jLblRdvCapacidadeM3Reboque.setText(Conectar.result.getString("CAPACIDADE_M3") + " M3");
                jLblRdvTipoRodadoReboque.setText(TipoRodado(Conectar.result.getString("TP_RODADO")));
                String prop = Conectar.result.getString("PROPTERC");
                if (prop.equals("T")) {
                    jFldRdvCodPropReboque.setText(Conectar.result.getString("CODPROP"));
                    Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_PROPRIETARIO WHERE COD_PROPRIETARIO = '" + jFldRdvCodPropReboque.getText() + "' ");
                    while (Conectar.result.next()) {
                        jLblRdvPropietarioReboque.setText(Conectar.result.getString("PROP_NOME"));
                        jLblRdvTpProprietarioReboque.setText(TipoProprietario(Conectar.result.getString("PROP_CODTP")));
                        jLblRdvCpfProprietarioReboque.setText(util.FormataCpf(Conectar.result.getString("PROP_CPF")));
                        jLblRdvCnpjProprietarioReboque.setText(util.FormataCnpj(Conectar.result.getString("PROP_CNPJ")));
                        jLblRdvRntrcProprietarioReboque.setText(Conectar.result.getString("PROP_RNTRC"));
                        jLblRdvInscEstProprietarioReboque.setText(Conectar.result.getString("PROP_IE"));
                        jChckBxRdvInformarEmitenteReboque.setSelected(true);
                        jChckBxRdvInformarEmitenteReboque.setEnabled(false);
                    }
                } else if (prop.equals("P")) {
                    jFldRdvCodPropReboque.setText("");
                    jLblRdvPropietarioReboque.setText("");
                    jLblRdvTpProprietarioReboque.setText("");
                    jLblRdvCpfProprietarioReboque.setText("");
                    jLblRdvCnpjProprietarioReboque.setText("");
                    jLblRdvRntrcProprietarioReboque.setText("");
                    jLblRdvInscEstProprietarioReboque.setText("");
                    jChckBxRdvInformarEmitenteReboque.setSelected(false);
                    jChckBxRdvInformarEmitenteReboque.setEnabled(false);
                }

            } else {
                JOptionPane.showMessageDialog(null, "Reboque não cadastrado no sistema.");
                jFldRdvCodReboque.setText("");
                jLblRdvPlacaReboque.setText("");
                jLblRdvTpCarroceriaReboque.setText("");
                jLblRdvRenavamReboque.setText("");
                jLblRdvRntrcReboque.setText("");
                jLblRdvUfReboque.setText("");
                jLblRdvCapacidadeKGReboque.setText("0 KG");
                jLblRdvCapacidadeM3Reboque.setText("0 M3");
                jFldRdvCodPropReboque.setText("");
                jLblRdvPropietarioReboque.setText("");
                jLblRdvTpProprietarioReboque.setText("");
                jLblRdvCpfProprietarioReboque.setText("");
                jLblRdvCnpjProprietarioReboque.setText("");
                jLblRdvRntrcProprietarioReboque.setText("");
                jLblRdvInscEstProprietarioReboque.setText("");
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados...\n" + e.getLocalizedMessage());
        }
    }

    public void BuscaFornecedorVale(String codigo) {
        try {
            Conectar.ConectarBD();

            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_FORVALEPEDAGIO WHERE CODFORVALE = '" + codigo + "' AND RGEVENTO <> '3' ");

            if (Conectar.result.first() == true) {
                jFldRdvCodFornecedorVale.setText(Conectar.result.getString("CODFORVALE"));
                jLblRdvFornecedorVale.setText(Conectar.result.getString("FORVALEPEDAGIO"));
                jLblRdvCnpjFornecedor.setText(util.FormataCnpj(Conectar.result.getString("CNPJ")));
            } else {
                JOptionPane.showMessageDialog(null, "Fornecedor de Vale não cadastrado no sistema.");
                jFldRdvCodFornecedorVale.setText("");
                jLblRdvFornecedorVale.setText("");
                jLblRdvCnpjFornecedor.setText("");
                jFldRdvCodFornecedorVale.requestFocus();
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados...\n" + e.getLocalizedMessage());
        }
    }

    public void BuscaResponsavelPagamento(String codigo) {
        try {
            Conectar.ConectarBD();

            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_RESP_PAG_VALE WHERE CODIGO = '" + codigo + "' AND RGEVENTO <> '3' ");

            if (Conectar.result.first() == true) {
                jFldRdvCodRespPag.setText(Conectar.result.getString("CODIGO"));
                jLblRdvResponsavelPagamento.setText(Conectar.result.getString("RESPONSAVEL"));
                jLblRdvResponsavelCnpj.setText(util.FormataCnpj(Conectar.result.getString("CNPJ")));
            } else {
                JOptionPane.showMessageDialog(null, "Responsável não cadastrado no sistema.");
                jFldRdvCodRespPag.setText("");
                jLblRdvResponsavelPagamento.setText("");
                jLblRdvResponsavelCnpj.setText("");
                jFldRdvCodRespPag.requestFocus();
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados...\n" + e.getLocalizedMessage());
        }
    }

    public boolean VerificaRdvCondutor() {

        for (int linha = 0; linha < jTableRdvCondutores.getRowCount(); linha++) {
            if (jFldRdvCodCondutor.getText().equals(jTableRdvCondutores.getValueAt(linha, 1).toString())) {
                JOptionPane.showMessageDialog(null, "Condutor já inserido!");
                return false;
            }
        }

        if (jTableRdvCondutores.getRowCount() >= 10) {
            JOptionPane.showMessageDialog(null, "Limite de 10 condutores atingindo!");
            return false;
        } else {
            return true;
        }
    }

    public boolean VerificaRdvReboque() {

        for (int linha = 0; linha < jTableRdvInfoReboque.getRowCount(); linha++) {
            if (jFldRdvCodReboque.getText().equals(jTableRdvInfoReboque.getValueAt(linha, 1).toString())) {
                JOptionPane.showMessageDialog(null, "Reboque já inserido!");
                return false;
            }
        }

        if (jTableRdvInfoReboque.getRowCount() >= 3) {
            JOptionPane.showMessageDialog(null, "Limite de 3 reboques atingido!");
            return false;
        } else if (jFldRdvCodReboque.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Digite o código do reboque!");
            jFldRdvCodReboque.requestFocus();
            return false;
        } else {
            return true;
        }
    }

    public boolean VerificaRdvValePedagio() {
        for (int linha = 0; linha < jTableRdvInfoValePedagio.getRowCount(); linha++) {
            if (jFldRdvNrComprovante.getText().equals(jTableRdvInfoValePedagio.getValueAt(linha, 6).toString())) {
                JOptionPane.showMessageDialog(null, "Número de comprovante já inserido!");
                return false;
            }
        }

        if (jFldRdvCodFornecedorVale.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Digite o código do fornecedor do vale!");
            jFldRdvCodFornecedorVale.requestFocus();
            return false;
            
        }else if(jFldRdvCodRespPag.getText().length() == 0){
            JOptionPane.showMessageDialog(null, "Digite o código do responsável pelo pagamento!");
            jFldRdvCodRespPag.requestFocus();
            return false;
        } else if (jFldRdvNrComprovante.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Digite o número do comprovante de compra!");
            jFldRdvNrComprovante.requestFocus();
            return false;
        }else if(jFldRdvValorPedagio.getText().length() == 0){
            JOptionPane.showMessageDialog(null, "Digite o valor do vale!");
            jFldRdvNrComprovante.requestFocus();
            return false;
        } 
        
        else {
            return true;
        }

    }
    
    public boolean VerificaRdvNrLacres() {
        for (int linha = 0; linha < jTableRdvLacres.getRowCount(); linha++) {
            if (jFldRdvNrLacre.getText().equals(jTableRdvLacres.getValueAt(linha, 1).toString())) {
                JOptionPane.showMessageDialog(null, "Número do lacre já inserido.");
                jFldRdvNrLacre.requestFocus();
                return false;
            }
        }

        if (jFldRdvNrLacre.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Insira o número do lacre");
            jFldRdvNrLacre.requestFocus();
            return false;
        } else {
            return true;
        }
    }
    
    public void CarregaTudoNrLacreRodoviario(String dadCodigo) {
        try {
            Conectar.ConectarBD();
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_LACRES_RODO WHERE DAD_CODIGO = '" + dadCodigo + "' ");
            LimpaTabela(jTableRdvLacres);
            DefaultTableModel dtm = (DefaultTableModel) jTableRdvLacres.getModel();
            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("NR_LACRE")
                });
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }
    
    public void InserirNrLacreRodoviario(String dadCodigo, String nrLacre) {
        try {
            Conectar.ConectarBD();

            System.out.println("INSERT INTO MDFE_LACRES_RODO "
                    + "(DAD_CODIGO, NR_LACRE)"
                    + "values('" + dadCodigo + "', '" + nrLacre + "')"
            );

            Conectar.stam.executeUpdate("INSERT INTO MDFE_LACRES_RODO "
                    + "(DAD_CODIGO, NR_LACRE)"
                    + "values('" + dadCodigo + "', '" + nrLacre + "')"
            );

            Conectar.DesconectarBD();

            CarregaTudoNrLacreRodoviario(dadCodigo);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }
    
    public void DeletarNrLacreRodoviario(String dadCodigo) {
        try {
            for (int linha = 0; linha < jTableRdvLacres.getRowCount(); linha++) {
                if (((boolean) jTableRdvLacres.getValueAt(linha, 0)) == true) {

                    Conectar.ConectarBD();

                    System.out.println("DELETE FROM MDFE_LACRES_RODO "
                            + "WHERE DAD_CODIGO = '" + dadCodigo + "' AND NR_LACRE = '" + jTableRdvLacres.getValueAt(linha, 1) + "'  "
                    );

                    Conectar.stam.executeUpdate("DELETE FROM MDFE_LACRES_RODO "
                            + "WHERE DAD_CODIGO = '" + dadCodigo + "' AND NR_LACRE = '" + jTableRdvLacres.getValueAt(linha, 1) + "'  "
                    );

                    Conectar.DesconectarBD();
                }
            }

            CarregaTudoNrLacreRodoviario(dadCodigo);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao deletar...\n" + e.getLocalizedMessage());
        }
    }

    /**
     * *********************************************FIM
     * RODOVIÁRIO*********************************************************************
     */
    /**
     * ********************************************* INICIO AQUAVIARIO
     * *********************************************************************
     */
    
    public void BuscaCodPorto(String ID_PORTO, String Tag) {
        try {
            Conectar.ConectarBD();
            Conectar.result2 = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_PORTO WHERE ID_PORTO = '" + ID_PORTO + "' AND RGEVENTO <> '3' ");

            if (Conectar.result2.first() == true) {
               
                if(Tag.equals("E")){
                   jFldAquaCodPrtEmbarque.setText(Conectar.result2.getString("ID_PORTO"));               
                   jLblAquaNomePrtEmbarque.setText(Conectar.result2.getString("NOME_PORTO"));
                }else if(Tag.equals("D")){
                   jFldAquaCodPrtDestino.setText(Conectar.result2.getString("ID_PORTO"));               
                   jLblAquaNomePrtDestino.setText(Conectar.result2.getString("NOME_PORTO"));
                }else if(Tag.equals("T")){
                   jFldAquaCodPrtTrans.setText(Conectar.result2.getString("ID_PORTO"));               
                   jLblAquaNomePrtTrans.setText(Conectar.result2.getString("NOME_PORTO"));
                }
                
                

            } else {
                JOptionPane.showMessageDialog(null, "Embarcação não cadastrado no sistema!");
                
                if(Tag.equals("E")){
                   jFldAquaCodPrtEmbarque.setText("");
                   jLblAquaNomePrtEmbarque.setText("");               
                   jFldAquaCodPrtEmbarque.requestFocus();
                }else if(Tag.equals("D")){
                   jFldAquaCodPrtDestino.setText("");
                   jLblAquaNomePrtDestino.setText("");               
                   jFldAquaCodPrtDestino.requestFocus();
                }else if(Tag.equals("T")){
                   jFldAquaCodPrtTrans.setText("");
                   jLblAquaNomePrtTrans.setText("");               
                   jFldAquaCodPrtTrans.requestFocus();
                }
                
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados agencia ...\n" + e.getLocalizedMessage());
        }
    }
    
    
    
   public void BuscaCodBalsa(String ID_BALSA) {
        try {
            Conectar.ConectarBD();
            Conectar.result2 = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_BALSA WHERE ID_BALSA = '" + ID_BALSA + "' AND RGEVENTO <> '3' ");

            if (Conectar.result2.first() == true) {
               
               
                   jFldAquaCodBalsa.setText(Conectar.result2.getString("ID_BALSA"));               
                   jLblAquaNomeBalsa.setText(Conectar.result2.getString("NOME_BALSA"));
               
                
                

            } else {
                JOptionPane.showMessageDialog(null, "Balsa não cadastrada no sistema!");
                
                jFldAquaCodBalsa.setText("");               
                jLblAquaNomeBalsa.setText("");
                
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados agencia ...\n" + e.getLocalizedMessage());
        }
    }  
    

    public void BuscaCodEmbarcacao(String codigo) {
        try {
            Conectar.ConectarBD();
            Conectar.result11 = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_EMBARCACAO WHERE COD_EMB = '" + codigo + "' AND RGEVENTO <> '3' ");

            if(Conectar.result11.first() == true){
                jFldAquaCodInterno.setText(Conectar.result11.getString("CODIGO"));
                jFldAquaIdEmb.setText(Conectar.result11.getString("COD_EMB"));
                jLblAquaNomeEmbarcacao.setText(Conectar.result11.getString("NOME_EMB"));
                jLblAquaTpEmb.setText(Conectar.result11.getString("COD_TP_EMB"));
                
                jLblAquaIRIN.setText(Conectar.result11.getString("IRIN"));
                
                

            }else{
                JOptionPane.showMessageDialog(null, "Embarcação não cadastrado no sistema!");
                jFldAquaIdEmb.setText("");
                jLblAquaNomeEmbarcacao.setText("");
                jLblAquaTpEmb.setText("");
                jFldAquaIdEmb.requestFocus();
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados agencia ...\n" + e.getLocalizedMessage());
        }
    }

    public void BuscaCodCarregamento(String codigo) {
        try {
            Conectar.ConectarBD();
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_TERM_CARREG WHERE COD_TERM_CARREG = '" + codigo + "' AND RGEVENTO <> '3' ");

            if (Conectar.result.first() == true) {
                jFldAquaCodTermCarreg.setText(Conectar.result.getString("COD_TERM_CARREG"));
                jLblTerminalCarreg.setText(Conectar.result.getString("NOM_TERM_CARREG"));
            } else {
                JOptionPane.showMessageDialog(null, "Terminal de Carregamento não cadastrado no sistema!");
                jFldAquaCodTermCarreg.setText("");
                jLblTerminalCarreg.setText("");
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados agencia ...\n" + e.getLocalizedMessage());
        }
    }

    public void BuscaCodDescarregamento(String codigo) {
        try {
            Conectar.ConectarBD();
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_TERM_DESCARREG WHERE COD_TERM_DESCARREG = '" + codigo + "' AND RGEVENTO <> '3' ");

            if (Conectar.result.first() == true) {

                jFldAquaCodTermDescarreg.setText(Conectar.result.getString("COD_TERM_DESCARREG"));
                jLblNomeTerminalDescarregamento.setText(Conectar.result.getString("NOM_TERM_DESCARREG"));

            } else {
                JOptionPane.showMessageDialog(null, "Terminal de Descarregamento não cadastrado no sistema!");
                jFldAquaCodTermDescarreg.setText("");
                jLblNomeTerminalDescarregamento.setText("");

            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados agencia ...\n" + e.getLocalizedMessage());
        }

    }

    public void BuscaCodUnCargaVazia(String codigo) {
        try {
            Conectar.ConectarBD();
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_UN_CARGA_VAZIA WHERE ID_UN_CARGA = '" + codigo + "' AND RGEVENTO <> '3' ");

            if (Conectar.result.first() == true) {

                jFldAquaIdentUnCarga.setText(Conectar.result.getString("ID_UN_CARGA"));
                jLblAquaTpUnCarga.setText(VerificaTipoCarga(Conectar.result.getString("TP_UN_CARGA")));

            } else {
                JOptionPane.showMessageDialog(null, "Un de Carga Vazia não cadastrado no sistema!");
                jFldAquaIdentUnCarga.setText("");
                jLblAquaTpUnCarga.setText("");

            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados agencia ...\n" + e.getLocalizedMessage());
        }
    }

    public Integer VerificaCodigo(String codigo) {
        if (codigo.length() > 0) {
            return Integer.parseInt(codigo);
        } else {
            return null;
        }
    }
    
    public String VerificaTipoTrans(String tipo) {
        String desc = "";
        if (tipo.equals("1")) {
            desc = "Caminhão";
        } else if (tipo.equals("2")) {
            desc = "Carreta";
        }

        return desc;
    }
    
    public String VerificaCodTipoTrans(String desc){
        String tipo = "";
        
        if(desc.equals("Caminhão")){
            tipo = "1";
        }else if(desc.equals("Carreta")){
            tipo = "2";
        }
        
        return tipo;
    }
    
    //Verifica o codigo do tipo de carga na hora de inserir no banco
    public String VerificaCodTipoCarga(String tipo){
        String cod = "";
        if(tipo.equals("Container")){
            cod = "1";
        }else if(tipo.equals("ULD")){
            cod = "2";
        }else if(tipo.equals("Pallet")){
            cod = "3";
        }else if(tipo.equals("Outros")){
            cod = "4";
        }
        
        return cod;
    }

    public String VerificaTipoCarga(String tipo) {
        String desc = "";
        if (tipo.equals("1")) {
            desc = "Container";
        } else if (tipo.equals("2")) {
            desc = "ULD";
        } else if (tipo.equals("3")) {
            desc = "Pallet";
        } else if (tipo.equals("4")) {
            desc = "Outros";
        }

        return desc;
    }

    public String CampoCalcTipoEmitente(String tipo) {
        String nome = "";
        if (tipo != null) {
            if (tipo.equals("1")) {
                nome = "Prestador de serviço de transporte";
            } else if (tipo.equals("2")) {
                nome = "Não prestador de serviço de transporte";
            } else {
                nome = "";
            }
        }

        return nome;
    }

    public String CampoCalcModalidade(String tipo) {
        String nome = "";
        if (tipo != null) {
            if (tipo.equals("1")) {
                nome = "Rodoviário";
            } else if (tipo.equals("3")) {
                nome = "Aquaviário";
            }

        }

        return nome;
    }
    
    
    public String CampoCalcEmissao(String tipo) {
        String nome = "";
        if (tipo != null) {
            if (tipo.equals("1")) {
                nome = "Normal";
            } else if (tipo.equals("2")) {
                nome = "Contingência";
            }

        }

        return nome;
    }

    public void InserirTerminaisCarregamento(String codigo, String dadCodigo, String nome) {
        try {
            Conectar.ConectarBD();

            System.out.println("INSERT INTO MDFE_TERMINAL_CARREGAMENTO "
                    + "(CODIGO, DAD_CODIGO, NOME_TER_CARREGAMENTO)"
                    + "values('" + codigo + "', '" + dadCodigo + "', '" + nome + "')"
            );

            Conectar.stam.executeUpdate("INSERT INTO MDFE_TERMINAL_CARREGAMENTO "
                    + "(CODIGO, DAD_CODIGO, NOME_TER_CARREGAMENTO)"
                    + "values('" + codigo + "', '" + dadCodigo + "', '" + nome + "')"
            );

            jFldAquaCodTermCarreg.setText("");
            jLblTerminalCarreg.setText("");

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }

    public void CarregaTerminaisCarregamento(String dadCodigo) {
        try {
            Conectar.ConectarBD();
            LimpaTabela(jTableAquaInfoTermCarreg);
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_TERMINAL_CARREGAMENTO WHERE DAD_CODIGO = '" + dadCodigo + "' ");
            DefaultTableModel dtm = (DefaultTableModel) jTableAquaInfoTermCarreg.getModel();

            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("CODIGO"),
                    Conectar.result.getString("NOME_TER_CARREGAMENTO")});
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }

    public void DeletarTerminalCarregamento(String dadCodigo) {
        try {
            //Se Tabela tiver mais de 0 carregamento
            if (jTableAquaInfoTermCarreg.getRowCount() > 0) {
                //Dá um loop com a quantidade de linhas da Tabela
                for (int linha = 0; linha < jTableAquaInfoTermCarreg.getRowCount(); linha++) {
                    //Percorre todas as linhas verificando quais tem o CheckBox marcado (True)
                    if (((boolean) jTableAquaInfoTermCarreg.getValueAt(linha, 0)) == true) {
                        //A que estiver marcado, será deletada usando o codigo, Municipio e Dados
                        Conectar.ConectarBD();

                        System.out.println("DELETE FROM MDFE_TERMINAL_CARREGAMENTO WHERE CODIGO = '" + jTableAquaInfoTermCarreg.getValueAt(linha, 1).toString() + "' "
                                + "AND DAD_CODIGO = '" + dadCodigo + "' "
                        );

                        Conectar.stam.executeUpdate("DELETE FROM MDFE_TERMINAL_CARREGAMENTO WHERE CODIGO = '" + jTableAquaInfoTermCarreg.getValueAt(linha, 1).toString() + "' "
                                + "AND DAD_CODIGO = '" + dadCodigo + "' "
                        );

                        Conectar.DesconectarBD();
                    } else {
                        // 
                    }
                }

                CarregaTerminaisCarregamento(dadCodigo);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao deletar...\n" + e.getLocalizedMessage());
        }
    }
//-----------------------------------------------------------------------------------------------------------------------------------------

    public void InserirTerminalDescarregamento(String codigo, String dadCodigo, String nome) {
        try {
            Conectar.ConectarBD();

            System.out.println("INSERT INTO MDFE_TERMINAL_DESCARREGA "
                    + "(CODIGO, DAD_CODIGO, NOME_TER_DESCARREGAMENTO)"
                    + "values('" + codigo + "', '" + dadCodigo + "', '" + nome + "')"
            );

            Conectar.stam.executeUpdate("INSERT INTO MDFE_TERMINAL_DESCARREGA "
                    + "(CODIGO, DAD_CODIGO, NOME_TER_DESCARREGAMENTO)"
                    + "values('" + codigo + "', '" + dadCodigo + "', '" + nome + "')"
            );

            jFldAquaCodTermDescarreg.setText("");
            jLblNomeTerminalDescarregamento.setText("");

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }

    public void CarregaTerminaisDescarregamento(String dadCodigo) {
        try {
            Conectar.ConectarBD();
            LimpaTabela(jTableAquaInfoTermDescarreg);
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_TERMINAL_DESCARREGA WHERE DAD_CODIGO = '" + dadCodigo + "' ");
            DefaultTableModel dtm = (DefaultTableModel) jTableAquaInfoTermDescarreg.getModel();

            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("CODIGO"),
                    Conectar.result.getString("NOME_TER_DESCARREGAMENTO")});
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }

    public void DeletarTerminalDescarregamento(String dadCodigo) {
        try {
            //Se Tabela tiver mais de 0 carregamento
            if (jTableAquaInfoTermDescarreg.getRowCount() > 0) {
                //Dá um loop com a quantidade de linhas da Tabela
                for (int linha = 0; linha < jTableAquaInfoTermDescarreg.getRowCount(); linha++) {
                    //Percorre todas as linhas verificando quais tem o CheckBox marcado (True)
                    if (((boolean) jTableAquaInfoTermDescarreg.getValueAt(linha, 0)) == true) {
                        //A que estiver marcado, será deletada usando o codigo, Municipio e Dados
                        Conectar.ConectarBD();

                        System.out.println("DELETE FROM MDFE_TERMINAL_DESCARREGA WHERE CODIGO = '" + jTableAquaInfoTermDescarreg.getValueAt(linha, 1).toString() + "' "
                                + "AND DAD_CODIGO = '" + dadCodigo + "' "
                        );

                        Conectar.stam.executeUpdate("DELETE FROM MDFE_TERMINAL_DESCARREGA WHERE CODIGO = '" + jTableAquaInfoTermDescarreg.getValueAt(linha, 1).toString() + "' "
                                + "AND DAD_CODIGO = '" + dadCodigo + "' "
                        );

                        Conectar.DesconectarBD();
                    } else {

                    }
                }

                CarregaTerminaisDescarregamento(dadCodigo);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao deletar...\n" + e.getLocalizedMessage());
        }
    }

    //----------------------------------------------------------------------------------------------------------------------------------------------------------
    public void InserirEmbComboio(String CODIGO_COBOIO, String DAD_CODIGO, String ID_BALSA, String BALSA) {
        try {
            Conectar.ConectarBD();

            System.out.println("INSERT INTO MDFE_TERMINAL_COMBOIO "
                    + "(CODIGO_COBOIO, DAD_CODIGO, ID_BALSA, BALSA)"
                    + "values('" + CODIGO_COBOIO + "', '" + DAD_CODIGO + "', '" + ID_BALSA + "', '" + BALSA + "')"
            );

            Conectar.stam.executeUpdate("INSERT INTO MDFE_TERMINAL_COMBOIO "
                    + "(CODIGO_COBOIO, DAD_CODIGO, ID_BALSA, BALSA)"
                    + "values('" + CODIGO_COBOIO + "', '" + DAD_CODIGO + "', '" + ID_BALSA + "', '" + BALSA + "')"
            );

            jFldAquaCodEmbComboio.setText("");
            jFldAquaCodBalsa.setText("");
            jLblAquaNomeBalsa.setText("");

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }

    public void CarregaEmbComboio(String dadCodigo) {
        try {
            Conectar.ConectarBD();
            LimpaTabela(jTableAquaInfoEmbComboio);
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_TERMINAL_COMBOIO WHERE DAD_CODIGO = '" + dadCodigo + "' ");
            DefaultTableModel dtm = (DefaultTableModel) jTableAquaInfoEmbComboio.getModel();

            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("CODIGO_COBOIO"),                  
                    Conectar.result.getString("ID_BALSA"),
                    Conectar.result.getString("BALSA")});
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }

    public void DeletarEmbComboio(String dadCodigo) {
        try {

            //Se Tabela tiver mais de 0 carregamento
            if (jTableAquaInfoEmbComboio.getRowCount() > 0) {
                //Dá um loop com a quantidade de linhas da Tabela
                for (int linha = 0; linha < jTableAquaInfoEmbComboio.getRowCount(); linha++) {
                    //Percorre todas as linhas verificando quais tem o CheckBox marcado (True)
                    if (((boolean) jTableAquaInfoEmbComboio.getValueAt(linha, 0)) == true){
                        //A que estiver marcado, será deletada usando o codigo, Municipio e Dados
                        Conectar.ConectarBD();

                        System.out.println("DELETE FROM MDFE_TERMINAL_COMBOIO WHERE CODIGO_COBOIO = '" + jTableAquaInfoEmbComboio.getValueAt(linha, 1).toString() + "' "
                                + "AND DAD_CODIGO = '" + dadCodigo + "' "
                        );

                        Conectar.stam.executeUpdate("DELETE FROM MDFE_TERMINAL_COMBOIO WHERE CODIGO_COBOIO = '" + jTableAquaInfoEmbComboio.getValueAt(linha, 1).toString() + "' "
                                + "AND DAD_CODIGO = '" + dadCodigo + "' "
                        );

                        Conectar.DesconectarBD();
                    }else{
                        // JOptionPane.showMessageDialog(null, "Selecione o item para deletar!" );
                    }
                }

                CarregaEmbComboio(dadCodigo);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao deletar...\n" + e.getLocalizedMessage());
        }
    }

    //---------------------------------------------------------------------
    
    
     public void CarregaTpUnCargaVazia(String dadCodigo) {
        try {
            Conectar.ConectarBD();
            LimpaTabela(jTableAquanInfUnVazia);
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_TERMINAL_UNCARGAVAZIA WHERE DAD_CODIGO = '" + dadCodigo + "' ");
            DefaultTableModel dtm = (DefaultTableModel) jTableAquanInfUnVazia.getModel();

            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("CODIGO_ID"),
                    VerificaTipoCarga(Conectar.result.getString("TIPO"))});
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }

    
    
    //---------------------------------------------------------------------
    public void InserirTpUnCargaVazia(String codigo, String dadCodigo, String nome) {
        try {
            Conectar.ConectarBD();

            System.out.println("INSERT INTO MDFE_TERMINAL_UNCARGAVAZIA "
                    + "(CODIGO_ID, DAD_CODIGO, TIPO)"
                    + "values('" + codigo + "', '" + dadCodigo + "', '" + nome + "')"
            );

            Conectar.stam.executeUpdate("INSERT INTO MDFE_TERMINAL_UNCARGAVAZIA "
                    + "(CODIGO_ID, DAD_CODIGO, TIPO)"
                    + "values('" + codigo + "', '" + dadCodigo + "', '" + nome + "')"
            );

            jFldAquaIdentUnCarga.setText("");
            jLblAquaTpUnCarga.setText("");

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }

    
    

    public void DeletarTpUnCargaVazia(String dadCodigo) {
        try {
            //Se Tabela tiver mais de 0 carregamento
            if (jTableAquanInfUnVazia.getRowCount() > 0) {
                //Dá um loop com a quantidade de linhas da Tabela
                for (int linha = 0; linha < jTableAquanInfUnVazia.getRowCount(); linha++) {
                    //Percorre todas as linhas verificando quais tem o CheckBox marcado (True)
                    if (((boolean) jTableAquanInfUnVazia.getValueAt(linha, 0)) == true) {
                        //A que estiver marcado, será deletada usando o codigo, Municipio e Dados
                        Conectar.ConectarBD();

                        System.out.println("DELETE FROM MDFE_TERMINAL_UNCARGAVAZIA WHERE CODIGO_ID = '" + jTableAquanInfUnVazia.getValueAt(linha, 1).toString() + "' "
                                + "AND DAD_CODIGO = '" + dadCodigo + "' "
                        );

                        Conectar.stam.executeUpdate("DELETE FROM MDFE_TERMINAL_UNCARGAVAZIA WHERE CODIGO_ID = '" + jTableAquanInfUnVazia.getValueAt(linha, 1).toString() + "' "
                                + "AND DAD_CODIGO = '" + dadCodigo + "' "
                        );

                        Conectar.DesconectarBD();
                    } else {
                        JOptionPane.showMessageDialog(null, "Selecione o item para deletar!");
                    }
                }

                CarregaTpUnCargaVazia(dadCodigo);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao deletar...\n" + e.getLocalizedMessage());
        }
    }
    
    
    public void CarregaUnTransVazia(String dadCodigo) {
        try {
            Conectar.ConectarBD();
            LimpaTabela(jTableAquanInfUnidTranspVazia);
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_UN_TRANS_VAZIA WHERE DAD_CODIGO = '" + dadCodigo + "' ");
            DefaultTableModel dtm = (DefaultTableModel) jTableAquanInfUnidTranspVazia.getModel();

            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("CODIGO_ID"),
                    VerificaTipoTrans(Conectar.result.getString("TIPO"))});
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }
    public void InserirUnTransVazia(String CODIGO_ID, String DAD_CODIGO, String TIPO) {
        try {
            Conectar.ConectarBD();

            System.out.println("INSERT INTO MDFE_UN_TRANS_VAZIA "
                    + "(CODIGO_ID, DAD_CODIGO, TIPO)"
                    + "values('" + CODIGO_ID + "', '" + DAD_CODIGO + "', '" + TIPO + "')"
            );

            Conectar.stam.executeUpdate("INSERT INTO MDFE_UN_TRANS_VAZIA "
                    + "(CODIGO_ID, DAD_CODIGO, TIPO)"
                    + "values('" + CODIGO_ID + "', '" + DAD_CODIGO + "', '" + TIPO + "')"
            );

            jFldAquaIdUnidTranspVazia.setText("");
            jLblAquaTpUnidTranspVazia.setText("");

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }

    
    public void DeletarUnTransVazia(String dadCodigo) {
        try {
            //Se Tabela tiver mais de 0 carregamento
            if (jTableAquanInfUnidTranspVazia.getRowCount() > 0) {
                //Dá um loop com a quantidade de linhas da Tabela
                for (int linha = 0; linha < jTableAquanInfUnidTranspVazia.getRowCount(); linha++) {
                    //Percorre todas as linhas verificando quais tem o CheckBox marcado (True)
                    if (((boolean) jTableAquanInfUnidTranspVazia.getValueAt(linha, 0)) == true) {
                        //A que estiver marcado, será deletada usando o codigo, Municipio e Dados
                        Conectar.ConectarBD();

                        System.out.println("DELETE FROM MDFE_UN_TRANS_VAZIA WHERE CODIGO_ID = '" + jTableAquanInfUnidTranspVazia.getValueAt(linha, 1).toString() + "' "
                                + "AND DAD_CODIGO = '" + dadCodigo + "' "
                        );

                        Conectar.stam.executeUpdate("DELETE FROM MDFE_UN_TRANS_VAZIA WHERE CODIGO_ID = '" + jTableAquanInfUnidTranspVazia.getValueAt(linha, 1).toString() + "' "
                                + "AND DAD_CODIGO = '" + dadCodigo + "' "
                        );

                        Conectar.DesconectarBD();
                    } else {
                        JOptionPane.showMessageDialog(null, "Selecione o item para deletar!");
                    }
                }

                CarregaUnTransVazia(dadCodigo);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao deletar...\n" + e.getLocalizedMessage());
        }
    }
    
    
    public void CarregaTpUnTransVazia(String dadCodigo) {
        try {
            Conectar.ConectarBD();
            LimpaTabela(jTableAquanInfUnidTranspVazia);
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM  MDFE_UN_TRANS_VAZIA WHERE DAD_CODIGO = '" + dadCodigo + "' ");
            DefaultTableModel dtm = (DefaultTableModel) jTableAquanInfUnidTranspVazia.getModel();

            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("CODIGO_ID"),
                    VerificaTipoCarga(Conectar.result.getString("TIPO"))});
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }
    
   
//-----------------------------------------------------------------------------------------------------------------------------------------

    /**
     * ********************************************* FIM AQUAVIARIO
     * *********************************************************************
     */
    /**
     *********************************** INICIO INFORMACOES DO DOCUMENTO
     * ****************************
     */
    public void InserirDocumento(String CodDoc, String dadCodigo, String Chave, String CodBarra, String QtdTransp, String Tipo, String CodMun,
            String Municipio, String Uf) {
        try {
            Conectar.ConectarBD();

            System.out.println("INSERT INTO MDFE_DOCUMENTO  "
                    + "(CODDOC, DAD_CODIGO, CHAVE, COD_BARRAS, QTD_UN_TRANP, TP_DOC, COD_MUN, MUNICIPIO, UF)"
                    + "values('" + CodDoc + "','" + dadCodigo + "', '" + Chave + "', '" + CodBarra + "', '" + QtdTransp + "', '" + Tipo + "', "
                    + " '" + CodMun + "', '" + Municipio + "', '" + Uf + "')"
            );

            Conectar.stam.executeUpdate("INSERT INTO MDFE_DOCUMENTO  "
                    + "(CODDOC, DAD_CODIGO, CHAVE, COD_BARRAS, QTD_UN_TRANP, TP_DOC, COD_MUN, MUNICIPIO, UF)"
                    + "values('" + CodDoc + "','" + dadCodigo + "', '" + Chave + "', '" + CodBarra + "', '" + QtdTransp + "', '" + Tipo + "', "
                    + " '" + CodMun + "', '" + Municipio + "', '" + Uf + "')"
            );

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }

    public void DeletarDocumento(String CodDoc, Integer dadCodigo, String Tipo, String CodMun) {
        try {
            Conectar.ConectarBD();

            System.out.println("DELETE FROM MDFE_DOCUMENTO "
                    + "WHERE CODDOC     = '" + CodDoc + "' AND DAD_CODIGO   = " + dadCodigo + " AND TP_DOC = '" + Tipo + "' AND COD_MUN = '"+ CodMun +"' "
            );

            Conectar.stam.executeUpdate("DELETE FROM MDFE_DOCUMENTO "
                    + "WHERE CODDOC     = '" + CodDoc + "' AND DAD_CODIGO   = " + dadCodigo + " AND TP_DOC = '" + Tipo + "' AND COD_MUN = '"+ CodMun +"' "
            );

            System.out.println("DELETE FROM MDFE_UN_TRANSPORTE "
                    + "WHERE CODDOC     = '" + CodDoc + "' AND DAD_CODIGO   = " + dadCodigo + " AND TP_DOC = '" + Tipo + "' AND COD_MUN = '"+ CodMun +"' "
            );

            Conectar.stam.executeUpdate("DELETE FROM MDFE_UN_TRANSPORTE "
                    + "WHERE CODDOC     = '" + CodDoc + "' AND DAD_CODIGO   = " + dadCodigo + " AND TP_DOC = '" + Tipo + "' AND COD_MUN = '"+ CodMun +"' "
            );

            System.out.println("DELETE FROM MDFE_LACRES_TRANSPORTE "
                    + "WHERE CODDOC     = '" + CodDoc + "' AND DAD_CODIGO   = " + dadCodigo + " AND TP_DOC = '" + Tipo + "' AND COD_MUN = '"+ CodMun +"' "
            );

            Conectar.stam.executeUpdate("DELETE FROM MDFE_LACRES_TRANSPORTE "
                    + "WHERE CODDOC     = '" + CodDoc + "' AND DAD_CODIGO   = " + dadCodigo + " AND TP_DOC = '" + Tipo + "' AND COD_MUN = '"+ CodMun +"' "
            );

            System.out.println("DELETE FROM MDFE_UN_CARGA "
                    + "WHERE CODDOC     = '" + CodDoc + "' AND DAD_CODIGO   = " + dadCodigo + " AND TP_DOC = '" + Tipo + "' AND COD_MUN = '"+ CodMun +"' "
            );

            Conectar.stam.executeUpdate("DELETE FROM MDFE_UN_CARGA "
                    + "WHERE CODDOC     = '" + CodDoc + "' AND DAD_CODIGO   = " + dadCodigo + " AND TP_DOC = '" + Tipo + "' AND COD_MUN = '"+ CodMun +"' "
            );

            System.out.println("DELETE FROM MDFE_LACRES_CARGA "
                    + "WHERE CODDOC     = '" + CodDoc + "' AND DAD_CODIGO   = " + dadCodigo + " AND TP_DOC = '" + Tipo + "' AND COD_MUN = '"+ CodMun +"' "
            );

            Conectar.stam.executeUpdate("DELETE FROM MDFE_LACRES_CARGA "
                    + "WHERE CODDOC     = '" + CodDoc + "' AND DAD_CODIGO   = " + dadCodigo + " AND TP_DOC = '" + Tipo + "' AND COD_MUN = '"+ CodMun +"' "
            );

            Conectar.DesconectarBD();

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao alterar...\n" + e.getLocalizedMessage());
        }
    }

    public void BuscaCodMaxDocumento(String Tipo, String CodMun, String dadCodigo) {
        try {
            Conectar.ConectarBD();

            Conectar.result = Conectar.stam.executeQuery("SELECT MAX(CODDOC) + 1 FROM MDFE_DOCUMENTO  WHERE DAD_CODIGO = '" + dadCodigo + "' "
                    + "AND TP_DOC = '" + Tipo + "' AND COD_MUN = '" + CodMun + "' ");
            while (Conectar.result.next()) {
                if (Conectar.result.getString(1) != null) {
                    util.sCODDOC = Conectar.result.getString(1);
                } else {
                    util.sCODDOC = "1";
                }

            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao gerar código...\n" + e.getLocalizedMessage());
        }
    }

    //Carrega todos os estados dos documentos a partir do Numero do MDF-e e do tipo de documento
    public void CarregaComboBoxUfDescarregamentoDocumento(String DadCodigo) {
        jCmbBxDocUfMunDocumento.removeAllItems();
        try {
            Conectar.ConectarBD();

            Conectar.result = Conectar.stam.executeQuery("SELECT DISTINCT(UF) FROM MDFE_MUN_DESCARREG WHERE DAD_CODIGO = '" + DadCodigo + "' ");

            while (Conectar.result.next()) {
                jCmbBxDocUfMunDocumento.addItem(Conectar.result.getString("UF"));
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados...\n" + e.getLocalizedMessage());
        }
    }

    //Carrega todos os municipios dos documentos a partir do Numero do MDF-e, do tipo de documento e da uf
    public void CarregaComboBoxMunicipioDescarregamentoDocumento(String DadCodigo, String uf) {
        jCmbBxDocMunDocumento.removeAllItems();
        try {
            Conectar.ConectarBD();
            Conectar.result = Conectar.stam.executeQuery("SELECT MUNICIPIO FROM MDFE_MUN_DESCARREG WHERE DAD_CODIGO = '" + DadCodigo + "' AND UF = '" + uf + "' ");
            while (Conectar.result.next()) {
                jCmbBxDocMunDocumento.addItem(Conectar.result.getString("MUNICIPIO"));
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados...\n" + e.getLocalizedMessage());
        }
    }

    public void CarregaTudoMunicipioDescarregamento(String dadCodigo) {
        try {
            Conectar.ConectarBD();
            Conectar.result = Conectar.stam.executeQuery("SELECT UF, MUNICIPIO, COD_MUNICIPIO FROM MDFE_MUN_DESCARREG WHERE DAD_CODIGO = '" + dadCodigo + "' GROUP BY UF, MUNICIPIO, COD_MUNICIPIO ");
            LimpaTabela(jTableDocMunDescarreg);
            DefaultTableModel dtm = (DefaultTableModel) jTableDocMunDescarreg.getModel();
            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("UF"),
                    Conectar.result.getString("MUNICIPIO"),
                    Conectar.result.getString("COD_MUNICIPIO")
                });
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }

    public void InserirMunicipioDescarregamento(String dadCodigo, String codMunicipio, String uf, String municipio) {
        try {
            Conectar.ConectarBD();

            System.out.println("INSERT INTO MDFE_MUN_DESCARREG "
                    + "(DAD_CODIGO, COD_MUNICIPIO, UF, MUNICIPIO)"
                    + "values('" + dadCodigo + "', '" + codMunicipio + "', '" + uf + "', '" + municipio + "')"
            );

            Conectar.stam.executeUpdate("INSERT INTO MDFE_MUN_DESCARREG "
                    + "(DAD_CODIGO, COD_MUNICIPIO, UF, MUNICIPIO)"
                    + "values('" + dadCodigo + "', '" + codMunicipio + "', '" + uf + "', '" + municipio + "')"
            );

            CarregaTudoMunicipioDescarregamento(dadCodigo);

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }

    public void DeletarMunicipioDescarregamento(String dadCodigo) {
        try {
            for (int linha = 0; linha < jTableDocMunDescarreg.getRowCount(); linha++) {
                if (((boolean) jTableDocMunDescarreg.getValueAt(linha, 0)) == true) {
                    Conectar.ConectarBD();

                   
                    Conectar.stam.executeUpdate("DELETE FROM MDFE_MUN_DESCARREG WHERE DAD_CODIGO = '" + dadCodigo + "' AND "
                            + " COD_MUNICIPIO = '" + jTableDocMunDescarreg.getValueAt(linha, 3) + "' "
                    );
                    
                    Conectar.stam.executeUpdate("DELETE FROM  MDFE_DOCUMENTO WHERE DAD_CODIGO = '" + dadCodigo + "' AND "
                            + " COD_MUN = '" + jTableDocMunDescarreg.getValueAt(linha, 3) + "' "
                    );
                                    
                    Conectar.stam.executeUpdate("DELETE FROM  MDFE_UN_TRANSPORTE WHERE DAD_CODIGO = '" + dadCodigo + "' AND "
                            + " COD_MUN = '" + jTableDocMunDescarreg.getValueAt(linha, 3) + "' "
                    );
                    
                    Conectar.stam.executeUpdate("DELETE FROM  MDFE_LACRES_TRANSPORTE WHERE DAD_CODIGO = '" + dadCodigo + "' AND "
                            + " COD_MUN = '" + jTableDocMunDescarreg.getValueAt(linha, 3) + "' "
                    );
                    
                    
                    Conectar.stam.executeUpdate("DELETE FROM  MDFE_UN_CARGA WHERE DAD_CODIGO = '" + dadCodigo + "' AND "
                            + " COD_MUN = '" + jTableDocMunDescarreg.getValueAt(linha, 3) + "' "
                    );
                    
                    Conectar.stam.executeUpdate("DELETE FROM  MDFE_LACRES_CARGA WHERE DAD_CODIGO = '" + dadCodigo + "' AND "
                            + " COD_MUN = '" + jTableDocMunDescarreg.getValueAt(linha, 3) + "' "
                    ); 
                    
                    
                    
                    Conectar.DesconectarBD();
                }
            }

            CarregaTudoMunicipioDescarregamento(dadCodigo);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao alterar...\n" + e.getLocalizedMessage());
        }
    }

    public boolean VerificaDocMunicipioDescarregamento() {
        for (int linha = 0; linha < jTableDocMunDescarreg.getRowCount(); linha++) {
            if (jCmbBxDocMunDescarreg.getSelectedItem().toString().equals(jTableDocMunDescarreg.getValueAt(linha, 2))) {
                JOptionPane.showMessageDialog(null, "Município já inserido!");
                return false;
            }
        }

        if (jCmbBxDocUfMunDescarreg.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione o estado de descarregamento!");
            jCmbBxDocUfMunDescarreg.requestFocus();
            return false;
        } else if (jCmbBxDocMunDescarreg.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione o município de descarregamento!");
            jCmbBxDocUfMunDescarreg.requestFocus();
            return false;
        } else {
            return true;
        }
    }

    /**
     *********************************** FIM INFORMACOES DO DOCUMENTO
     * ****************************
     */
    /**
     * ********************************************* INICIO TOTALIZADORES
     * **********************************************************************
     */
    public String UnidadeMedidaPeso() {
        String codigo = "";
        if (jCmbBxTotCodUnMedidaPeso.getSelectedIndex() == 0) {
            codigo = "01";
        } else if (jCmbBxTotCodUnMedidaPeso.getSelectedIndex() == 1) {
            codigo = "02";
        }

        return codigo;
    }

    public void CarregaTudoNrLacre(String dadCodigo) {
        try {
            Conectar.ConectarBD();
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_LACRES_TOTALIZADOR WHERE DAD_CODIGO = '" + dadCodigo + "' ");
            LimpaTabela(jTableTotNrLacre);
            DefaultTableModel dtm = (DefaultTableModel) jTableTotNrLacre.getModel();
            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("NR_LACRE")
                });
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }
    
    public void InserirNrLacre(String dadCodigo, String nrLacre) {
        try {
            Conectar.ConectarBD();

            System.out.println("INSERT INTO MDFE_LACRES_TOTALIZADOR "
                    + "(DAD_CODIGO, NR_LACRE)"
                    + "values('" + dadCodigo + "', '" + nrLacre + "')"
            );

            Conectar.stam.executeUpdate("INSERT INTO MDFE_LACRES_TOTALIZADOR "
                    + "(DAD_CODIGO, NR_LACRE)"
                    + "values('" + dadCodigo + "', '" + nrLacre + "')"
            );

            Conectar.DesconectarBD();

            CarregaTudoNrLacre(dadCodigo);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }

    public void DeletarNrLacre(String dadCodigo) {
        try {
            for (int linha = 0; linha < jTableTotNrLacre.getRowCount(); linha++) {
                if (((boolean) jTableTotNrLacre.getValueAt(linha, 0)) == true) {

                    Conectar.ConectarBD();

                    System.out.println("DELETE FROM MDFE_LACRES_TOTALIZADOR "
                            + "WHERE DAD_CODIGO = '" + dadCodigo + "' AND NR_LACRE = '" + jTableTotNrLacre.getValueAt(linha, 1) + "'  "
                    );

                    Conectar.stam.executeUpdate("DELETE FROM MDFE_LACRES_TOTALIZADOR "
                            + "WHERE DAD_CODIGO = '" + dadCodigo + "' AND NR_LACRE = '" + jTableTotNrLacre.getValueAt(linha, 1) + "'  "
                    );

                    Conectar.DesconectarBD();
                }
            }

            CarregaTudoNrLacre(dadCodigo);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao deletar...\n" + e.getLocalizedMessage());
        }
    }

    public boolean VerificaTotNrLacres() {
        for (int linha = 0; linha < jTableTotNrLacre.getRowCount(); linha++) {
            if (jFldTotNrLacres.getText().equals(jTableTotNrLacre.getValueAt(linha, 1).toString())) {
                JOptionPane.showMessageDialog(null, "Número do lacre já inserido.");
                jFldTotNrLacres.requestFocus();
                return false;
            }
        }

        if (jFldTotNrLacres.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Insira o número do lacre");
            jFldTotNrLacres.requestFocus();
            return false;
        } else {
            return true;
        }
    }

    public void CarregaTudoDocumentoAutorizado(String dadCodigo) {
        try {
            Conectar.ConectarBD();
            LimpaTabela(jTableTotAutorizados);
            DefaultTableModel dtm = (DefaultTableModel) jTableTotAutorizados.getModel();
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_DOWNLOAD WHERE DAD_CODIGO = '" + dadCodigo + "' ");
            while (Conectar.result.next()) {
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("DOCUMENTO")
                });
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {

        }
    }

    public void InserirDocumento(String dadCodigo, String documento, String tipo) {
        try {
            Conectar.ConectarBD();

            System.out.println("INSERT INTO MDFE_DOWNLOAD "
                    + "(DAD_CODIGO, DOCUMENTO, TIPO)"
                    + "values('" + dadCodigo + "', '" + documento + "', '" + tipo + "')"
            );

            Conectar.stam.executeUpdate("INSERT INTO MDFE_DOWNLOAD "
                    + "(DAD_CODIGO, DOCUMENTO, TIPO)"
                    + "values('" + dadCodigo + "', '" + documento + "', '" + tipo + "')"
            );

            Conectar.DesconectarBD();

            CarregaTudoDocumentoAutorizado(dadCodigo);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }

    public void DeletarDocumento(String dadCodigo) {
        try {
            for (int linha = 0; linha < jTableTotAutorizados.getRowCount(); linha++) {
                if (((boolean) jTableTotAutorizados.getValueAt(linha, 0)) == true) {
                    Conectar.ConectarBD();

                    System.out.println("DELETE FROM MDFE_DOWNLOAD "
                            + "WHERE DAD_CODIGO = '" + dadCodigo + "' AND DOCUMENTO = '" + jTableTotAutorizados.getValueAt(linha, 1) + "' "
                    );

                    Conectar.stam.executeUpdate("DELETE FROM MDFE_DOWNLOAD "
                            + "WHERE DAD_CODIGO = '" + dadCodigo + "' AND DOCUMENTO = '" + jTableTotAutorizados.getValueAt(linha, 1) + "' "
                    );

                    Conectar.DesconectarBD();
                }
            }

            CarregaTudoDocumentoAutorizado(dadCodigo);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao deletar...\n" + e.getLocalizedMessage());
        }
    }

    public boolean VerificaDocumentoAutorizado() {
        for (int linha = 0; linha < jTableTotAutorizados.getRowCount(); linha++) {
            if (util.ExtraiNumeros(jFldTotDocumentoAutorizado.getText()).equals(jTableTotAutorizados.getValueAt(linha, 1).toString())) {
                JOptionPane.showMessageDialog(null, "Documento já inserido!");
                return false;
            }
        }

        if (jFldTotDocumentoAutorizado.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Insira o CPF ou CNPJ do autotizado!");
            return false;
        } else {
            return true;
        }
    }

    public Integer BuscaQtdDocumento(String dadCodigo, String tpDoc) {
        int qtd = 0;
        try {
            Conectar.ConectarBD();

            Conectar.result = Conectar.stam.executeQuery("SELECT COUNT(*) FROM MDFE_DOCUMENTO WHERE DAD_CODIGO = '" + dadCodigo + "' "
                    + "AND TP_DOC = '" + tpDoc + "' ");

            while (Conectar.result.next()) {
                qtd = Conectar.result.getInt(1);
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar quantidade dos documentos...\n" + e.getLocalizedMessage());
        }

        return qtd;
    }

    /**
     * ********************************************* FIM TOTALIZADORES
     * **********************************************************************
     */
    
    /**
     * ********************************************* INICIO SEGURO ************************************************************************/
        
    public void BuscaResponsavelSeguro(String codResp) {
        try {
            Conectar.ConectarBD();

            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_CONTRATANTE WHERE COD_CONTRATANTE = '" + codResp + "' AND RGEVENTO <> '3' ");

            if (Conectar.result.first()) {
                jFldCodRespSeguro.setText(Conectar.result.getString("COD_CONTRATANTE"));
                jLblNomeRespSeg.setText(Conectar.result.getString("CONT_NOME"));
                jLblRespSegCpf.setText(util.FormataCpf(Conectar.result.getString("CONT_CPF")));
                jLblRespSegCnpj.setText(util.FormataCnpj(Conectar.result.getString("CONT_CNPJ")));
            } else {
                JOptionPane.showMessageDialog(null, "Responsável não cadastrado no sistema!");
                jFldCodRespSeguro.setText("");
                jLblNomeRespSeg.setText("");
                jLblRespSegCpf.setText("");
                jLblRespSegCnpj.setText("");
                jFldCodRespSeguro.requestFocus();
            }

            Conectar.DesconectarBD();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados..\n" + e.getLocalizedMessage());
        }
    }

    public void BuscaSeguradora(String codContratante) {
        try {
            Conectar.ConectarBD();

            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_CAD_SEGURADORA WHERE SEG_CODIGO = '" + codContratante + "' AND RGEVENTO <> '3' ");

            if (Conectar.result.first()) {
                jFldCodSeguradora.setText(Conectar.result.getString("SEG_CODIGO"));
                jLblNomeSeguradora.setText(Conectar.result.getString("SEG_NOME"));
                jLblCnpjSeguradora.setText(util.FormataCnpj(Conectar.result.getString("SEG_CNPJ")));
            } else {
                JOptionPane.showMessageDialog(null, "Seguradora não cadastrada no sistema!");
                jFldCodSeguradora.setText("");
                jLblNomeSeguradora.setText("");
                jLblCnpjSeguradora.setText("");
                jFldCodSeguradora.requestFocus();
            }

            Conectar.DesconectarBD();

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar dados...\n" + e.getLocalizedMessage());
        }

    }

    public void CarregaTudoSeguro(String DadCodigo){
        try{
            Conectar.ConectarBD();
            LimpaTabela(jTableSeguro);
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_SEGURO WHERE DAD_CODIGO = '"+ DadCodigo +"' ORDER BY CODIGO");
            DefaultTableModel dtm = (DefaultTableModel) jTableSeguro.getModel();
            while(Conectar.result.next()){
                dtm.addRow(new Object[]{
                    false,
                    Conectar.result.getString("CODIGO"),
                    Conectar.result.getString("NR_APOL"),
                    Conectar.result.getString("COD_SEG"),
                    Conectar.result.getString("NOME_SEG"),
                    util.FormataCnpj(Conectar.result.getString("CNPJ_SEG")),
                    Conectar.result.getString("COD_RESP"),
                    Conectar.result.getString("NOME_RESP"),
                    util.FormataCpf(Conectar.result.getString("CPF_RESP")),
                    util.FormataCnpj(Conectar.result.getString("CNPJ_RESP")),
                    QtdUnidadeAverbação(DadCodigo, Conectar.result.getString("CODIGO"))
                });
            }
            
            Conectar.DesconectarBD();
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao carregar dados na tabela...\n" + e.getLocalizedMessage());
        }
    }
    
    public String BuscaCodMaxSeguro(String DadCodigo){
        String codmax = "";
        try{
            Conectar.ConectarBD();
            
            Conectar.result = Conectar.stam.executeQuery("SELECT MAX(CODIGO) + 1 FROM MDFE_SEGURO WHERE DAD_CODIGO = '"+ DadCodigo +"' ");
            while(Conectar.result.next()){
                if(Conectar.result.getString(1) == null){
                    codmax = "1";
                }else{
                    codmax = Conectar.result.getString(1);
                }
            }
            
            Conectar.DesconectarBD();
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao buscar código máximo...\n" + e.getLocalizedMessage());
        }
        
        return codmax;
    }
    
    public void InserirSeguro(String CodSeguro, String DadCodigo, String TpResp, String CodResp, String NomeResp, String CpfResp, String CnpjResp, 
                              String CodSeguradora, String NomeSeguradora, String CnpjSeguradora, String NrApolice){
        try{
            
            Conectar.ConectarBD();
            
            System.out.println("INSERT INTO MDFE_SEGURO "
                    + "(CODIGO, DAD_CODIGO, TP_RESP, COD_RESP, NOME_RESP, CPF_RESP, CNPJ_RESP, COD_SEG, NOME_SEG, CNPJ_SEG, NR_APOL)"
                    + "value('"+ CodSeguro +"', '"+ DadCodigo +"', '"+ TpResp +"', '"+ CodResp +"', '"+ NomeResp +"', '"+ CpfResp +"', '"+ CnpjResp +"', "
                            + " '"+ CodSeguradora +"', '"+ NomeSeguradora +"', '"+ CnpjSeguradora +"', '"+ NrApolice +"')"
            );
            
            Conectar.stam.executeUpdate("INSERT INTO MDFE_SEGURO "
                    + "(CODIGO, DAD_CODIGO, TP_RESP, COD_RESP, NOME_RESP, CPF_RESP, CNPJ_RESP, COD_SEG, NOME_SEG, CNPJ_SEG, NR_APOL)"
                    + "values('"+ CodSeguro +"', '"+ DadCodigo +"', '"+ TpResp +"', '"+ CodResp +"', '"+ NomeResp +"', '"+ CpfResp +"', '"+ CnpjResp +"', "
                            + " '"+ CodSeguradora +"', '"+ NomeSeguradora +"', '"+ CnpjSeguradora +"', '"+ NrApolice +"')"
            );  
            
            Conectar.DesconectarBD();
            
            jFldCodSeguradora.setText("");
            jLblNomeSeguradora.setText("");
            jLblCnpjSeguradora.setText("");
            jFldCodRespSeguro.setText("");
            jLblNomeRespSeg.setText("");
            jLblRespSegCpf.setText("");
            jLblRespSegCnpj.setText("");
            jFldNrApolice.setText("");
            
            CarregaTudoSeguro(DadCodigo);
            
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao inserir...\n" + e.getLocalizedMessage());
        }
    }
    
    public void DeletarSeguro(String DadCodigo){
        try{
            Conectar.ConectarBD();
            
            for (int linha = 0; linha < jTableSeguro.getRowCount(); linha++) {
                if(((boolean) jTableSeguro.getValueAt(linha, 0)) == true){
                    
                    System.out.println("DELETE FROM MDFE_SEGURO WHERE DAD_CODIGO = '"+ DadCodigo +"' AND "
                            + " CODIGO = '"+ jTableSeguro.getValueAt(linha, 1) +"' "
                    );
                    
                    Conectar.stam.executeUpdate("DELETE FROM MDFE_SEGURO WHERE DAD_CODIGO = '"+ DadCodigo +"' AND "
                            + " CODIGO = '"+ jTableSeguro.getValueAt(linha, 1) +"' "
                    );
                    
                    System.out.println("DELETE FROM MDFE_AVERBACAO WHERE DAD_CODIGO = '"+ DadCodigo +"' AND "
                            + " COD_SEGURO = '"+ jTableSeguro.getValueAt(linha, 1) +"' "
                    );
                    
                    Conectar.stam.executeUpdate("DELETE FROM MDFE_AVERBACAO WHERE DAD_CODIGO = '"+ DadCodigo +"' AND "
                            + " COD_SEGURO = '"+ jTableSeguro.getValueAt(linha, 1) +"' "
                    );
                    
                }
            }
            
            Conectar.DesconectarBD();
            
            CarregaTudoSeguro(DadCodigo);
            
        }catch(Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao deletar...\n" + e.getLocalizedMessage());
        }
    }
    
    public boolean VerificaSeguro(){
        if(jChckBxDdInformarResponsavelSeguro.isSelected() == true){
            if(jFldCodRespSeguro.getText().length() == 0){
                JOptionPane.showMessageDialog(null, "Insira o código do responsável pelo seguro!");
                jFldCodRespSeguro.requestFocus();
                return false;
            }
        }
        
        if(jFldCodSeguradora.getText().length() == 0){
            JOptionPane.showMessageDialog(null, "Insira o código do seguradora!");
            jFldCodSeguradora.requestFocus();
            return false;
        }else{
            return true;
        }
    }
    
    
    public Integer QtdUnidadeAverbação(String DadCodigo, String CodSeguro){
       Integer qtd =0;
       ResultSet result = null;
        try {  
            Conectar.ConectarBD();
            System.out.println("SELECT count(*) "
                               + "FROM MDFE_AVERBACAO "
                               + "WHERE DAD_CODIGO = '"+ DadCodigo +"' AND COD_SEGURO = '"+ CodSeguro +"' ");
            
            result = Conectar.stam.executeQuery("SELECT count(*) "
                               + "FROM MDFE_AVERBACAO "
                               + "WHERE DAD_CODIGO = '"+ DadCodigo +"' AND COD_SEGURO = '"+ CodSeguro +"' ");
               
            while (result.next()) {
                if (result.getString(1) != null) {
                   qtd = result.getInt(1);
                } 
                
            }
            
            Conectar.DesconectarBD();
           
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao gerar quantidade...\n" + e.getLocalizedMessage());
        }
          return qtd;
    }
    
    /**
     * ********************************************* FIM SEGURO ***********************************************************************/
    public void LimpaField() {
        jFldAquaCodInterno.setVisible(false);
        jTabEditRodoviarios.setSelectedIndex(0);
        jTabEditInfoCargaAquaviario.setSelectedIndex(0);
        jTabEditInformacoesDocumento.setSelectedIndex(0);
        jTabEdit.setEnabledAt(2, false);
        jTabEdit.setEnabledAt(3, false);
        jTabEdit.setSelectedIndex(0);

        jLblChaveDeAcesso.setText("");
        jFldDdSerie.setText("");
        jFldDdNumero.setText("");

        jFldDdDataHoraInicioViagem.setText("");
        jFldDdCodNumerico.setText("");
        jFldDdDV.setText("");
        jCmbBxDdMDFeUf.setSelectedIndex(-1);
        jCmbBxDdTpEmitente.setSelectedIndex(-1);
        jCmbBxDdModalidade.setSelectedIndex(-1);
        jCmbBxDdFormaEmissao.setSelectedIndex(-1);
        jCmbBxDdTpTransportador.setSelectedIndex(-1);
        jCmbBxDdUfLocalDescarreg.setSelectedIndex(-1);

        jCmbBxDdUfLocalCarreg.setSelectedIndex(-1);
        jCmbBxDdMunicipioLocalCarreg.setSelectedIndex(-1);
        jCmbBxDdUfPercurso.setSelectedIndex(-1);

        //--------------------------emissor-----------------------------
        /*jFldCodFilial.setText("");
        jFldEmtCNPJ.setText("");
        jFldEmtInscEstadual.setText("");
        jFldEmtRazaoSocial.setText("");
        jFldEmtNomeFantasia.setText("");
        jFldEmtLogradouro.setText("");
        jFldEmtNumero.setText("");
        jFldEmtComplemento.setText("");
        jFldEmtBairro.setText("");
        jFldEmtCep.setText("");
        
        jCmbBxEmtPais.setSelectedIndex(-1);
        jCmbBxEmtUf.setSelectedIndex(-1);
        jCmbBxEmtMunicipio.setSelectedIndex(-1);

        jFldEmtTelefone.setText("");
        jFldEmtEmail.setText("");*/
        //--------------------------rodoviario-----------------------------
        jFldRdvCiot.setText("");
        jRadioCpfCiot.setSelected(true);
        jFldRdvResponsavelCiot.setText("");
        jFldRdvCodContratante.setText("");
        jFldRdvNomeContratante.setText("");
        jFldRdvCpfContratante.setText("");
        jFldRdvCnpjContratante.setText("");
        
        jFldRdvRntrc.setText("");
        jFldRdvCiot.setText("");
        jFldRdvCodAgendamentoPorto.setText("");
        jFldRdvCodVeic.setText("");
        jLblRdvTpCarroceria.setText("");
        jLblRdvPlaca.setText("");
        jLblRdvTaraKG.setText("0 KG");
        jLblRdvRenavam.setText("");
        jLblRdvUFVeic.setText("");
        jLblRdvCapacidadeKG.setText("0 KG");
        jLblRdvCapacidadeM3.setText("0 M3");
        jLblRdvTpRodado.setText("");

        jLblRdvUFVeic.setText("");
        jFldRdvCodProp.setText("");
        jLblRdvPropietario.setText("");
        jLblRdvTpProprietario.setText("");
        jLblRdvCpfProprietario.setText("");
        jLblRdvCnpjProprietario.setText("");
        jLblRdvRntrcProprietario.setText("");
        jLblRdvUFVeic.setText("");
        jLblRdvInscEstProprietario.setText("");

        jLblRdvCondutor.setText("");
        jLblRdvCpfCondutor.setText("");
        
        jFldRdvCodPropReboque.setText("");
        jLblRdvPropietarioReboque.setText("");
        jLblRdvTpProprietarioReboque.setText("");
        jLblRdvCpfProprietarioReboque.setText("");
        jLblRdvCnpjProprietarioReboque.setText("");
        jLblRdvRntrcProprietarioReboque.setText("");
        jLblRdvInscEstProprietarioReboque.setText("");
        jChckBxRdvInformarEmitenteReboque.setSelected(false);
        jChckBxRdvInformarEmitenteReboque.setEnabled(false);


        //--------------------------aquaviario-----------------------------
        jFldAquaCodInterno.setText("");
        jFldAquaIdEmb.setText("");
        jLblAquaNomeEmbarcacao.setText("");
        jLblAquaTpEmb.setText("");
        
        jFldAquaCodPrtEmbarque.setText("");
        jFldAquaCodPrtDestino.setText("");
        jFldAquaNrViagem.setText("");

        //----------------------informacoes documento------------------------
        jTabEditInformacoesDocumento.setSelectedIndex(0);

        jCmbBxDocMunDescarreg.removeAllItems();
        jCmbBxDocMunDocumento.removeAllItems();
        jCmbBxDocUfMunDescarreg.removeAllItems();
        jCmbBxDocUfMunDocumento.removeAllItems();

        //------------------------totalizadores------------------------------
        jFldTotQtdCte.setText("0");
        jFldTotQtdNFe.setText("0");
        jFldTotVlTotalMercadoria.setText("0,00");
        jCmbBxTotCodUnMedidaPeso.setSelectedIndex(0);
        jFldTotQtdPesoBrutoTotal.setText("0,00");

        //------------------------inf. adicionais------------------------------
        jTxtAreaInfoAdicionaisFisco.setText("");
        jTxtAreaInfoAdicionaisContribuinte.setText("");

        LimpaTabela(jTableAquaInfoEmbComboio);
        LimpaTabela(jTableAquaInfoTermDescarreg);
        LimpaTabela(jTableAquanInfUnVazia);
        LimpaTabela(jTableDdMunicipioLocalCarreg);
        LimpaTabela(jTableDocCte);
        LimpaTabela(jTableDdUfPercurso);
        LimpaTabela(jTableDocMDFe);
        LimpaTabela(jTableDocMunDescarreg);
        LimpaTabela(jTableDocNFe);
        LimpaTabela(jTableRdvCIOT);
        LimpaTabela(jTableRdvContratante);
        LimpaTabela(jTableRdvCondutores);
        LimpaTabela(jTableRdvInfoReboque);
        LimpaTabela(jTableRdvInfoValePedagio);
        LimpaTabela(jTableTotAutorizados);
        LimpaTabela(jTableTotNrLacre);

    }

    /**
     * Método que verifica se os campos obrigatórios do cadastro foram
     * preechidos e retorna um valor boolean 'True' se sim e 'False' se não.
     */
    public boolean VerificaField() {
        LimpaTabela(jTblErroMsg);
        DefaultTableModel dtm = (DefaultTableModel) jTblErroMsg.getModel();
        boolean Verifica = true;

        if (jFldDdSerie.getText().length() == 0) {

            dtm.addRow(new Object[]{"Erro", "Dados", "Série", "Campo Obrigatório não preechido!"});

            Verifica = false;
        }

        if (jCmbBxDdMDFeUf.getSelectedIndex() == -1) {

            dtm.addRow(new Object[]{"Erro", "Dados", "UF", "Campo Obrigatório não preechido!"});

            Verifica = false;
        }

        if (jCmbBxDdTpEmitente.getSelectedIndex() == -1) {

            dtm.addRow(new Object[]{"Erro", "Dados", "Tipo de Emitente", "Campo Obrigatório não preechido!"});

            Verifica = false;
        }

        if (jCmbBxDdModalidade.getSelectedIndex() == -1) {

            dtm.addRow(new Object[]{"Erro", "Dados", "Modalidade", "Campo Obrigatório não preechido!"});

            Verifica = false;
        }

        if (jCmbBxDdFormaEmissao.getSelectedIndex() == -1) {

            dtm.addRow(new Object[]{"Erro", "Dados", "Forma de Emissão", "Campo Obrigatório não preechido!"});

            Verifica = false;
        }

        if (jTableDdMunicipioLocalCarreg.getRowCount() == 0) {

            dtm.addRow(new Object[]{"Erro", "Dados", "Local de Carregamento", "Campo Obrigatório não preechido!"});

            Verifica = false;
        }

        if (jCmbBxDdUfLocalDescarreg.getSelectedIndex() == -1) {

            dtm.addRow(new Object[]{"Erro", "Dados", "Local de Descarregamento", "Campo Obrigatório não preechido!"});

            Verifica = false;
        }

        if (jCmbBxDdModalidade.getSelectedIndex() == 0) {
            if (jFldRdvCodVeic.getText().length() == 0) {

                dtm.addRow(new Object[]{"Erro", "Rodoviário/Veículo de Tração", "Código", "Campo Obrigatório não preechido!"});

                Verifica = false;
            }
            /*else if (jLblRdvPropietario.getText().length() == 0) {
                JOptionPane.showMessageDialog(null, "Insira o código do proprietário!");
                jTabEdit.setSelectedIndex(2);
                jTabEditRodoviarios.setSelectedIndex(0);
                jFldRdvCodProp.requestFocus();
                return false;
            } */
            if (jTableRdvCondutores.getRowCount() == 0) {
                dtm.addRow(new Object[]{"Erro", "Rodoviário/Condutores", "Código", "Inclua no mínimo 1 Condutor!"});
                Verifica = false;
            }
        } else if (jCmbBxDdModalidade.getSelectedIndex() == 1) {
            
            if (jFldAquaIdEmb.getText().length() == 0) {

                dtm.addRow(new Object[]{"Erro", "Aquaviário/Informações", "Código", "Campo Obrigatório não preechido!"});

                Verifica = false;
            }

            if (jFldAquaCodPrtEmbarque.getText().length() == 0) {

                dtm.addRow(new Object[]{"Erro", "Aquaviário/Informações", "Código do Porto de Embarque", "Campo Obrigatório não preechido!"});

                Verifica = false;
            }

            if (jFldAquaCodPrtDestino.getText().length() == 0) {

                dtm.addRow(new Object[]{"Erro", "Aquaviário/Informações", "Código do Porto de Destino", "Campo Obrigatório não preechido!"});

                Verifica = false;
            }

            if (jFldAquaNrViagem.getText().length() == 0) {

                dtm.addRow(new Object[]{"Erro", "Aquaviário/Informações", "Número da Viagem", "Campo Obrigatório não preechido!"});

                Verifica = false;
            }

            if (jTableAquaInfoTermCarreg.getRowCount() == 0) {

                dtm.addRow(new Object[]{"Erro", "Aquaviário/Terminais de Carregamento", "Código", "Inclua no mínimo 1 Terminal de Carregamento!"});

                Verifica = false;
            }

            if (jTableAquaInfoTermDescarreg.getRowCount() == 0) {

                dtm.addRow(new Object[]{"Erro", "Aquaviário/Terminais de Descarregamento", "Código", "Inclua no mínimo 1 Terminal de Descarregamento!"});

                Verifica = false;
            }

            if (jTableAquaInfoEmbComboio.getRowCount() == 0) {

                dtm.addRow(new Object[]{"Erro", "Aquaviário/Embarcações de Comboio", "Código da Embarcação de Comboio", "Inclua no mínimo 1 Terminal de Comboio!"});

                Verifica = false;
            }

            if (jFldTotVlTotalMercadoria.getText().length() == 0) {

                dtm.addRow(new Object[]{"Erro", "Totalizadores", "Valor Total da Mercadoria/Carga Transportada", "Campo Obrigatório não preechido!"});

                Verifica = false;
            }

            if (jFldTotQtdPesoBrutoTotal.getText().length() == 0) {

                dtm.addRow(new Object[]{"Erro", "Totalizadores", "Peso Bruto Total da Mercadoria/Carga Transportada", "Campo Obrigatório não preechido!"});

                Verifica = false;
            }
        }

        return Verifica;

    }

    public void HabilitarComponentes(Boolean habilitar) {
        //--------------------------dados---------------------------------------------
        for (Component comp : jPnlDadosMDFe.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : jPnlDdLocalCarregamento.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : jPnlDdLocalDescarregamento.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : jPnlDdUfDePercurso.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : jPnlDdIncluirUfPercurso.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : jPnlDdMunicipioLocalCarreg.getComponents()) {
            comp.setEnabled(habilitar);
        }

        //------------------------rodoviario-------------------------------
        
        for (Component comp : TabAgReguladora.getComponents()) {
            comp.setEnabled(habilitar);
        }
        
        for (Component comp : jPnlInfCiot.getComponents()) {
            comp.setEnabled(habilitar);
        }
        
        for (Component comp : jPnlRespCiot.getComponents()) {
            comp.setEnabled(habilitar);
        }
        
        for (Component comp : jPnlContratante.getComponents()) {
            comp.setEnabled(habilitar);
        }
        
        for (Component comp : TabVeiculoTracao.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : jPnlRdvVeiculoTracao.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : jPnlRdvProprietário.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : jPnlRdvCondutores.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : jPnlRdvInfoVeic.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : jPnlRdvInfoValePedagio.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : jPnlLacresRodo.getComponents()) {
            comp.setEnabled(habilitar);
        }
        
        //------------------------aquaviario------------------------------

        /* for (Component comp : jPnlAquaviario.getComponents()) {
            comp.setEnabled(habilitar);
        }*/
        for (Component comp : TabTerminalCarregamento.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : TabTerminalDescarregamento.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : TabEmbarcacaoComboio.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : TabUnidadeCargaVazia.getComponents()) {
            comp.setEnabled(habilitar);
        }

        //--------------------------inf. documentos----------------------------
        for (Component comp : TabMunicipiosDescarreg.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : TabCTe.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : jPnlDocQtdCte.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : TabNFe.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : jPnlDocQtdNFe.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : TabMDFeReferenciado.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : jPnlDocQtdMDFe.getComponents()) {
            comp.setEnabled(habilitar);
        }

        //--------------------------totalizadores------------------------------
        for (Component comp : jPnlTotaisFornecimento.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : jPnlTotLacres.getComponents()) {
            comp.setEnabled(habilitar);
        }

        for (Component comp : jPnlDownload.getComponents()) {
            comp.setEnabled(habilitar);
        }

        //--------------------------Infomaçoes Adicionais-----------------------
        for (Component comp : TabInfoAdicionais.getComponents()) {
            comp.setEnabled(habilitar);
        }
        
        for (Component comp : jPnlRdvInfoSeguro.getComponents()) {
            comp.setEnabled(habilitar);
        }
        

        jTxtAreaInfoAdicionaisFisco.setEnabled(habilitar);
        jTxtAreaInfoAdicionaisContribuinte.setEnabled(habilitar);
    }

    public String DataFormatadaMDFe(String data) {
        String dataString = null;
        DateFormat sdf = new SimpleDateFormat("dd/MM/yyyy'T'HH:mm:ss");
        java.sql.Date DateSql = null;
        if ((data.length() != 0) || (!data.equals(""))) {
            //se nao for, converte a data para sql date e concatena as aspas simples
            dataString = sdf.format(DateSql.parse(data));
            dataString = "'" + dataString + "'";
        }

        return dataString;
        //retorna a data
    }

    public static void Verifica_Existe_Pasta_MDFe() {

        File diretorio = new File("C:\\InterageSE\\MDFe_XML\\MDFe_XML_NORMAL"); // BACKUP é uma pasta!
        if (!diretorio.exists()) {
            diretorio.mkdirs(); //mkdir() cria somente um diretório, mkdirs() cria diretórios e subdiretórios.
            System.out.println("Diretório não existente");
        } else {
            System.out.println("Diretório já existente");
        }

    }

    public static void Verifica_Existe_Pasta_MDFe_Assinada() {

        File diretorio = new File("C:\\InterageSE\\MDFe_XML\\MDFe_XML_ASS"); // BACKUP é uma pasta!
        if (!diretorio.exists()) {
            diretorio.mkdirs(); //mkdir() cria somente um diretório, mkdirs() cria diretórios e subdiretórios.
            System.out.println("Diretório não existente");
        } else {
            System.out.println("Diretório já existente");
        }

    }
    
    public static void ApagarArquivoMDFe() {

        //caminho do arquivo
        File arq = new File("C:\\InterageSE\\MDFe_XML\\ArquivoMDFe.xml");

        //verifica se existe        
        if (arq.delete()) {
            System.out.println("Deletei");
        } else {
            System.out.println("Não deletei");
        }

    }

    public static void GravarArquivoMDFe(String texto, String Nome) {

        String conteudo = texto;// 
        try {

            
            File file = new File("C:\\InterageSE\\MDFe_XML\\MDFe_XML_NORMAL\\"+Nome+".xml");
            if(file.exists()){
              file.delete();
              // o true significa q o arquivo será constante  
              FileWriter x = new FileWriter("C:\\InterageSE\\MDFe_XML\\MDFe_XML_NORMAL\\"+Nome+".xml", true);
              conteudo += "\r" + "\n"; // criando nova linha e recuo no arquivo           
              x.write(conteudo); // armazena o texto no objeto x, que aponta para o arquivo           
              x.close(); // cria o arquivo
            }else{
              // o true significa q o arquivo será constante  
              FileWriter x = new FileWriter("C:\\InterageSE\\MDFe_XML\\MDFe_XML_NORMAL\\"+Nome+".xml", true);
              conteudo += "\r" + "\n"; // criando nova linha e recuo no arquivo           
              x.write(conteudo); // armazena o texto no objeto x, que aponta para o arquivo           
              x.close(); // cria o arquivo   
            }
            //    JOptionPane.showMessageDialog(null, "Arquivo gravado com sucesso", "Concluído", JOptionPane.INFORMATION_MESSAGE);
        } // em caso de erro apreenta mensagem abaixo  
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
        }
    }

    //Formato do campo QtdRat
    public String FormataQtdRat(Double valor) {
        DecimalFormat dm = new DecimalFormat("##0.00");

        return dm.format(valor).replaceAll("\\,", ".");
    }

    //Formato do campo vCarga
    public String FormataValorCarga(Double valor) {
        DecimalFormat dm = new DecimalFormat("##############0.00");

        return dm.format(valor).replaceAll("\\,", ".");
    }

    //Formato do campo tCarga
    public String FormataTotalCarga(Double valor) {
        DecimalFormat dm = new DecimalFormat("############0.0000");

        return dm.format(valor).replaceAll("\\,", ".");
    }
    
    //Formato do campo vVale
    public String FormataValorVale(Double valor) {
        DecimalFormat dm = new DecimalFormat("############0.00");

        return dm.format(valor).replaceAll("\\,", ".");
    }

    public String criaXMLold(String Numero, String Fil, String Tag) throws SQLException, InstantiationException, IllegalAccessException {
        String nomeArq = "gerado.xml";
        String texto = "";
        
        //Formato decimal para as cargas
//        DecimalFormat FormataCarga = new DecimalFormat("0,00#.##");
        //Formato de data do documento
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");

        //tentando criar arquivo
        try {

            Conectar.ConectarBD();
            System.out.println("SELECT * FROM MDFE_DADOS  WHERE DAD_NUMERO ='" + Numero + "' and EMIT_CODFIL = '" + Fil + "' and RGEVENTO <> '3'");
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_DADOS  WHERE DAD_NUMERO ='" + Numero + "' and EMIT_CODFIL = '" + Fil + "' and RGEVENTO <> '3'");
            Conectar.result.first();

            String sDAD_MODALIDADE    = Conectar.result.getString("DAD_MODALIDADE");
            String sLOCAL_DESC        = Conectar.result.getString("DAD_LOCAL_DESCARREGAMENTO");
            Date sDAD_DTINICIO        = Conectar.result.getDate("DAD_DTINICIO");
            String sDAD_CHAVE         = Conectar.result.getString("DAD_CHAVE");
            String sDAD_COD_UF        = BuscaCodUf(Conectar.result.getString("DAD_UF"));

            String sEMIT_CODFIL       = Conectar.result.getString("EMIT_CODFIL");
            String sEMIT_CNPJ         = Conectar.result.getString("EMIT_CNPJ");
            String sEMIT_IE           = Conectar.result.getString("EMIT_IE");
            String sEMIT_RAZAOSOC     = Conectar.result.getString("EMIT_RAZAOSOC");
            String sEMIT_FANTASIA     = Conectar.result.getString("EMIT_FANTASIA");
            String sEMIT_LOGRADOURO   = Conectar.result.getString("EMIT_LOGRADOURO");
            String sEMIT_NR           = Conectar.result.getString("EMIT_NR");
            String sEMIT_COMP         = Conectar.result.getString("EMIT_COMP");
            String sEMIT_BAIRRO       = Conectar.result.getString("EMIT_BAIRRO");
            String sEMIT_CEP          = Conectar.result.getString("EMIT_CEP");
            String sEMIT_PAIS         = Conectar.result.getString("EMIT_PAIS");
            String sEMIT_UF           = Conectar.result.getString("EMIT_UF");

            String sEMIT_COD_MUN      = Conectar.result.getString("EMIT_COD_MUN");
            String sEMIT_MUN          = Conectar.result.getString("EMIT_MUN");
            String sEMIT_TEL          = Conectar.result.getString("EMIT_TEL");
            String sEMIT_EMAIL        = Conectar.result.getString("EMIT_EMAIL");

            String sROD_RNTRC         = Conectar.result.getString("ROD_RNTRC");
            String sROD_CIOT          = Conectar.result.getString("ROD_CIOT");
            String sROD_COD_AG_PORTO  = Conectar.result.getString("ROD_COD_AG_PORTO");
            String sROD_COD_INT_VEIC  = Conectar.result.getString("ROD_COD_INT_VEIC");
            String sROD_TP_CARROCERIA = Conectar.result.getString("ROD_TP_CARROCERIA");
            String sROD_PLACA         = Conectar.result.getString("ROD_PLACA");
            String sROD_TARA          = Conectar.result.getString("ROD_TARA");
            String sROD_RENAVAM       = Conectar.result.getString("ROD_RENAVAM");
            String sROD_UF            = Conectar.result.getString("ROD_UF");
            String sROD_TP_RODADO     = Conectar.result.getString("ROD_TP_RODADO");
            String sROD_CAPACIDADE_KG = Conectar.result.getString("ROD_CAPACIDADE_KG");
            String sROD_CAPACIDADE_M3 = Conectar.result.getString("ROD_CAPACIDADE_M3");
            String sPPT_CODPROP       = Conectar.result.getString("PPT_CODPROP");
            String sPROPIETARIO       = Conectar.result.getString("PROPIETARIO");
            String sPPT_NOME          = Conectar.result.getString("PPT_NOME");
            String sPPT_CPF           = Conectar.result.getString("PPT_CPF");
            String sPPT_CNPJ          = Conectar.result.getString("PPT_CNPJ");
            String sPPT_RNTRC         = Conectar.result.getString("PPT_RNTRC");
            String sPPT_IE            = Conectar.result.getString("PPT_IE");
            String sPPT_UF            = Conectar.result.getString("PPT_UF");

            String sAQU_COD_AGENCIA   = Conectar.result.getString("AQU_COD_AGENCIA");
            String sAQU_NOME_AGENCIA  = Conectar.result.getString("AQU_NOME_AGENCIA");
            String sAQU_CNPJ_AGENCIA_NAV = Conectar.result.getString("AQU_CNPJ_AGENCIA_NAV");
            String sAQU_COD_INT_EMB   = Conectar.result.getString("AQU_COD_INT_EMB");
            String sAQU_COD_EMB       = Conectar.result.getString("AQU_COD_EMB");
            String sAQU_COD_TP_EMB    = Conectar.result.getString("AQU_COD_TP_EMB");
            String sAQU_NOME_EMB      = Conectar.result.getString("AQU_NOME_EMB");
            String sAQU_NR_VIAGEM     = Conectar.result.getString("AQU_NR_VIAGEM");
            String sAQU_COD_PORTO_EMB = Conectar.result.getString("AQU_COD_PORTO_EMB");
            String sAQU_COD_PORTO_DES = Conectar.result.getString("AQU_COD_PORTO_DES");

            String sTOT_QTD_CTE       = Conectar.result.getString("TOT_QTD_CTE");
            String sTOT_QTD_NFE       = Conectar.result.getString("TOT_QTD_NFE");
            String sTOT_QTD_NFE_MOD1  = Conectar.result.getString("TOT_QTD_NFE_MOD1");
            Double sTOT_TOT_MERC_TRANSPORTADA = Conectar.result.getDouble("TOT_TOT_MERC_TRANSPORTADA");
            String sTOT_UN_MEDIDA_PESO = Conectar.result.getString("TOT_UN_MEDIDA_PESO");
            Double sTOT_PESO_BRUTO = Conectar.result.getDouble("TOT_PESO_BRUTO");

            String sINF_FISCO = Conectar.result.getString("INF_FISCO");
            String sINF_CONTR = Conectar.result.getString("INF_CONTR");

            Formatter saida = new Formatter(nomeArq);
            
            if(Tag.equals("C")){
               texto = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
            }else if(Tag.equals("S")){
              
            }
            
            
            texto += "<MDFe xmlns=\"http://www.portalfiscal.inf.br/mdfe\">\n";
            texto += "<infMDFe Id=\"MDFe" + sDAD_CHAVE + "\" versao=\"1.00\">\n";
            texto += "<ide>\n";
            texto += "<cUF>" + sDAD_COD_UF + "</cUF>\n";
            texto += "<tpAmb>" + 2 + "</tpAmb>\n";
            texto += "<tpEmit>" + Conectar.result.getString("DAD_TP_EMITENTE") + "</tpEmit>\n";
            texto += "<mod>" + Conectar.result.getString("DAD_MODELO") + "</mod>\n";
            texto += "<serie>" + Conectar.result.getInt("DAD_SERIE") + "</serie>\n";
            texto += "<nMDF>" + Conectar.result.getInt("DAD_NUMERO") + "</nMDF>\n";
            texto += "<cMDF>" + Conectar.result.getString("DAD_CODNUMERICO") + "</cMDF>\n";
            texto += "<cDV>" + Conectar.result.getString("DAD_DV") + "</cDV>\n";
            texto += "<modal>" + Conectar.result.getString("DAD_MODALIDADE") + "</modal>\n";
            texto += "<dhEmi>" + sdf.format(Conectar.result.getDate("DAD_DTEMISSAO")) + "</dhEmi>\n";//CONDIÇÃO
            texto += "<tpEmis>" + Conectar.result.getString("DAD_FORMA_EMISSAO") + "</tpEmis>\n";
            texto += "<procEmi>" + 0 + "</procEmi>\n";
            texto += "<verProc>" + 1 + "</verProc>\n";

            Conectar.result2 = Conectar.stam.executeQuery("SELECT * FROM MDFE_LOCAL_CARREGAMENTO  WHERE DAD_CODIGO ='" + Numero + "'");
            Conectar.result2.first();
            texto += "<UFIni>" + Conectar.result2.getString("UF") + "</UFIni>\n";

            texto += "<UFFim>" + sLOCAL_DESC + "</UFFim>\n";

            Conectar.result2 = Conectar.stam.executeQuery("SELECT * FROM MDFE_LOCAL_CARREGAMENTO  WHERE DAD_CODIGO ='" + Numero + "'");
            while (Conectar.result2.next()) {
                texto += "<infMunCarrega>\n";
                texto += "<cMunCarrega>" + Conectar.result2.getString("COD_MUNICIPIO") + "</cMunCarrega>\n";
                texto += "<xMunCarrega>" + Conectar.result2.getString("MUNICIPIO") + "</xMunCarrega>\n";
                texto += "</infMunCarrega>\n";
            }

            Conectar.result3 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_LOCAL_PERCURSO  WHERE DAD_CODIGO ='" + Numero + "'");
            while (Conectar.result3.next()) {
                texto += "<infPercurso>\n";
                texto += "<UFPer>" + Conectar.result3.getString("UF") + "</UFPer>\n";
                texto += "</infPercurso>\n";
            }
            if (sDAD_DTINICIO != null) {
                texto += "<dhIniViagem>" + sdf.format(sDAD_DTINICIO) + "</dhIniViagem>\n";
            }
            texto += "</ide>\n";

            //---------------Dados Emitente----------------------------------------            
            texto += "<emit>\n";
            texto += "<CNPJ>" + sEMIT_CNPJ + "</CNPJ>\n";
            texto += "<IE>" + sEMIT_IE + "</IE>\n";
            texto += "<xNome>\n";
            texto += sEMIT_RAZAOSOC + "\n";
            texto += "</xNome>\n";
            if (sEMIT_FANTASIA != null && sEMIT_FANTASIA.length() > 0) {
                texto += "<xFant>" + sEMIT_FANTASIA + "</xFant>\n";
            }
            texto += "<enderEmit>\n";
            texto += "<xLgr>" + sEMIT_LOGRADOURO + "</xLgr>\n";
            texto += "<nro>" + sEMIT_NR + "</nro>\n";
            if (sEMIT_COMP != null && sEMIT_COMP.length() > 0) {
                texto += "<xCpl>" + sEMIT_COMP + "</xCpl>\n";
            }
            texto += "<xBairro>" + sEMIT_BAIRRO + "</xBairro>\n";
            texto += "<cMun>" + sEMIT_COD_MUN + "</cMun>\n";
            texto += "<xMun>" + sEMIT_MUN + "</xMun>\n";
            if (sEMIT_CEP != null && sEMIT_CEP.length() > 0) {
                texto += "<CEP>" + sEMIT_CEP + "</CEP>\n";
            }
            texto += "<UF>" + sEMIT_UF + "</UF>\n";
            if (sEMIT_TEL != null && sEMIT_TEL.length() > 0) {
                texto += "<fone>" + sEMIT_TEL + "</fone>\n";
            }
            if (sEMIT_EMAIL != null && sEMIT_EMAIL.length() > 0) {
                texto += "<email>" + sEMIT_EMAIL + "</email>\n";
            }
            texto += "</enderEmit>\n";
            texto += "</emit>\n";
            //------------------------------------------------------------------ 
            //----------Verifica se é Rodoviario ou aquaviario------------------
            if (sDAD_MODALIDADE.equals("1")) {//Rodviario
                texto += "<infModal versaoModal=\"3.00\">\n";
                texto += "<rodo>\n";
                if (sPPT_CODPROP == null) {//n é prop de terceiros
                  texto += "<RNTRC>" + sROD_RNTRC + "</RNTRC>\n";//
                } else {
                
                }
                
                texto += "<CIOT>" + sROD_CIOT + "</CIOT>\n";

                //Dados do Veiculo
                texto += "<veicTracao>\n";
                texto += "<cInt>"    + sROD_COD_INT_VEIC  + "</cInt>\n";
                texto += "<placa>"   + sROD_PLACA         + "</placa>\n";
                texto += "<RENAVAM>" + sROD_RENAVAM       + "</RENAVAM>\n";
                texto += "<tara>"    + sROD_TARA          + "</tara>\n";
                texto += "<capKG>"   + sROD_CAPACIDADE_KG + "</capKG>\n";
                texto += "<capM3>"   + sROD_CAPACIDADE_M3 + "</capM3>\n";

                //Verifica se é Proprio
                if (sPPT_CODPROP == null) {

                } else {//terceiros
                    texto += "<prop>\n";
                    if(sPPT_CPF.equals("") || (sPPT_CPF == null) ){
                       texto += "<CNPJ>"  + sPPT_CPF    + "</CNPJ>\n";
                    }
                    
                    if(sPPT_CNPJ.equals("")|| (sPPT_CNPJ == null)){
                       texto += "<CPF>"   + sPPT_CPF    + "</CPF>\n";
                    }
                    
                    texto += "<RNTRC>"  + sPPT_RNTRC   + "</RNTRC>\n";
                    texto += "<xNome>"  + sPPT_NOME    + "</xNome>\n";
                    texto += "<IE>"     + sPPT_IE      + "</IE>\n";
                    texto += "<UF>"     + sPPT_UF      + "</UF>\n";
                    texto += "<tpProp>" + sPROPIETARIO + "</tpProp>\n";
                    texto += "</prop>\n";
                }

                Conectar.result4 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_CONDUTORES  WHERE DAD_CODIGO ='" + Numero + "'");
                while (Conectar.result4.next()) {
                    texto += "<condutor>\n";
                    texto += "<xNome>" + Conectar.result4.getString("NOME") + "</xNome>\n";
                    texto += "<CPF>" + Conectar.result4.getString("CPF") + "</CPF>\n";                    
                    texto += "</condutor>\n";
                }

                texto += "<tpRod>" + sROD_TP_RODADO + "</tpRod>\n";
                texto += "<tpCar>" + sROD_TP_CARROCERIA + "</tpCar>\n";
                texto += "<UF>" + sROD_UF + "</UF>\n";
                texto += "</veicTracao>\n";

                Conectar.result5 = Conectar.stam.executeQuery("SELECT * FROM   MDFE_REBOQUE WHERE DAD_CODIGO ='" + Numero + "'");
                while (Conectar.result5.next()) {
                    texto += "<veicReboque>\n";
                    texto += "<cInt>"    + Conectar.result5.getString("CODVEIC")       + "</cInt>\n";
                    texto += "<placa>"   + Conectar.result5.getString("PLACA")         + "</placa>\n";
                    texto += "<RENAVAM>" + Conectar.result5.getString("RENAVAM")       + "</RENAVAM>\n";
                    texto += "<tara>"    + Conectar.result5.getString("TARA")          + "</tara>\n";
                    texto += "<capKG>"   + Conectar.result5.getString("CAPACIDADE_KG") + "</capKG>\n";
                    texto += "<capM3>"   + Conectar.result5.getString("CAPACIDADE_M3") + "</capM3>\n";
                    texto += "<tpCar>"   + Conectar.result5.getString("TP_CARROCERIA") + "</tpCar>\n";
                    texto += "<UF>"      + Conectar.result5.getString("ESTADO")        + "</UF>\n";
                    texto += "</veicReboque>\n";
                    
                    
                    
                    //Verifica se é Proprio
                    if (Conectar.result5.getString("COD_PROPIETARIO") == null){

                    } else {//terceiros
                        texto += "<prop>\n";
                        if(Conectar.result5.getString("PROP_CPF").equals("") || Conectar.result5.getString("PROP_CPF") == null){
                          texto += "<CNPJ>"   + Conectar.result5.getString("PROP_CNPJ") + "</CNPJ>\n";                          
                        }
                        
                        if(Conectar.result5.getString("PROP_CNPJ").equals("") || Conectar.result5.getString("PROP_CNPJ") == null){
                           texto += "<CPF>"    + Conectar.result5.getString("PROP_CPF") + "</CPF>\n";//
                        }
                        
                        
                        texto += "<RNTRC>"  + Conectar.result5.getString("PROP_RNTC") + "</RNTRC>\n";
                        texto += "<xNome>"  + Conectar.result5.getString("PROP_NOME") + "</xNome>\n";
                        
                        if(Conectar.result5.getString("PROP_CPF").equals("") || Conectar.result5.getString("PROP_CPF") == null){
                          texto += "<IE>"     + Conectar.result5.getString("PROP_IE")   + "</IE>\n";
                        }
                        
                        texto += "<UF>"     + Conectar.result5.getString("PROP_UF")   + "</UF>\n";
                        texto += "<tpProp>" + Conectar.result5.getString("PROP_TIPO") + "</tpProp>\n";
                        texto += "</prop>\n";
                    }
                    
                  
                }

                Conectar.result6 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_PEDAGIO WHERE DAD_CODIGO ='" + Numero + "'");
                texto += "<valePed>\n";
                while (Conectar.result6.next()) {
                    texto += "<disp>\n";
                    texto += "<CNPJForn>" + Conectar.result6.getString("CNPJ_EMP_FOR_PED") + "</CNPJForn>\n";
                    texto += "<CNPJPg>"   + Conectar.result6.getString("CNPJ_RESP_PAG_PED")+ "</CNPJPg>\n";
                    texto += "<nCompra>"  + Conectar.result6.getString("NR_COMPROVANTE")   + "</nCompra>\n";
                    texto += "</disp>\n";
                }
                texto += "</valePed>\n";

                if (sROD_COD_AG_PORTO != null && sROD_COD_AG_PORTO.length() > 0) {
                    texto += "<codAgPorto>" + sROD_COD_AG_PORTO + "</codAgPorto>\n";
                }

                texto += "</rodo>\n";
                texto += "</infModal>\n";

            } else if (sDAD_MODALIDADE.equals("2")) {//aquaviario
                texto += "<infModal versaoModal=\"3.00\">\n";
                texto += "<aquav>\n";
                texto += "<CNPJAgeNav>" + sAQU_CNPJ_AGENCIA_NAV + "</CNPJAgeNav>\n";
                texto += "<tpEmb>"      + sAQU_COD_TP_EMB       + "</tpEmb>\n";
                texto += "<cEmbar>"     + sAQU_COD_EMB          + "</cEmbar>\n";
                texto += "<xEmbar>"     + sAQU_NOME_EMB         + "</xEmbar>\n";
                texto += "<nViag>"      + sAQU_NR_VIAGEM        + "</nViag>\n";
                texto += "<cPrtEmb>"    + sAQU_COD_PORTO_EMB    + "</cPrtEmb>\n";
                texto += "<cPrtDest>"   + sAQU_COD_PORTO_DES    + "</cPrtDest>\n";

                Conectar.result7 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_TERMINAL_CARREGAMENTO WHERE DAD_CODIGO ='" + Numero + "'");
                while (Conectar.result7.next()) {
                    texto += "<infTermCarreg>\n";
                    texto += "<cTermCarreg>" + Conectar.result7.getString("CODIGO")                + "</cTermCarreg>\n";
                    texto += "<xTermCarreg>" + Conectar.result7.getString("NOME_TER_CARREGAMENTO") + "</xTermCarreg>\n";
                    texto += "</infTermCarreg>\n";
                }

                Conectar.result8 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_TERMINAL_DESCARREGA WHERE DAD_CODIGO ='" + Numero + "'");
                while (Conectar.result8.next()) {
                    texto += "<infTermDescarreg>\n";
                    texto += "<cTermDescarreg>" + Conectar.result8.getString("CODIGO")                   + "</cTermDescarreg>\n";
                    texto += "<xTermDescarreg>" + Conectar.result8.getString("NOME_TER_DESCARREGAMENTO") + "</xTermDescarreg>\n";
                    texto += "</infTermDescarreg>\n";
                }

                Conectar.result9 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_TERMINAL_COMBOIO WHERE DAD_CODIGO ='" + Numero + "'");
                while (Conectar.result9.next()) {
                    texto += "<infEmbComb>\n";
                    texto += "<cEmbComb>" + Conectar.result9.getString("CODIGO_COBOIO") + "</cEmbComb>\n";
                    texto += "</infEmbComb>\n";
                }

                Conectar.result10 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_TERMINAL_UNCARGAVAZIA WHERE DAD_CODIGO ='" + Numero + "'");
                while (Conectar.result10.next()) {
                    texto += "<infUnidCargaVazia>\n";
                    texto += "<idUnidCargaVazia>" + Conectar.result10.getString("CODIGO_ID") + "</idUnidCargaVazia>\n";
                    texto += "<tpUnidCargaVazia>" + Conectar.result10.getString("TIPO")      + "</tpUnidCargaVazia>\n";
                    texto += "</infUnidCargaVazia>\n";
                }

                texto += "</aquav>\n";
                texto += "</infModal>\n";
            }

//-----------------------------------------------------------------------
            texto += "<infDoc>\n";
            Statement stam11 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
            Conectar.result11 = stam11.executeQuery("SELECT * FROM  MDFE_MUN_DESCARREG WHERE DAD_CODIGO ='" + Numero + "'");
            while (Conectar.result11.next()) {
                texto += "<infMunDescarga>\n";
                texto += "<cMunDescarga>" + Conectar.result11.getString("COD_MUNICIPIO") + "</cMunDescarga>\n";
                texto += "<xMunDescarga>" + Conectar.result11.getString("MUNICIPIO") + "</xMunDescarga>\n";
                String sCOD_MUNICIPIO = Conectar.result11.getString("COD_MUNICIPIO");

                Statement stam12 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                Conectar.result12 = stam12.executeQuery("SELECT * FROM MDFE_DOCUMENTO WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'C'");
                while (Conectar.result12.next()) {
                    String sCODDOC = Conectar.result12.getString("CODDOC");
                    texto += "<infCTe>\n";
                    texto += "<chCTe>" + Conectar.result12.getString("CHAVE") + "</chCTe>\n";
                    if (Conectar.result12.getString("COD_BARRAS") != null && Conectar.result12.getString("COD_BARRAS").length() > 0) {
                        texto += "<SegCodBarra>" + Conectar.result12.getString("COD_BARRAS") + "</SegCodBarra>\n";
                    }
                    Statement stam13 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                    Conectar.result13 = stam13.executeQuery("SELECT * FROM MDFE_UN_TRANSPORTE WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'C' AND CODDOC ='" + sCODDOC + "'");
                    while (Conectar.result13.next()) {
                        String sCOD_TRANSP = Conectar.result13.getString("COD_TRANSP");
                        Double sQTD_RAT_TRANS = Conectar.result13.getDouble("QTD_RAT_TRANS");

                        texto += "<infUnidTransp>\n";
                        texto += "<tpUnidTransp>" + Conectar.result13.getString("TP_UN_TRANS") + "</tpUnidTransp>\n";
                        texto += "<idUnidTransp>" + Conectar.result13.getString("ID_UN_TRANS") + "</idUnidTransp>\n";

                        Statement stam14 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                        Conectar.result14 = stam14.executeQuery("SELECT * FROM MDFE_LACRES_TRANSPORTE WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'C' AND CODDOC ='" + sCODDOC + "' and COD_TRANSP ='" + sCOD_TRANSP + "'");
                        while (Conectar.result14.next()) {
                            texto += "<lacUnidTransp>\n";
                            texto += "<nLacre>" + Conectar.result14.getString("NR_LACRE") + "</nLacre>\n";
                            texto += "</lacUnidTransp>\n";
                        }

                        Statement stam15 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                        Conectar.result15 = stam15.executeQuery("SELECT * FROM MDFE_UN_CARGA  WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'C' AND CODDOC ='" + sCODDOC + "' and COD_TRANSP ='" + sCOD_TRANSP + "'");
                        while (Conectar.result15.next()) {
                            Double sQTD_RAT_CARGA = Conectar.result15.getDouble("QTD_RAT_CARGA");
                            String sCOD_CARGA = Conectar.result15.getString("COD_CARGA");

                            texto += "<infUnidCarga>\n";
                            texto += "<tpUnidCarga>" + Conectar.result15.getString("TP_UN_CARGA") + "</tpUnidCarga>\n";
                            texto += "<idUnidCarga>" + Conectar.result15.getString("ID_UN_CARGA") + "</idUnidCarga>\n";

                            Statement stam16 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                            Conectar.result16 = stam16.executeQuery("SELECT * FROM MDFE_LACRES_CARGA WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'C' AND CODDOC ='" + sCODDOC + "' and COD_CARGA ='" + sCOD_CARGA + "' AND COD_TRANSP ='" + sCOD_TRANSP + "'");
                            while (Conectar.result16.next()) {
                                texto += "<lacUnidCarga>\n";
                                texto += "<nLacre>" + Conectar.result16.getString("NR_LACRE") + "</nLacre>\n";
                                texto += "</lacUnidCarga>\n";
                            }

                            texto += "<qtdRat>" + FormataQtdRat(sQTD_RAT_CARGA) + "</qtdRat>\n";
                            texto += "</infUnidCarga>\n";

                        }

                        texto += "<qtdRat>" + FormataQtdRat(sQTD_RAT_TRANS) + "</qtdRat>\n";
                        texto += "</infUnidTransp>\n";
                    }
                    texto += "</infCTe>\n";
                }

                //Loop para pegar as nfe
                stam12 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                Conectar.result12 = stam12.executeQuery("SELECT * FROM MDFE_DOCUMENTO WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'N'");
                while (Conectar.result12.next()) {
                    String sCODDOC = Conectar.result12.getString("CODDOC");
                    texto += "<infNFe>\n";
                    texto += "<chNFe>" + Conectar.result12.getString("CHAVE") + "</chNFe>\n";

                    Statement stam13 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                    Conectar.result13 = stam13.executeQuery("SELECT * FROM MDFE_UN_TRANSPORTE WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'N' AND CODDOC ='" + sCODDOC + "'");
                    while (Conectar.result13.next()) {
                        String sCOD_TRANSP = Conectar.result13.getString("COD_TRANSP");
                        Double sQTD_RAT_TRANS = Conectar.result13.getDouble("QTD_RAT_TRANS");

                        texto += "<infUnidTransp>\n";
                        texto += "<tpUnidTransp>" + Conectar.result13.getString("TP_UN_TRANS") + "</tpUnidTransp>\n";
                        texto += "<idUnidTransp>" + Conectar.result13.getString("ID_UN_TRANS") + "</idUnidTransp>\n";

                        Statement stam14 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                        Conectar.result14 = stam14.executeQuery("SELECT * FROM MDFE_LACRES_TRANSPORTE WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'N' AND CODDOC ='" + sCODDOC + "' and COD_TRANSP ='" + sCOD_TRANSP + "'");
                        while (Conectar.result14.next()) {
                            texto += "<lacUnidTransp>\n";
                            texto += "<nLacre>" + Conectar.result14.getString("NR_LACRE") + "</nLacre>\n";
                            texto += "</lacUnidTransp>\n";
                        }

                        Statement stam15 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                        Conectar.result15 = stam15.executeQuery("SELECT * FROM MDFE_UN_CARGA  WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'N' AND CODDOC ='" + sCODDOC + "' and COD_TRANSP ='" + sCOD_TRANSP + "'");
                        while (Conectar.result15.next()) {
                            Double sQTD_RAT_CARGA = Conectar.result15.getDouble("QTD_RAT_CARGA");
                            String sCOD_CARGA = Conectar.result15.getString("COD_CARGA");

                            texto += "<infUnidCarga>\n";
                            texto += "<tpUnidCarga>" + Conectar.result15.getString("TP_UN_CARGA") + "</tpUnidCarga>\n";
                            texto += "<idUnidCarga>" + Conectar.result15.getString("ID_UN_CARGA") + "</idUnidCarga>\n";

                            Statement stam16 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                            Conectar.result16 = stam16.executeQuery("SELECT * FROM MDFE_LACRES_CARGA WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'N' AND CODDOC ='" + sCODDOC + "' and COD_CARGA ='" + sCOD_CARGA + "' AND COD_TRANSP ='" + sCOD_TRANSP + "'");
                            while (Conectar.result16.next()) {
                                texto += "<lacUnidCarga>\n";
                                texto += "<nLacre>" + Conectar.result16.getString("NR_LACRE") + "</nLacre>\n";
                                texto += "</lacUnidCarga>\n";
                            }

                            texto += "<qtdRat>" + FormataQtdRat(sQTD_RAT_CARGA) + "</qtdRat>\n";
                            texto += "</infUnidCarga>\n";

                        }

                        texto += "<qtdRat>" + FormataQtdRat(sQTD_RAT_TRANS) + "</qtdRat>\n";
                        texto += "</infUnidTransp>\n";
                    }
                    texto += "</infNFe>\n";
                }

                //Loop para pegar os MDFe
                stam12 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                Conectar.result12 = stam12.executeQuery("SELECT * FROM MDFE_DOCUMENTO WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'M'");
                while (Conectar.result12.next()) {
                    String sCODDOC = Conectar.result12.getString("CODDOC");
                    texto += "<infMDFeTransp>\n";
                    texto += "<chMDFe>" + Conectar.result12.getString("CHAVE") + "</chMDFe>\n";

                    Statement stam13 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                    Conectar.result13 = stam13.executeQuery("SELECT * FROM MDFE_UN_TRANSPORTE WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'M' AND CODDOC ='" + sCODDOC + "'");
                    while (Conectar.result13.next()) {
                        String sCOD_TRANSP = Conectar.result13.getString("COD_TRANSP");
                        Double sQTD_RAT_TRANS = Conectar.result13.getDouble("QTD_RAT_TRANS");

                        texto += "<infUnidTransp>\n";
                        texto += "<tpUnidTransp>" + Conectar.result13.getString("TP_UN_TRANS") + "</tpUnidTransp>\n";
                        texto += "<idUnidTransp>" + Conectar.result13.getString("ID_UN_TRANS") + "</idUnidTransp>\n";

                        Statement stam14 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                        Conectar.result14 = stam14.executeQuery("SELECT * FROM MDFE_LACRES_TRANSPORTE WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'M' AND CODDOC ='" + sCODDOC + "' and COD_TRANSP ='" + sCOD_TRANSP + "'");
                        while (Conectar.result14.next()) {
                            texto += "<lacUnidTransp>\n";
                            texto += "<nLacre>" + Conectar.result14.getString("NR_LACRE") + "</nLacre>\n";
                            texto += "</lacUnidTransp>\n";
                        }

                        Statement stam15 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                        Conectar.result15 = stam15.executeQuery("SELECT * FROM MDFE_UN_CARGA  WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'M' AND CODDOC ='" + sCODDOC + "' and COD_TRANSP ='" + sCOD_TRANSP + "'");
                        while (Conectar.result15.next()) {
                            Double sQTD_RAT_CARGA = Conectar.result15.getDouble("QTD_RAT_CARGA");
                            String sCOD_CARGA = Conectar.result15.getString("COD_CARGA");

                            texto += "<infUnidCarga>\n";
                            texto += "<tpUnidCarga>" + Conectar.result15.getString("TP_UN_CARGA") + "</tpUnidCarga>\n";
                            texto += "<idUnidCarga>" + Conectar.result15.getString("ID_UN_CARGA") + "</idUnidCarga>\n";

                            Statement stam16 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                            Conectar.result16 = stam16.executeQuery("SELECT * FROM MDFE_LACRES_CARGA WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'M' AND CODDOC ='" + sCODDOC + "' and COD_CARGA ='" + sCOD_CARGA + "' AND COD_TRANSP ='" + sCOD_TRANSP + "'");
                            while (Conectar.result16.next()) {
                                texto += "<lacUnidCarga>\n";
                                texto += "<nLacre>" + Conectar.result16.getString("NR_LACRE") + "</nLacre>\n";
                                texto += "</lacUnidCarga>\n";
                            }

                            texto += "<qtdRat>" + FormataQtdRat(sQTD_RAT_CARGA) + "</qtdRat>\n";
                            texto += "</infUnidCarga>\n";

                        }

                        texto += "<qtdRat>" + FormataQtdRat(sQTD_RAT_TRANS) + "</qtdRat>\n";
                        texto += "</infUnidTransp>\n";
                    }
                    texto += "</infMDFeTransp>\n";
                }

                texto += "</infMunDescarga>\n";
            }
            texto += "</infDoc>\n";
            //---------------------------------------------------------------------------

            texto += "<tot>\n";
            if (sTOT_QTD_CTE != null && !sTOT_QTD_CTE.equals("0")) {
                texto += "<qCTe>" + sTOT_QTD_CTE + "</qCTe>\n";
            }
            if (sTOT_QTD_NFE != null && !sTOT_QTD_NFE.equals("0")) {
                texto += "<qNFe>" + sTOT_QTD_NFE + "</qNFe>\n";
            }
            texto += "<vCarga>" + FormataValorCarga(sTOT_TOT_MERC_TRANSPORTADA) + "</vCarga>\n";
            texto += "<cUnid>" + sTOT_UN_MEDIDA_PESO + "</cUnid>\n";
            texto += "<qCarga>" + FormataTotalCarga(sTOT_PESO_BRUTO) + "</qCarga>\n";
            texto += "</tot>\n";

            // Statement stam17 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE,result.HOLD_CURSORS_OVER_COMMIT);
            System.out.println("SELECT * FROM MDFE_LACRES_TOTALIZADOR WHERE DAD_CODIGO = " + Numero + "");
            Conectar.result17 = Conectar.stam.executeQuery("SELECT * FROM MDFE_LACRES_TOTALIZADOR WHERE DAD_CODIGO = " + Numero + "");
            while (Conectar.result17.next()) {
                texto += "<lacres>\n";
                texto += "<nLacre>" + Conectar.result17.getString("NR_LACRE") + "</nLacre>\n";
                texto += "</lacres>\n";
            }

            // Statement stam18 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE,result.HOLD_CURSORS_OVER_COMMIT);
            Conectar.result18 = Conectar.stam.executeQuery("SELECT * FROM MDFE_DOWNLOAD WHERE DAD_CODIGO = " + Numero + "");
            while (Conectar.result18.next()) {
                texto += "<autXML>\n";
                if (Conectar.result18.getString("TIPO").equals("1")) {
                    texto += "<CPF>" + Conectar.result18.getString("DOCUMENTO") + "</CPF>\n";
                } else if (Conectar.result18.getString("TIPO").equals("2")) {
                    texto += "<CNPJ>" + Conectar.result18.getString("DOCUMENTO") + "</CNPJ>\n";
                }

                texto += "</autXML>\n";
            }

            if ((sINF_FISCO != null && sINF_FISCO.length() > 0) && (sINF_CONTR != null && sINF_CONTR.length() > 0)) {
                texto += "<infAdic>\n";
                if (sINF_FISCO != null && sINF_FISCO.length() > 0) {
                    texto += "<infAdFisco>" + sINF_FISCO + "</infAdFisco>\n";
                }
                if (sINF_CONTR != null && sINF_CONTR.length() > 0) {
                    texto += "<infCpl>" + sINF_CONTR + "</infCpl>\n";
                }
                texto += "</infAdic>\n";
            }

            texto += "</infMDFe>\n";
            texto += "</MDFe>\n";

            saida.format(texto);
            saida.close();
            System.out.println(texto);
           
            JOptionPane.showMessageDialog(null, "Arquivo '" + nomeArq + "' criado!", "Arquivo", 1);
            return texto;
        } catch (Exception erro) {
            erro.printStackTrace();
            JOptionPane.showMessageDialog(null, "Arquivo nao pode ser gerado! : " + erro, "Erro", 0);
            System.out.println("erro : " + erro);
            return "";
        }
      //  return texto;
    }
    
    
   
    public static void VerificaStatusXml(String dados) throws XmlPullParserException, IOException {
        XmlPullParserFactory factory = null;
        factory = XmlPullParserFactory.newInstance();

        factory.setNamespaceAware(true);
        XmlPullParser xpp = null;
        xpp = factory.newPullParser();
        xpp.setInput(new StringReader(dados));

        int eventType = 0;
        eventType = xpp.getEventType();

        String TagStartXml = null;
        String TagEndXml = null;

        while (eventType != XmlPullParser.END_DOCUMENT) {//"<foo>Hello World!</foo>"

            if (eventType == XmlPullParser.START_DOCUMENT) { //nr 1
                System.out.println("Start document");

            } else if (eventType == XmlPullParser.START_TAG) { // <foo> 1º /** nr 2

                TagStartXml = xpp.getName();
                if (TagStartXml.equals("")) {
                    System.out.println(TagStartXml);


                } else if (TagStartXml.equals("")) {
                    System.out.println(TagStartXml);


                } else if (eventType == XmlPullParser.END_TAG) {   // </foo> 3º nr 3
                    TagEndXml = xpp.getName();
                    System.out.println(TagEndXml);

                    if (TagEndXml.equals("xServ")) {
                        
                    }
                }

            } else if (eventType == XmlPullParser.TEXT) {
                ValorXml = xpp.getText();
                if (TagStartXml.equals("xMotivo")){
                    //cod_onlinepd = ValorXml;
                    System.out.println("xMotivo = " + ValorXml);                   
                    JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Status do Serviço", 1);
                }
                
                

            }
            eventType = xpp.next();

        }
    }

    public static void LerXmlProtocolo(String dados) throws XmlPullParserException, IOException {
        XmlPullParserFactory factory = null;
        factory = XmlPullParserFactory.newInstance();

        factory.setNamespaceAware(true);
        XmlPullParser xpp = null;
        xpp = factory.newPullParser();
        xpp.setInput(new StringReader(dados));

        int eventType = 0;
        eventType = xpp.getEventType();

        String TagStartXml = null;
        String TagEndXml = null;

        while (eventType != XmlPullParser.END_DOCUMENT) {//"<foo>Hello World!</foo>"

            if (eventType == XmlPullParser.START_DOCUMENT) { //nr 1
                System.out.println("Start document");

            } else if (eventType == XmlPullParser.START_TAG) { // <foo> 1º /** nr 2

                TagStartXml = xpp.getName();
                if (TagStartXml.equals("")) {
                    System.out.println(TagStartXml);


                } else if (TagStartXml.equals("")) {
                    System.out.println(TagStartXml);


                } else if (eventType == XmlPullParser.END_TAG) {   // </foo> 3º nr 3
                    TagEndXml = xpp.getName();
                    System.out.println(TagEndXml);

                    if (TagEndXml.equals("xServ")) {
                        
                    }
                }

            } else if (eventType == XmlPullParser.TEXT) {
                ValorXml = xpp.getText();
                if (TagStartXml.equals("xMotivo")){
                    //cod_onlinepd = ValorXml;
                    System.out.println("xMotivo = " + ValorXml);                   
                    JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Protocolo", 1);
                }
                
                

            }
            eventType = xpp.next();

        }
    }
    
    
    
    public static void LerXmlRecepcao(String dados) throws XmlPullParserException, IOException {
        XmlPullParserFactory factory = null;
        factory = XmlPullParserFactory.newInstance();

        factory.setNamespaceAware(true);
        XmlPullParser xpp = null;
        xpp = factory.newPullParser();
        xpp.setInput(new StringReader(dados));

        int eventType = 0;
        eventType = xpp.getEventType();

        String TagStartXml = null;
        String TagEndXml = null;
        
        
      while (eventType != XmlPullParser.END_DOCUMENT) {

        if (eventType == XmlPullParser.START_DOCUMENT) {
          System.out.println("Start document");
         
        } else if (eventType == XmlPullParser.START_TAG) {// INICIO DA TEG

          TagStartXml = xpp.getName();

          if (TagStartXml.equals("tpAmb")) {
             System.out.println("<tpAmb>");
          }else if (TagStartXml.equals("cUF")) {
             System.out.println("<cUF>");
          }  else if (TagStartXml.equals("verAplic")) {
             System.out.println("<verAplic>");
          }

        } else if (eventType == XmlPullParser.END_TAG) { // FIM DA TEG
          TagEndXml = xpp.getName();
          if (TagEndXml.equals("tpAmb")) {
             System.out.println("</tpAmb>");
          } else if (TagEndXml.equals("cUF")) {
             System.out.println("</cUF>");
          }else if (TagEndXml.equals("verAplic")) {
             System.out.println("</verAplic>");
          }  else if (TagEndXml.equals("retEnviMDFe")) {

            //inseri item	
            try {
               JOptionPane.showMessageDialog(null, cUF+"\n" +verAplic+"\n"+ cStat+"\n"+xMotivo+"\n"+infRec+"\n"+nRec+"\n"+tpAmb+"\n" , "EnviMDFe", 1);

            } catch (Exception e) {
              //	trace("Erro Item: " + e.getMessage());
              System.out.println("Erro Item: " + e.getMessage());
            }

          }
        } else if (eventType == XmlPullParser.TEXT) {// TEXTO DA TEG
          ValorXml = xpp.getText();

         
            if (TagStartXml.equals("cUF")) {
              cUF = ValorXml;
              System.out.println("cUF = " + cUF);
              // JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Status do Serviço", 1);
            }

            if (TagStartXml.equals("verAplic")) {
              verAplic = ValorXml;
              System.out.println("verAplic = " + verAplic);
              // JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Status do Serviço", 1);
            }

            if (TagStartXml.equals("cStat")) {
              cStat = ValorXml;
              System.out.println("cStat = " + cStat);
              // JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Status do Serviço", 1);
            }

            if (TagStartXml.equals("xMotivo")) {
              xMotivo = ValorXml;
              System.out.println("xMotivo = " + xMotivo);
              // JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Status do Serviço", 1);
            }

            if (TagStartXml.equals("infRec")) {
              infRec = ValorXml;
              System.out.println("infRec = " + infRec);
              // JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Status do Serviço", 1);
            }

            if (TagStartXml.equals("nRec")) {
              nRec = ValorXml;
              System.out.println("nRec = " + nRec);
              // JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Status do Serviço", 1);
            }

            if (TagStartXml.equals("dhRecbto")) {
              dhRecbto = ValorXml;
              System.out.println("dhRecbto = " + dhRecbto);
              // JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Status do Serviço", 1);
            }

            if (TagStartXml.equals("tMed")){
              tMed = ValorXml;
              System.out.println("tMed = " + tMed);
              // JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Status do Serviço", 1);
            }
            
            if (TagStartXml.equals("tpAmb")){
              tpAmb = ValorXml;
              System.out.println("tpAmb = " + tpAmb);
              // JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Status do Serviço", 1);
            }

        }
        eventType = xpp.next();

      }

    }
    
    
    public static void LerXmlRetRecepcao(String dados) throws XmlPullParserException, IOException {
        XmlPullParserFactory factory = null;
        factory = XmlPullParserFactory.newInstance();

        factory.setNamespaceAware(true);
        XmlPullParser xpp = null;
        xpp = factory.newPullParser();
        xpp.setInput(new StringReader(dados));

        int eventType = 0;
        eventType = xpp.getEventType();

        String TagStartXml = null;
        String TagEndXml = null;
        
        
      while (eventType != XmlPullParser.END_DOCUMENT) {

        if (eventType == XmlPullParser.START_DOCUMENT) {
          System.out.println("Start document");
         
        } else if (eventType == XmlPullParser.START_TAG) {// INICIO DA TEG

          TagStartXml = xpp.getName();

          if (TagStartXml.equals("tpAmb")) {
             System.out.println("<tpAmb>");
          }else if (TagStartXml.equals("cUF")) {
             System.out.println("<cUF>");
          }  else if (TagStartXml.equals("verAplic")) {
             System.out.println("<verAplic>");
          }

        } else if (eventType == XmlPullParser.END_TAG) { // FIM DA TEG
          TagEndXml = xpp.getName();
          if (TagEndXml.equals("tpAmb")) {
             System.out.println("</tpAmb>");
          } else if (TagEndXml.equals("cUF")) {
             System.out.println("</cUF>");
          }else if (TagEndXml.equals("verAplic")) {
             System.out.println("</verAplic>");
          }  else if (TagEndXml.equals("retConsReciMDFe")) {

            //inseri item	
            try {
               JOptionPane.showMessageDialog(null, verAplic+"\n"+nRecRef+"\n"+cStat+"\n"+xMotivo+"\n"+cUF+"\n" , "EnviMDFe", 1);

            } catch (Exception e) {
              //	trace("Erro Item: " + e.getMessage());
              System.out.println("Erro Item: " + e.getMessage());
            }

          }
        } else if (eventType == XmlPullParser.TEXT) {// TEXTO DA TEG
          ValorXml = xpp.getText();

            if (TagStartXml.equals("tpAmb")){
              tpAmb = ValorXml;
              System.out.println("tpAmb = " + tpAmb);
              // JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Status do Serviço", 1);
            }
            
            if (TagStartXml.equals("verAplic")) {
              verAplic = ValorXml;
              System.out.println("verAplic = " + verAplic);
              // JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Status do Serviço", 1);
            }

            if (TagStartXml.equals("nRecRef")) {
              nRecRef = ValorXml;
              System.out.println("nRecRef = " + nRecRef);
              // JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Status do Serviço", 1);
            }

            if (TagStartXml.equals("cStat")) {
              cStat = ValorXml;
              System.out.println("cStat = " + cStat);
              // JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Status do Serviço", 1);
            }

            if (TagStartXml.equals("xMotivo")) {
              xMotivo = ValorXml;
              System.out.println("xMotivo = " + xMotivo);
              // JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Status do Serviço", 1);
            }
            
            
            if (TagStartXml.equals("cUF")) {
              cUF = ValorXml;
              System.out.println("cUF = " + cUF);
              // JOptionPane.showMessageDialog(null, ValorXml.toUpperCase()+"!", "Consulta Status do Serviço", 1);
            }
            
            if(TagStartXml.equals("nProt")){
              nProtEvt = ValorXml;
              System.out.println("nProt = " + nProtEvt);
            }

        }
        eventType = xpp.next();

      }


      
       
       
    }
    
    
    
    
    
    
    
    public String CriaXML(String Numero, String Fil, String Tag) throws SQLException, InstantiationException, IllegalAccessException {
        String nomeArq = "gerado.xml";
        String texto = "";
        
        //Formato decimal para as cargas
//        DecimalFormat FormataCarga = new DecimalFormat("0,00#.##");
        //Formato de data do documento
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");

        //tentando criar arquivo
        try {

            Conectar.ConectarBD();
            System.out.println("SELECT * FROM MDFE_DADOS  WHERE DAD_NUMERO ='" + Numero + "' and EMIT_CODFIL = '" + Fil + "' and RGEVENTO <> '3'");
            Conectar.result = Conectar.stam.executeQuery("SELECT * FROM MDFE_DADOS  WHERE DAD_NUMERO ='" + Numero + "' and EMIT_CODFIL = '" + Fil + "' and RGEVENTO <> '3'");
            Conectar.result.first();

            String sDAD_MODALIDADE       = Conectar.result.getString("DAD_MODALIDADE");
            String sLOCAL_DESC           = Conectar.result.getString("DAD_LOCAL_DESCARREGAMENTO");
            Date sDAD_DTINICIO           = Conectar.result.getDate("DAD_DTINICIO"); //////
            String sDAD_CHAVE            = Conectar.result.getString("DAD_CHAVE");       
            String sDAD_COD_UF           = BuscaCodUf(Conectar.result.getString("DAD_UF"));
            String sDAD_TP_TRANSPORTADOR = Conectar.result.getString("DAD_TP_TRANSPORTADOR");//////

            String sEMIT_CODFIL          = Conectar.result.getString("EMIT_CODFIL");
            String sEMIT_CNPJ            = Conectar.result.getString("EMIT_CNPJ");
            String sEMIT_IE              = Conectar.result.getString("EMIT_IE");
            String sEMIT_RAZAOSOC        = Conectar.result.getString("EMIT_RAZAOSOC");
            String sEMIT_FANTASIA        = Conectar.result.getString("EMIT_FANTASIA");
            String sEMIT_LOGRADOURO      = Conectar.result.getString("EMIT_LOGRADOURO");
            String sEMIT_NR              = Conectar.result.getString("EMIT_NR");
            String sEMIT_COMP            = Conectar.result.getString("EMIT_COMP");
            String sEMIT_BAIRRO          = Conectar.result.getString("EMIT_BAIRRO");
            String sEMIT_CEP             = Conectar.result.getString("EMIT_CEP");
            String sEMIT_PAIS            = Conectar.result.getString("EMIT_PAIS");
            String sEMIT_UF              = Conectar.result.getString("EMIT_UF");
            String sEMIT_COD_MUN         = Conectar.result.getString("EMIT_COD_MUN");
            String sEMIT_MUN             = Conectar.result.getString("EMIT_MUN");
            String sEMIT_TEL             = Conectar.result.getString("EMIT_TEL");
            String sEMIT_EMAIL           = Conectar.result.getString("EMIT_EMAIL");

            String sROD_RNTRC            = Conectar.result.getString("ROD_RNTRC");
          //  String sROD_CIOT             = Conectar.result.getString("ROD_CIOT");
            String sROD_COD_AG_PORTO     = Conectar.result.getString("ROD_COD_AG_PORTO");
            String sROD_COD_INT_VEIC     = Conectar.result.getString("ROD_COD_INT_VEIC");
            String sROD_TP_CARROCERIA    = Conectar.result.getString("ROD_TP_CARROCERIA");
            String sROD_PLACA            = Conectar.result.getString("ROD_PLACA");
            String sROD_TARA             = Conectar.result.getString("ROD_TARA");
            String sROD_RENAVAM          = Conectar.result.getString("ROD_RENAVAM");
            String sROD_UF               = Conectar.result.getString("ROD_UF");
            String sROD_TP_RODADO        = Conectar.result.getString("ROD_TP_RODADO");
            String sROD_CAPACIDADE_KG    = Conectar.result.getString("ROD_CAPACIDADE_KG");
            String sROD_CAPACIDADE_M3    = Conectar.result.getString("ROD_CAPACIDADE_M3");
            String sPPT_CODPROP          = Conectar.result.getString("PPT_CODPROP");
            String sPROPIETARIO          = Conectar.result.getString("PROPIETARIO");
            String sPPT_NOME             = Conectar.result.getString("PPT_NOME");
            String sPPT_CPF              = Conectar.result.getString("PPT_CPF");
            String sPPT_CNPJ             = Conectar.result.getString("PPT_CNPJ");
            String sPPT_RNTRC            = Conectar.result.getString("PPT_RNTRC");
            String sPPT_IE               = Conectar.result.getString("PPT_IE");
            String sPPT_UF               = Conectar.result.getString("PPT_UF");

            /*String sAQU_COD_AGENCIA      = Conectar.result.getString("AQU_COD_AGENCIA");
            String sAQU_NOME_AGENCIA     = Conectar.result.getString("AQU_NOME_AGENCIA");
            String sAQU_CNPJ_AGENCIA_NAV = Conectar.result.getString("AQU_CNPJ_AGENCIA_NAV");*/
            
            String sAQU_COD_INT_EMB      = Conectar.result.getString("AQU_COD_INT_EMB");
            String sAQU_COD_EMB          = Conectar.result.getString("AQU_COD_EMB");
            String sAQU_COD_TP_EMB       = Conectar.result.getString("AQU_COD_TP_EMB");
            String sAQU_NOME_EMB         = Conectar.result.getString("AQU_NOME_EMB");
            String sAQU_IRIN_EMB         = Conectar.result.getString("AQU_IRIN_EMB");//////
            
            
            String sAQU_COD_PORTO_EMB    = Conectar.result.getString("AQU_COD_PORTO_EMB");
            String sAQU_COD_PORTO_DES    = Conectar.result.getString("AQU_COD_PORTO_DES");
            String sAQU_NOME_PORTO_TRANS = Conectar.result.getString("AQU_NOME_PORTO_TRANS");/////
            
            String sAQU_NR_VIAGEM        = Conectar.result.getString("AQU_NR_VIAGEM");  
            String sAQU_TP_NAVEGACAO     = Conectar.result.getString("AQU_TP_NAVEGACAO");/////
            
            
            

            String sTOT_QTD_CTE               = Conectar.result.getString("TOT_QTD_CTE");
            String sTOT_QTD_NFE               = Conectar.result.getString("TOT_QTD_NFE");
            String sTOT_QTD_MDFE              = Conectar.result.getString("TOT_QTD_MDFE");/////          
            Double sTOT_TOT_MERC_TRANSPORTADA = Conectar.result.getDouble("TOT_TOT_MERC_TRANSPORTADA");
            String sTOT_UN_MEDIDA_PESO        = Conectar.result.getString("TOT_UN_MEDIDA_PESO");
            Double sTOT_PESO_BRUTO            = Conectar.result.getDouble("TOT_PESO_BRUTO");

            String sINF_FISCO                 = Conectar.result.getString("INF_FISCO");
            String sINF_CONTR                 = Conectar.result.getString("INF_CONTR");
            
            
            
            

            Formatter saida = new Formatter(nomeArq);
            
            if(Tag.equals("C")){
             //  texto = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
            }else if(Tag.equals("S")){
              
            }
            
            
            
            //texto +="<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
            texto += "<MDFe xmlns=\"http://www.portalfiscal.inf.br/mdfe\">";
            texto += "<infMDFe Id=\"MDFe" + sDAD_CHAVE + "\" versao=\"3.00\">";
            texto += "<ide>";
            texto += "<cUF>" + sDAD_COD_UF + "</cUF>";
            texto += "<tpAmb>" + 2 + "</tpAmb>";
            texto += "<tpEmit>" + Conectar.result.getString("DAD_TP_EMITENTE") + "</tpEmit>";
           
            if (sDAD_TP_TRANSPORTADOR != null && sDAD_TP_TRANSPORTADOR.length() > 0) {///
                texto += "<tpTransp>" + Conectar.result.getString("DAD_TP_TRANSPORTADOR") + "</tpTransp>";
            }
            
            texto += "<mod>" + Conectar.result.getString("DAD_MODELO") + "</mod>";
            texto += "<serie>" + Conectar.result.getInt("DAD_SERIE") + "</serie>";
            texto += "<nMDF>" + Conectar.result.getInt("DAD_NUMERO") + "</nMDF>";
            texto += "<cMDF>" + Conectar.result.getString("DAD_CODNUMERICO") + "</cMDF>";
            texto += "<cDV>" + Conectar.result.getString("DAD_DV") + "</cDV>";
            texto += "<modal>" + Conectar.result.getString("DAD_MODALIDADE") + "</modal>";
            texto += "<dhEmi>" + sdf.format(Conectar.result.getDate("DAD_DTEMISSAO")) + "</dhEmi>";////
            texto += "<tpEmis>" + Conectar.result.getString("DAD_FORMA_EMISSAO") + "</tpEmis>";
            texto += "<procEmi>" + 0 + "</procEmi>";
            texto += "<verProc>" + 1 + "</verProc>";

            Conectar.result2 = Conectar.stam.executeQuery("SELECT * FROM MDFE_LOCAL_CARREGAMENTO  WHERE DAD_CODIGO ='" + Numero + "'");
            Conectar.result2.first();
            texto += "<UFIni>" + Conectar.result2.getString("UF") + "</UFIni>";

            texto += "<UFFim>" + sLOCAL_DESC + "</UFFim>";

            Conectar.result2 = Conectar.stam.executeQuery("SELECT * FROM MDFE_LOCAL_CARREGAMENTO  WHERE DAD_CODIGO ='" + Numero + "'");
            while (Conectar.result2.next()) {
                texto += "<infMunCarrega>";
                texto += "<cMunCarrega>" + Conectar.result2.getString("COD_MUNICIPIO") + "</cMunCarrega>";
                texto += "<xMunCarrega>" + Conectar.result2.getString("MUNICIPIO") + "</xMunCarrega>";
                texto += "</infMunCarrega>";
            }

            Conectar.result3 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_LOCAL_PERCURSO  WHERE DAD_CODIGO ='" + Numero + "'");
            while (Conectar.result3.next()) {
                texto += "<infPercurso>";
                texto += "<UFPer>" + Conectar.result3.getString("UF") + "</UFPer>";
                texto += "</infPercurso>";
            }
            if (sDAD_DTINICIO != null) {
                texto += "<dhIniViagem>" + sdf.format(sDAD_DTINICIO) + "</dhIniViagem>";
            }
            texto += "</ide>";

            //---------------Dados Emitente----------------------------------------            
            texto += "<emit>";
            texto += "<CNPJ>" + sEMIT_CNPJ + "</CNPJ>";
            texto += "<IE>" + sEMIT_IE + "</IE>";
            texto += "<xNome>";
            texto += sEMIT_RAZAOSOC + "";
            texto += "</xNome>";
            if (sEMIT_FANTASIA != null && sEMIT_FANTASIA.length() > 0) {
                texto += "<xFant>" + sEMIT_FANTASIA + "</xFant>";
            }
            texto += "<enderEmit>";
            texto += "<xLgr>" + sEMIT_LOGRADOURO + "</xLgr>";
            texto += "<nro>" + sEMIT_NR + "</nro>";
            if (sEMIT_COMP != null && sEMIT_COMP.length() > 0) {
                texto += "<xCpl>" + sEMIT_COMP + "</xCpl>";
            }
            texto += "<xBairro>" + sEMIT_BAIRRO + "</xBairro>";
            texto += "<cMun>" + sEMIT_COD_MUN + "</cMun>";
            texto += "<xMun>" + sEMIT_MUN + "</xMun>";
            if (sEMIT_CEP != null && sEMIT_CEP.length() > 0) {
                texto += "<CEP>" + sEMIT_CEP + "</CEP>";
            }
            texto += "<UF>" + sEMIT_UF + "</UF>";
            if (sEMIT_TEL != null && sEMIT_TEL.length() > 0) {
                texto += "<fone>" + sEMIT_TEL + "</fone>";
            }
            if (sEMIT_EMAIL != null && sEMIT_EMAIL.length() > 0) {
                texto += "<email>" + sEMIT_EMAIL + "</email>";
            }
            texto += "</enderEmit>";
            texto += "</emit>";
            //------------------------------------------------------------------ 
            //----------Verifica se é Rodoviario ou aquaviario------------------
            if (sDAD_MODALIDADE.equals("1")) {//Rodoviario
                texto += "<infModal versaoModal=\"3.00\">";
                texto += "<rodo>";
                
                
                
                //Dados do AGENCIA
                texto += "<infANTT>";
                
                
                if (sPPT_CODPROP == null) {//n é prop de terceiros
                  texto += "<RNTRC>" + sROD_RNTRC + "</RNTRC>";//
                } else {

                }
                
                Conectar.result4_1 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_CIOT  WHERE DAD_CODIGO ='" + Numero + "'");
                while (Conectar.result4_1.next()) {
                    texto += "<infCIOT>";
                    texto += "<CIOT>" + Conectar.result4_1.getString("CIOT") + "</CIOT>";
                          
                    if(Conectar.result4_1.getString("TIPO").equals("1")){
                        texto += "<CPF>"  + Conectar.result4_1.getString("DOCUMENTO")  + "</CPF>";     
                    }else{
                        texto += "<CNPJ>" + Conectar.result4_1.getString("DOCUMENTO") + "</CNPJ>";  
                    }
                                    
                    
                    texto += "</infCIOT>";
                }
                
                Conectar.result6 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_PEDAGIO WHERE DAD_CODIGO ='" + Numero + "'");
                texto += "<valePed>";
                while (Conectar.result6.next()) {
                    texto += "<disp>";
                    texto += "<CNPJForn>" + Conectar.result6.getString("CNPJ_EMP_FOR_PED") + "</CNPJForn>";
                    if(Conectar.result6.getString("CNPJ_RESP_PAG_PED").length() > 0 &&  Conectar.result6.getString("CPF_RESP_PAG_PED").length() == 0){
                      texto += "<CNPJPg>"   + Conectar.result6.getString("CNPJ_RESP_PAG_PED")+ "</CNPJPg>";
                    }else if(Conectar.result6.getString("CPF_RESP_PAG_PED").length() > 0 &&  Conectar.result6.getString("CNPJ_RESP_PAG_PED").length() == 0){
                      texto += "<CPFPg>"   + Conectar.result6.getString("CNPJ_RESP_PAG_PED")+ "</CPFPg>";
                    }
                    
                    texto += "<nCompra>"  + Conectar.result6.getString("NR_COMPROVANTE")   + "</nCompra>";
                    
                    texto += "<vValePed>" + FormataValorVale(Conectar.result6.getDouble("VALOR_VALE")) + "</vValePed>";
                     
                    texto += "</disp>";
                }
                texto += "</valePed>";
                
                Conectar.result6_1 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_CONTRATANTE WHERE DAD_CODIGO ='" + Numero + "'");
                texto += "<infContratante>";
                while (Conectar.result6_1.next()) {
                  
                    if(Conectar.result6_1.getString("CONT_CPF").length() > 0 &&  Conectar.result6_1.getString("CONT_CNPJ").length() == 0){
                      texto += "<CPF>"   + Conectar.result6_1.getString("CONT_CPF")+ "</CPF>";
                    }else if(Conectar.result6_1.getString("CONT_CNPJ").length() > 0 &&  Conectar.result6_1.getString("CONT_CPF").length() == 0){
                      texto += "<CNPJ>"   + Conectar.result6_1.getString("CONT_CNPJ")+ "</CNPJ>";
                    }
                    
             
                     
                }
                texto += "</infContratante>";
                
                texto += "</infANTT>";
                

                //Dados do Veiculo
                texto += "<veicTracao>";
                texto += "<cInt>"    + sROD_COD_INT_VEIC  + "</cInt>";
                texto += "<placa>"   + sROD_PLACA         + "</placa>";
                texto += "<RENAVAM>" + sROD_RENAVAM       + "</RENAVAM>";
                texto += "<tara>"    + sROD_TARA          + "</tara>";
                texto += "<capKG>"   + sROD_CAPACIDADE_KG + "</capKG>";
                texto += "<capM3>"   + sROD_CAPACIDADE_M3 + "</capM3>";

                //Verifica se é Proprio
                if (sPPT_CODPROP == null) {

                } else {//terceiros
                    texto += "<prop>";
                    if(sPPT_CPF.equals("") || (sPPT_CPF == null) ){
                       texto += "<CNPJ>"  + sPPT_CPF    + "</CNPJ>";
                    }
                    
                    if(sPPT_CNPJ.equals("")|| (sPPT_CNPJ == null)){
                       texto += "<CPF>"   + sPPT_CPF    + "</CPF>";
                    }
                    
                    texto += "<RNTRC>"  + sPPT_RNTRC   + "</RNTRC>";
                    texto += "<xNome>"  + sPPT_NOME    + "</xNome>";
                    texto += "<IE>"     + sPPT_IE      + "</IE>";
                    texto += "<UF>"     + sPPT_UF      + "</UF>";
                    texto += "<tpProp>" + sPROPIETARIO + "</tpProp>";
                    texto += "</prop>";
                }

                Conectar.result4 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_CONDUTORES  WHERE DAD_CODIGO ='" + Numero + "'");
                while (Conectar.result4.next()) {
                    texto += "<condutor>";
                    texto += "<xNome>" + Conectar.result4.getString("NOME") + "</xNome>";
                    texto += "<CPF>" + Conectar.result4.getString("CPF") + "</CPF>";                    
                    texto += "</condutor>";
                }

                texto += "<tpRod>" + sROD_TP_RODADO + "</tpRod>";
                texto += "<tpCar>" + sROD_TP_CARROCERIA + "</tpCar>";
                texto += "<UF>" + sROD_UF + "</UF>";
                texto += "</veicTracao>";

                Conectar.result5 = Conectar.stam.executeQuery("SELECT * FROM   MDFE_REBOQUE WHERE DAD_CODIGO ='" + Numero + "'");
                while (Conectar.result5.next()) {
                    texto += "<veicReboque>";
                    texto += "<cInt>"    + Conectar.result5.getString("CODVEIC")       + "</cInt>";
                    texto += "<placa>"   + Conectar.result5.getString("PLACA")      + "</placa>";
                    texto += "<RENAVAM>" + Conectar.result5.getString("RENAVAM")       + "</RENAVAM>";
                    texto += "<tara>"    + Conectar.result5.getString("TARA")          + "</tara>";
                    texto += "<capKG>"   + Conectar.result5.getString("CAPACIDADE_KG") + "</capKG>";
                    texto += "<capM3>"   + Conectar.result5.getString("CAPACIDADE_M3") + "</capM3>";
                          
                    //Verifica se é Proprio
                    if (Conectar.result5.getString("COD_PROPIETARIO") == null){

                    } else {//terceiros
                        texto += "<prop>";
                        if(Conectar.result5.getString("PROP_CPF").equals("") || Conectar.result5.getString("PROP_CPF") == null){
                          texto += "<CNPJ>"   + Conectar.result5.getString("PROP_CNPJ") + "</CNPJ>";                          
                        }
                        
                        if(Conectar.result5.getString("PROP_CNPJ").equals("") || Conectar.result5.getString("PROP_CNPJ") == null){
                           texto += "<CPF>"    + Conectar.result5.getString("PROP_CPF") + "</CPF>";//
                        }
                                               
                        texto += "<RNTRC>"  + Conectar.result5.getString("PROP_RNTC") + "</RNTRC>";
                        texto += "<xNome>"  + Conectar.result5.getString("PROP_NOME") + "</xNome>";
                        
                        if( (Conectar.result5.getString("PROP_IE").length() >0) || (Conectar.result5.getString("PROP_IE") != null)){
                          texto += "<IE>"     + Conectar.result5.getString("PROP_IE")   + "</IE>";
                        }
                        
                        texto += "<UF>"     + Conectar.result5.getString("PROP_UF")   + "</UF>";
                        texto += "<tpProp>" + Conectar.result5.getString("PROP_TIPO") + "</tpProp>";
                        texto += "</prop>";                        
                    }
                    texto += "<tpCar>"   + Conectar.result5.getString("TP_CARROCERIA") + "</tpCar>";
                    texto += "<UF>"      + Conectar.result5.getString("ESTADO")        + "</UF>";                    
                    texto += "</veicReboque>";
                }

                

                if (sROD_COD_AG_PORTO != null && sROD_COD_AG_PORTO.length() > 0) {
                    texto += "<codAgPorto>" + sROD_COD_AG_PORTO + "</codAgPorto>";
                }
                
                
                //lacre 
                Conectar.result5_1 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_LACRES_RODO WHERE DAD_CODIGO ='" + Numero + "'");
                while (Conectar.result5_1.next()) {
                    texto += "<lacRodo>";
                    texto += "<nLacre>" + Conectar.result5_1.getString("NR_LACRE")  + "</nLacre>";                   
                    texto += "</lacRodo>";
                }
                
                
                texto += "</rodo>";
                texto += "</infModal>";

            } else if (sDAD_MODALIDADE.equals("3")) {//aquaviario
                texto += "<infModal versaoModal=\"3.00\">";
                texto += "<aquav>";
                //dados da embarcação
                texto += "<irin>"       + sAQU_IRIN_EMB        + "</irin>";         
                texto += "<tpEmb>"      + sAQU_COD_TP_EMB       + "</tpEmb>";
                texto += "<cEmbar>"     + sAQU_COD_EMB          + "</cEmbar>";
                texto += "<xEmbar>"     + sAQU_NOME_EMB         + "</xEmbar>";
                
                texto += "<nViag>"      + sAQU_NR_VIAGEM        + "</nViag>";
                texto += "<cPrtEmb>"    + sAQU_COD_PORTO_EMB    + "</cPrtEmb>";
                texto += "<cPrtDest>"   + sAQU_COD_PORTO_DES    + "</cPrtDest>";
                
                if (sAQU_NOME_PORTO_TRANS != null && sAQU_NOME_PORTO_TRANS.length() > 0) {
                    texto += "<prtTrans>"   + sAQU_NOME_PORTO_TRANS + "</prtTrans>";
                }
                
                
                if (sAQU_TP_NAVEGACAO != null && sAQU_TP_NAVEGACAO.length() > 0) {
                   texto += "<tpNav>"      +   sAQU_TP_NAVEGACAO     + "</tpNav>";
                }
                
                Conectar.result7 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_TERMINAL_CARREGAMENTO WHERE DAD_CODIGO ='" + Numero + "'");
                while (Conectar.result7.next()) {
                    texto += "<infTermCarreg>";
                    texto += "<cTermCarreg>" + Conectar.result7.getString("CODIGO")                + "</cTermCarreg>";
                    texto += "<xTermCarreg>" + Conectar.result7.getString("NOME_TER_CARREGAMENTO") + "</xTermCarreg>";
                    texto += "</infTermCarreg>";
                }

                Conectar.result8 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_TERMINAL_DESCARREGA WHERE DAD_CODIGO ='" + Numero + "'");
                while (Conectar.result8.next()) {
                    texto += "<infTermDescarreg>";
                    texto += "<cTermDescarreg>" + Conectar.result8.getString("CODIGO")                   + "</cTermDescarreg>";
                    texto += "<xTermDescarreg>" + Conectar.result8.getString("NOME_TER_DESCARREGAMENTO") + "</xTermDescarreg>";
                    texto += "</infTermDescarreg>";
                }

                Conectar.result9 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_TERMINAL_COMBOIO WHERE DAD_CODIGO ='" + Numero + "'");
                while (Conectar.result9.next()) {
                    texto += "<infEmbComb>";
                    texto += "<cEmbComb>" + Conectar.result9.getString("CODIGO_COBOIO") + "</cEmbComb>";
                    texto += "<xBalsa>" + Conectar.result9.getString("ID_BALSA") + "</xBalsa>";
                    texto += "</infEmbComb>";
                }

                Conectar.result10 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_TERMINAL_UNCARGAVAZIA WHERE DAD_CODIGO ='" + Numero + "'");
                while (Conectar.result10.next()) {
                    texto += "<infUnidCargaVazia>";
                    texto += "<idUnidCargaVazia>" + Conectar.result10.getString("CODIGO_ID") + "</idUnidCargaVazia>";
                    texto += "<tpUnidCargaVazia>" + Conectar.result10.getString("TIPO")      + "</tpUnidCargaVazia>";
                    texto += "</infUnidCargaVazia>";
                }
                
                
                Conectar.result10 = Conectar.stam.executeQuery("SELECT * FROM  MDFE_UN_TRANS_VAZIA  WHERE DAD_CODIGO ='" + Numero + "'");
                while (Conectar.result10.next()) {
                    texto += "<infUnidTranspVazia>";
                    texto += "<idUnidTranspVazia>" + Conectar.result10.getString("CODIGO_ID") + "</idUnidTranspVazia>";
                    texto += "<tpUnidTranspVazia>" + Conectar.result10.getString("TIPO")      + "</tpUnidTranspVazia>";
                    texto += "</infUnidTranspVazia>";
                }

                texto += "</aquav>";
                texto += "</infModal>";
            }

//-----------------------------------------------------------------------
            texto += "<infDoc>";
            Statement stam11 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
            Conectar.result11 = stam11.executeQuery("SELECT * FROM  MDFE_MUN_DESCARREG WHERE DAD_CODIGO ='" + Numero + "'");
            while (Conectar.result11.next()) {
                texto += "<infMunDescarga>";
                texto += "<cMunDescarga>" + Conectar.result11.getString("COD_MUNICIPIO") + "</cMunDescarga>";
                texto += "<xMunDescarga>" + Conectar.result11.getString("MUNICIPIO") + "</xMunDescarga>";
                String sCOD_MUNICIPIO = Conectar.result11.getString("COD_MUNICIPIO");

                Statement stam12 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                Conectar.result12 = stam12.executeQuery("SELECT * FROM MDFE_DOCUMENTO WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'C'");
                while (Conectar.result12.next()) {
                    String sCODDOC = Conectar.result12.getString("CODDOC");
                    texto += "<infCTe>";
                    texto += "<chCTe>" + Conectar.result12.getString("CHAVE") + "</chCTe>";
                   
                    if (Conectar.result12.getString("COD_BARRAS") != null && Conectar.result12.getString("COD_BARRAS").length() > 0) {
                        texto += "<SegCodBarra>" + Conectar.result12.getString("COD_BARRAS") + "</SegCodBarra>";
                    }
                    
                    if (Conectar.result12.getString("INDREENTREGA") != null && Conectar.result12.getString("INDREENTREGA").length() > 0) {
                        texto += "<indReentrega>" + Conectar.result12.getString("INDREENTREGA") + "</indReentrega>";
                    }
                            
                    Statement stam13 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                    Conectar.result13 = stam13.executeQuery("SELECT * FROM MDFE_UN_TRANSPORTE WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'C' AND CODDOC ='" + sCODDOC + "'");
                    while (Conectar.result13.next()) {
                        String sCOD_TRANSP = Conectar.result13.getString("COD_TRANSP");
                        Double sQTD_RAT_TRANS = Conectar.result13.getDouble("QTD_RAT_TRANS");

                        texto += "<infUnidTransp>";
                        texto += "<tpUnidTransp>" + Conectar.result13.getString("TP_UN_TRANS") + "</tpUnidTransp>";
                        texto += "<idUnidTransp>" + Conectar.result13.getString("ID_UN_TRANS") + "</idUnidTransp>";

                        Statement stam14 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                        Conectar.result14 = stam14.executeQuery("SELECT * FROM MDFE_LACRES_TRANSPORTE WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'C' AND CODDOC ='" + sCODDOC + "' and COD_TRANSP ='" + sCOD_TRANSP + "'");
                        while (Conectar.result14.next()) {
                            texto += "<lacUnidTransp>";
                            texto += "<nLacre>" + Conectar.result14.getString("NR_LACRE") + "</nLacre>";
                            texto += "</lacUnidTransp>";
                        }

                        Statement stam15 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                        Conectar.result15 = stam15.executeQuery("SELECT * FROM MDFE_UN_CARGA  WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'C' AND CODDOC ='" + sCODDOC + "' and COD_TRANSP ='" + sCOD_TRANSP + "'");
                        while (Conectar.result15.next()) {
                            Double sQTD_RAT_CARGA = Conectar.result15.getDouble("QTD_RAT_CARGA");
                            String sCOD_CARGA = Conectar.result15.getString("COD_CARGA");

                            texto += "<infUnidCarga>";
                            texto += "<tpUnidCarga>" + Conectar.result15.getString("TP_UN_CARGA") + "</tpUnidCarga>";
                            texto += "<idUnidCarga>" + Conectar.result15.getString("ID_UN_CARGA") + "</idUnidCarga>";

                            Statement stam16 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                            Conectar.result16 = stam16.executeQuery("SELECT * FROM MDFE_LACRES_CARGA WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'C' AND CODDOC ='" + sCODDOC + "' and COD_CARGA ='" + sCOD_CARGA + "' AND COD_TRANSP ='" + sCOD_TRANSP + "'");
                            while (Conectar.result16.next()) {
                                texto += "<lacUnidCarga>";
                                texto += "<nLacre>" + Conectar.result16.getString("NR_LACRE") + "</nLacre>";
                                texto += "</lacUnidCarga>";
                            }

                            texto += "<qtdRat>" + FormataQtdRat(sQTD_RAT_CARGA) + "</qtdRat>";
                            texto += "</infUnidCarga>";

                        }

                        texto += "<qtdRat>" + FormataQtdRat(sQTD_RAT_TRANS) + "</qtdRat>";
                        texto += "</infUnidTransp>";
                        
                        
                        
                        
                        
                        
                    }
                    Statement stam15_1 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                    Conectar.result15_1 = stam15_1.executeQuery("SELECT * FROM MDFE_PERIGO  WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND CODDOC ='" + sCODDOC + "' AND TP_DOC = 'C' ");
                    while (Conectar.result15_1.next()) {                            
                        texto += "<peri>";
                        texto += "<nONU>"      + Conectar.result15_1.getString("NRONU")           + "</nONU>";
                        texto += "<xNomeAE>"   + Conectar.result15_1.getString("NOME_APROP_EMB")  + "</xNomeAE>";
                        texto += "<xClaRisco>" + Conectar.result15_1.getString("CLARISCO")        + "</xClaRisco>";
                        texto += "<grEmb>"     + Conectar.result15_1.getString("GREMB")           + "</grEmb>";
                        texto += "<qTotProd>"  + Conectar.result15_1.getString("QTOTPROD")        + "</qTotProd>";
                        texto += "<qVolTipo>"  + Conectar.result15_1.getString("VALTIPO")         + "</qVolTipo>";
                        texto += "</peri>"; 
                    }
                    texto += "</infCTe>";
                }

                //Loop para pegar as nfe
                stam12 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                Conectar.result12 = stam12.executeQuery("SELECT * FROM MDFE_DOCUMENTO WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'N'");
                while (Conectar.result12.next()) {
                    String sCODDOC = Conectar.result12.getString("CODDOC");
                    texto += "<infNFe>";
                    texto += "<chNFe>" + Conectar.result12.getString("CHAVE") + "</chNFe>";
                    
                    if (Conectar.result12.getString("INDREENTREGA") != null && Conectar.result12.getString("INDREENTREGA").length() > 0) {
                        texto += "<indReentrega>" + Conectar.result12.getString("INDREENTREGA") + "</indReentrega>";
                    }

                    Statement stam13 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                    Conectar.result13 = stam13.executeQuery("SELECT * FROM MDFE_UN_TRANSPORTE WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'N' AND CODDOC ='" + sCODDOC + "'");
                    while (Conectar.result13.next()) {
                        String sCOD_TRANSP = Conectar.result13.getString("COD_TRANSP");
                        Double sQTD_RAT_TRANS = Conectar.result13.getDouble("QTD_RAT_TRANS");

                        texto += "<infUnidTransp>";
                        texto += "<tpUnidTransp>" + Conectar.result13.getString("TP_UN_TRANS") + "</tpUnidTransp>";
                        texto += "<idUnidTransp>" + Conectar.result13.getString("ID_UN_TRANS") + "</idUnidTransp>";

                        Statement stam14 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                        Conectar.result14 = stam14.executeQuery("SELECT * FROM MDFE_LACRES_TRANSPORTE WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'N' AND CODDOC ='" + sCODDOC + "' and COD_TRANSP ='" + sCOD_TRANSP + "'");
                        while (Conectar.result14.next()) {
                            texto += "<lacUnidTransp>";
                            texto += "<nLacre>" + Conectar.result14.getString("NR_LACRE") + "</nLacre>";
                            texto += "</lacUnidTransp>";
                        }

                        Statement stam15 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                        Conectar.result15 = stam15.executeQuery("SELECT * FROM MDFE_UN_CARGA  WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'N' AND CODDOC ='" + sCODDOC + "' and COD_TRANSP ='" + sCOD_TRANSP + "'");
                        while (Conectar.result15.next()) {
                            Double sQTD_RAT_CARGA = Conectar.result15.getDouble("QTD_RAT_CARGA");
                            String sCOD_CARGA = Conectar.result15.getString("COD_CARGA");

                            texto += "<infUnidCarga>";
                            texto += "<tpUnidCarga>" + Conectar.result15.getString("TP_UN_CARGA") + "</tpUnidCarga>";
                            texto += "<idUnidCarga>" + Conectar.result15.getString("ID_UN_CARGA") + "</idUnidCarga>";

                            Statement stam16 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                            Conectar.result16 = stam16.executeQuery("SELECT * FROM MDFE_LACRES_CARGA WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'N' AND CODDOC ='" + sCODDOC + "' and COD_CARGA ='" + sCOD_CARGA + "' AND COD_TRANSP ='" + sCOD_TRANSP + "'");
                            while (Conectar.result16.next()) {
                                texto += "<lacUnidCarga>";
                                texto += "<nLacre>" + Conectar.result16.getString("NR_LACRE") + "</nLacre>";
                                texto += "</lacUnidCarga>";
                            }

                            texto += "<qtdRat>" + FormataQtdRat(sQTD_RAT_CARGA) + "</qtdRat>";
                            texto += "</infUnidCarga>";

                        }

                        texto += "<qtdRat>" + FormataQtdRat(sQTD_RAT_TRANS) + "</qtdRat>";
                        texto += "</infUnidTransp>";
                        
                        
                        
                    }
                    Statement stam15_1 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                    Conectar.result15_1 = stam15_1.executeQuery("SELECT * FROM MDFE_PERIGO  WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND CODDOC ='" + sCODDOC + "' AND TP_DOC = 'N' ");
                    while (Conectar.result15_1.next()) {                            
                        texto += "<peri>";
                        texto += "<nONU>"      + Conectar.result15_1.getString("NRONU")           + "</nONU>";
                        texto += "<xNomeAE>"   + Conectar.result15_1.getString("NOME_APROP_EMB")  + "</xNomeAE>";
                        texto += "<xClaRisco>" + Conectar.result15_1.getString("CLARISCO")        + "</xClaRisco>";
                        texto += "<grEmb>"     + Conectar.result15_1.getString("GREMB")           + "</grEmb>";
                        texto += "<qTotProd>"  + Conectar.result15_1.getString("QTOTPROD")        + "</qTotProd>";
                        texto += "<qVolTipo>"  + Conectar.result15_1.getString("VALTIPO")         + "</qVolTipo>";
                        texto += "</peri>"; 
                    }
                    texto += "</infNFe>";
                }

                //Loop para pegar os MDFe
                stam12 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                Conectar.result12 = stam12.executeQuery("SELECT * FROM MDFE_DOCUMENTO WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'M'");
                while (Conectar.result12.next()) {
                    String sCODDOC = Conectar.result12.getString("CODDOC");
                    texto += "<infMDFeTransp>";
                    texto += "<chMDFe>" + Conectar.result12.getString("CHAVE") + "</chMDFe>";
                    
                    if (Conectar.result12.getString("INDREENTREGA") != null && Conectar.result12.getString("INDREENTREGA").length() > 0) {
                        texto += "<indReentrega>" + Conectar.result12.getString("INDREENTREGA") + "</indReentrega>";
                    }

                    Statement stam13 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                    Conectar.result13 = stam13.executeQuery("SELECT * FROM MDFE_UN_TRANSPORTE WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'M' AND CODDOC ='" + sCODDOC + "'");
                    while (Conectar.result13.next()) {
                        String sCOD_TRANSP = Conectar.result13.getString("COD_TRANSP");
                        Double sQTD_RAT_TRANS = Conectar.result13.getDouble("QTD_RAT_TRANS");

                        texto += "<infUnidTransp>";
                        texto += "<tpUnidTransp>" + Conectar.result13.getString("TP_UN_TRANS") + "</tpUnidTransp>";
                        texto += "<idUnidTransp>" + Conectar.result13.getString("ID_UN_TRANS") + "</idUnidTransp>";

                        Statement stam14 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                        Conectar.result14 = stam14.executeQuery("SELECT * FROM MDFE_LACRES_TRANSPORTE WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'M' AND CODDOC ='" + sCODDOC + "' and COD_TRANSP ='" + sCOD_TRANSP + "'");
                        while (Conectar.result14.next()) {
                            texto += "<lacUnidTransp>";
                            texto += "<nLacre>" + Conectar.result14.getString("NR_LACRE") + "</nLacre>";
                            texto += "</lacUnidTransp>";
                        }

                        Statement stam15 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                        Conectar.result15 = stam15.executeQuery("SELECT * FROM MDFE_UN_CARGA  WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'M' AND CODDOC ='" + sCODDOC + "' and COD_TRANSP ='" + sCOD_TRANSP + "'");
                        while (Conectar.result15.next()) {
                            Double sQTD_RAT_CARGA = Conectar.result15.getDouble("QTD_RAT_CARGA");
                            String sCOD_CARGA = Conectar.result15.getString("COD_CARGA");

                            texto += "<infUnidCarga>";
                            texto += "<tpUnidCarga>" + Conectar.result15.getString("TP_UN_CARGA") + "</tpUnidCarga>";
                            texto += "<idUnidCarga>" + Conectar.result15.getString("ID_UN_CARGA") + "</idUnidCarga>";

                            Statement stam16 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                            Conectar.result16 = stam16.executeQuery("SELECT * FROM MDFE_LACRES_CARGA WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND TP_DOC = 'M' AND CODDOC ='" + sCODDOC + "' and COD_CARGA ='" + sCOD_CARGA + "' AND COD_TRANSP ='" + sCOD_TRANSP + "'");
                            while (Conectar.result16.next()) {
                                texto += "<lacUnidCarga>";
                                texto += "<nLacre>" + Conectar.result16.getString("NR_LACRE") + "</nLacre>";
                                texto += "</lacUnidCarga>";
                            }

                            texto += "<qtdRat>" + FormataQtdRat(sQTD_RAT_CARGA) + "</qtdRat>";
                            texto += "</infUnidCarga>";

                        }

                        texto += "<qtdRat>" + FormataQtdRat(sQTD_RAT_TRANS) + "</qtdRat>";
                        texto += "</infUnidTransp>";
                        
                        

                        
                    }
                    Statement stam15_1 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
                    Conectar.result15_1 = stam15_1.executeQuery("SELECT * FROM MDFE_PERIGO  WHERE DAD_CODIGO = " + Numero + " AND COD_MUN = '" + sCOD_MUNICIPIO + "' AND CODDOC ='" + sCODDOC + "' AND TP_DOC = 'M' ");
                    while (Conectar.result15_1.next()) {                            
                        texto += "<peri>";
                        texto += "<nONU>"      + Conectar.result15_1.getString("NRONU")           + "</nONU>";
                        texto += "<xNomeAE>"   + Conectar.result15_1.getString("NOME_APROP_EMB")  + "</xNomeAE>";
                        texto += "<xClaRisco>" + Conectar.result15_1.getString("CLARISCO")        + "</xClaRisco>";
                        texto += "<grEmb>"     + Conectar.result15_1.getString("GREMB")           + "</grEmb>";
                        texto += "<qTotProd>"  + Conectar.result15_1.getString("QTOTPROD")        + "</qTotProd>";
                        texto += "<qVolTipo>"  + Conectar.result15_1.getString("VALTIPO")         + "</qVolTipo>";
                        texto += "</peri>"; 
                    }
                    texto += "</infMDFeTransp>";
                }

                texto += "</infMunDescarga>";
                
                
                
            }
            texto += "</infDoc>";
            //---------------------------------------------------------------------------
            
            Statement stam16_1 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
            Conectar.result16_1 = stam16_1.executeQuery("SELECT * FROM MDFE_SEGURO  WHERE DAD_CODIGO = " + Numero + " ");
            while (Conectar.result16_1.next()) {  
              texto += "<seg>";
              
              texto += "<infResp>";
              
              texto += "<respSeg>"+ Conectar.result16_1.getString("TP_RESP") +"</respSeg>";
              
              if(Conectar.result16_1.getString("CPF_RESP").length() > 0 && Conectar.result16_1.getString("CNPJ_RESP").length() == 0){
                texto += "<CPF>"+ Conectar.result16_1.getString("CPF_RESP") +"</CPF>";
              }
              
              if(Conectar.result16_1.getString("CPF_RESP").length() == 0 && Conectar.result16_1.getString("CNPJ_RESP").length() > 0){
                texto += "<CNPJ>"+ Conectar.result16_1.getString("CNPJ_RESP") +"</CNPJ>";
              }
              
              texto += "</infResp>";
              
              texto += "<infSeg>";
              
              texto += "<xSeg>" + Conectar.result16_1.getString("NOME_SEG") + "</xSeg>";
              
              texto += "<CNPJ>" + Conectar.result16_1.getString("CNPJ_SEG") + "</CNPJ>";
              
              texto += "</infSeg>";
            
              //Numero da apolice fica fora do <infSeg>
              texto += "<nApol>" + Conectar.result16_1.getString("NR_APOL") + "</nApol>";
              
              Statement stam16_2 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE, result.HOLD_CURSORS_OVER_COMMIT);
              Conectar.result16_2 = stam16_2.executeQuery("SELECT * FROM MDFE_AVERBACAO  WHERE DAD_CODIGO = " + Numero + " AND COD_SEGURO = "+ Conectar.result16_1.getString("CODIGO") +" ");
              while (Conectar.result16_2.next()) {
                texto += "<nAver>" + Conectar.result16_2.getString("NR_AVER") + "</nAver>";
              }  
              
              texto += "</seg>";
            }
            
            //---------------------------------------------------------------------------

            texto += "<tot>";
            if (sTOT_QTD_CTE != null && !sTOT_QTD_CTE.equals("0")) {
                texto += "<qCTe>" + sTOT_QTD_CTE + "</qCTe>";
            }
            if (sTOT_QTD_NFE != null && !sTOT_QTD_NFE.equals("0")) {
                texto += "<qNFe>" + sTOT_QTD_NFE + "</qNFe>";
            }
            if(sTOT_QTD_MDFE != null && !sTOT_QTD_MDFE.equals("0")){
              texto += "<qMDFe>" + sTOT_QTD_MDFE + "</qMDFe>";
            }
            //mdfe
            texto += "<vCarga>" + FormataValorCarga(sTOT_TOT_MERC_TRANSPORTADA) + "</vCarga>";
            texto += "<cUnid>" + sTOT_UN_MEDIDA_PESO + "</cUnid>";
            texto += "<qCarga>" + FormataTotalCarga(sTOT_PESO_BRUTO) + "</qCarga>";
            texto += "</tot>";

            // Statement stam17 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE,result.HOLD_CURSORS_OVER_COMMIT);
            System.out.println("SELECT * FROM MDFE_LACRES_TOTALIZADOR WHERE DAD_CODIGO = " + Numero + "");
            Conectar.result17 = Conectar.stam.executeQuery("SELECT * FROM MDFE_LACRES_TOTALIZADOR WHERE DAD_CODIGO = " + Numero + "");
            while (Conectar.result17.next()) {
                texto += "<lacres>";
                texto += "<nLacre>" + Conectar.result17.getString("NR_LACRE") + "</nLacre>";
                texto += "</lacres>";
            }

            // Statement stam18 = Conectar.con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE,result.HOLD_CURSORS_OVER_COMMIT);
            Conectar.result18 = Conectar.stam.executeQuery("SELECT * FROM MDFE_DOWNLOAD WHERE DAD_CODIGO = " + Numero + "");
            while (Conectar.result18.next()) {
                texto += "<autXML>";
                if (Conectar.result18.getString("TIPO").equals("1")) {
                    texto += "<CPF>" + Conectar.result18.getString("DOCUMENTO") + "</CPF>";
                } else if (Conectar.result18.getString("TIPO").equals("2")) {
                    texto += "<CNPJ>" + Conectar.result18.getString("DOCUMENTO") + "</CNPJ>";
                }

                texto += "</autXML>";
            }

            if ((sINF_FISCO != null && sINF_FISCO.length() > 0) || (sINF_CONTR != null && sINF_CONTR.length() > 0)) {
                texto += "<infAdic>";
                if (sINF_FISCO != null && sINF_FISCO.length() > 0) {
                    texto += "<infAdFisco>" + sINF_FISCO + "</infAdFisco>";
                }
                if (sINF_CONTR != null && sINF_CONTR.length() > 0) {
                    texto += "<infCpl>" + sINF_CONTR + "</infCpl>";
                }
                texto += "</infAdic>";
            }

            texto += "</infMDFe>";
            texto += "</MDFe>";

           // saida.format(texto);
           // saida.close();
            System.out.println(texto);
            GravarArquivoMDFe(texto, sDAD_CHAVE);
            JOptionPane.showMessageDialog(null, "Arquivo '" + sDAD_CHAVE + ".xml' criado!", "Arquivo", 1);
            return texto;
        } catch (Exception erro) {
            erro.printStackTrace();
            JOptionPane.showMessageDialog(null, "Arquivo nao pode ser gerado! : " + erro, "Erro", 0);
            System.out.println("erro : " + erro);
            return "";
        }
      //  return texto;
    }
  
    //Evento para sair da tela com a tecla esc
    //Chamar evento no construtor principal da classe
    public void SairEsc() {
        KeyStroke ks = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0, true);
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(ks, "esc");
        getRootPane().getActionMap().put("esc", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                if (jPnlBusca.isVisible() == true) {
                    dispose();
                } else if (jPnlEdit.isVisible() == true) {
                    jPnlEdit.setVisible(false);
                    jPnlBusca.setVisible(true);
                    jFldCodFilial.requestFocus();
                }
            }
        });
    }

    /**
     * Classe que implementa o método abstrato TableCellRenderer para poder
     * fazer a troca de cor de fundo e fonte do cabeçalho da tabela.
     */
    private class MeuRenderizador extends JLabel implements TableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int rowIndex, int vColIndex) {

            table.getTableHeader().setBackground(Color.BLUE);
            table.getTableHeader().setOpaque(false);
            setFont(getFont().deriveFont(Font.BOLD));
            setBorder(new LineBorder(Color.WHITE, 1, true));
            setForeground(Color.WHITE);
            setHorizontalAlignment(SwingConstants.LEFT);
            setText(value.toString());

            return this;
        }
    }
    
    public static TelaMovimentacao getInstancia() {
        return instancia;
    }
    
    //Metodo que chama o visualizador do relatorio em um JFrame
    public void VisualizarRelatorio(JasperPrint print){
        //Instacia o visualizador do relatorio
        JasperViewer ver = new JasperViewer(print, false);

        //Mostra o relatório
        ver.setVisible(true);

        //Seta o icone da tela do formulario
        ver.setIconImage(new ImageIcon(getClass().getResource("/imagens/mdfeIcone.png")).getImage());

        //Seta o titulo
        ver.setTitle("DAMDFE - Documento Auxiliar de Manifesto Eletrônico de Documentos Fiscais");

        //Maximiza a tela
        ver.setExtendedState(ver.MAXIMIZED_BOTH);
    }
    
    
    public JasperPrint GerarRelatorio(String Dad_Codigo) {
        JasperPrint print = null;
        String caminho = "";
        String ordnar = "";
        Integer mod = 2;
        try {
            Conectar.ConectarBD();
            //habilita 2 dataset 
            Conectar.con.setHoldability( ResultSet.HOLD_CURSORS_OVER_COMMIT);
            //Pega o caminho do relatório
            InputStream CaminhoRelatorio = getClass().getResourceAsStream("/Relatorio/DAMDFE.jrxml");
            JasperReport report = JasperCompileManager.compileReport(CaminhoRelatorio);
            
            Map mapa = new HashMap<>();            
            //Adiciona o nome dos parametros e os valores
            mapa.put("PrtDAD_CODIGO", Dad_Codigo);
                       
            //Passa o caminho, os parametros mapeados e a conexao para o relatorio
            print = JasperFillManager.fillReport(report, mapa, Conectar.con);

            Conectar.DesconectarBD();
            
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao Gerar Relatório\n" + e.getLocalizedMessage());
        }
        
        //Retorna o relatorio pronto para impressao
        return print;
    }

}
